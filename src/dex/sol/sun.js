(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
  [448],
  {
    3216: function (e, t, a) {
      "use strict";
      let l,
        n,
        s,
        o,
        r,
        i,
        c,
        d,
        u,
        m,
        x,
        g,
        p,
        y,
        f,
        h,
        b,
        w,
        j,
        k,
        S,
        v,
        P,
        N,
        T,
        A,
        L,
        B,
        K,
        M,
        C,
        _,
        R,
        O,
        Z,
        I,
        E,
        F,
        q,
        D;
      a.d(t, {
        dh: function () {
          return AuthorityView;
        },
        JR: function () {
          return BurnView;
        },
        kX: function () {
          return CreateAndBuyPumpView;
        },
        t: function () {
          return CreateView;
        },
        aQ: function () {
          return FrozenView;
        },
        ug: function () {
          return HomeView;
        },
        $B: function () {
          return MarketManageV2View;
        },
        M2: function () {
          return MarketManageView;
        },
        PK: function () {
          return MarketView;
        },
        uB: function () {
          return MarketagePumpView;
        },
        Qx: function () {
          return MeteoraLiqView;
        },
        jA: function () {
          return MeteoraPoolView;
        },
        ok: function () {
          return MeteoraSwapView;
        },
        dY: function () {
          return MintView;
        },
        t5: function () {
          return MoreView;
        },
        cM: function () {
          return MultiSenderView;
        },
        IE: function () {
          return PoolAndBuyView;
        },
        Oz: function () {
          return PoolView;
        },
        nN: function () {
          return RemoveMeteoraLiqView;
        },
        b8: function () {
          return RemoveView;
        },
        ME: function () {
          return TestView;
        },
        _1: function () {
          return TradeBotPumpView;
        },
        n3: function () {
          return TradeBotView;
        },
        Tu: function () {
          return UpdataView;
        },
      });
      var V = a(85893),
        z = a(67294),
        W = a(41664),
        H = a.n(W),
        Q = a(54306),
        U = a(44718),
        G = a(5233),
        X = a(14671),
        Y = a(96737);
      let J = (0, X.Z)((e, t) => ({
        balance: 0,
        getUserSOLBalance: async (t, a) => {
          let l = 0;
          try {
            l = (await a.getBalance(t, "confirmed")) / Y.LAMPORTS_PER_SOL;
          } catch (e) {
            console.log("error getting balance: ", e);
          }
          e((e) => {
            (e.balance = l), console.log("balance updated, ", l);
          });
        },
      }));
      var $ = a(25675),
        ee = a.n($);
      let HomeView = (e) => {
        let {} = e,
          t = (0, Q.O)(),
          { connection: a } = (0, U.R)(),
          { t: l } = (0, G.$G)("common");
        J((e) => e.balance);
        let { getUserSOLBalance: n } = J();
        return (
          (0, z.useEffect)(() => {
            t.publicKey && n(t.publicKey, a);
          }, [t.publicKey, a, n]),
          (0, V.jsxs)("div", {
            className: " mx-auto p-4",
            children: [
              (0, V.jsx)("div", {
                className: "md:w-[600px]",
                style: { width: "100%", height: "400px" },
                children: (0, V.jsxs)("div", {
                  style: {
                    backgroundPosition: "100% 0%",
                    backgroundRepeat: "no-repeat",
                    backgroundSize: "274px",
                    backgroundImage:
                      "url('https://gw.alipayobjects.com/mdn/rms_a9745b/afts/img/A*BuFmQqsB2iAAAAAAAAAAAAAAARQnAQ')",
                  },
                  children: [
                    (0, V.jsx)("div", {
                      style: { fontSize: "20px", color: "rgba(0, 0, 0, 0.88)" },
                      children: l("home.h1"),
                    }),
                    (0, V.jsx)("p", {
                      style: {
                        fontSize: "18px",
                        color: "rgba(0, 0, 0, 0.65)",
                        lineHeight: "22px",
                        marginTop: "16px",
                        marginBottom: "5px",
                        width: "65%",
                      },
                      children: l("home.h2"),
                    }),
                    (0, V.jsx)("p", {
                      style: {
                        fontSize: "18px",
                        color: "rgba(0, 0, 0, 0.65)",
                        lineHeight: "22px",
                        marginTop: "5px",
                        marginBottom: "32px",
                        width: "65%",
                      },
                      children: l("home.h3"),
                    }),
                    (0, V.jsx)("div", {
                      style: {
                        display: "flex",
                        flexWrap: "wrap",
                        marginTop: "20px",
                        marginBottom: "20px",
                      },
                      children: (0, V.jsx)(H(), {
                        href: "https://t.me/wousdt8",
                        children: (0, V.jsx)("button", {
                          className:
                            "px-8 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                          children: (0, V.jsx)("span", {
                            children: "Telegram",
                          }),
                        }),
                      }),
                    }),
                    (0, V.jsxs)("div", {
                      style: { display: "flex", flexWrap: "wrap", gap: "16px" },
                      children: [
                        (0, V.jsxs)("div", {
                          style: {
                            backgroundColor: "rgb(255, 255, 255)",
                            boxShadow:
                              "rgba(0, 0, 0, 0.08) 0px 6px 16px 0px, rgba(0, 0, 0, 0.12) 0px 3px 6px -4px, rgba(0, 0, 0, 0.05) 0px 9px 28px 8px",
                            borderRadius: "8px",
                            fontSize: "14px",
                            color: "rgba(0, 0, 0, 0.65)",
                            lineHeight: "22px",
                            padding: "16px 19px",
                            minWidth: "220px",
                            flex: "1 1 0%",
                          },
                          children: [
                            (0, V.jsxs)("div", {
                              style: {
                                display: "flex",
                                gap: "4px",
                                alignItems: "center",
                              },
                              children: [
                                (0, V.jsx)("div", {
                                  style: {
                                    width: "48px",
                                    height: "48px",
                                    lineHeight: "22px",
                                    backgroundSize: "100%",
                                    textAlign: "center",
                                    padding: "8px 16px 16px 12px",
                                    color: "rgb(255, 255, 255)",
                                    fontWeight: "bold",
                                    backgroundImage:
                                      "url('https://gw.alipayobjects.com/zos/bmw-prod/daaf8d50-8e6d-4251-905d-676a24ddfa12.svg')",
                                  },
                                  children: "1",
                                }),
                                (0, V.jsx)("div", {
                                  style: {
                                    fontSize: "16px",
                                    color: "rgba(0, 0, 0, 0.88)",
                                    paddingBottom: "8px",
                                  },
                                  children: l("home.h4"),
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: {
                                fontSize: "14px",
                                color: "rgba(0, 0, 0, 0.65)",
                                textAlign: "justify",
                                lineHeight: "22px",
                                marginBottom: "8px",
                              },
                              children: l("home.h5"),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          style: {
                            backgroundColor: "rgb(255, 255, 255)",
                            boxShadow:
                              "rgba(0, 0, 0, 0.08) 0px 6px 16px 0px, rgba(0, 0, 0, 0.12) 0px 3px 6px -4px, rgba(0, 0, 0, 0.05) 0px 9px 28px 8px",
                            borderRadius: "8px",
                            fontSize: "14px",
                            color: "rgba(0, 0, 0, 0.65)",
                            lineHeight: "22px",
                            padding: "16px 19px",
                            minWidth: "220px",
                            flex: "1 1 0%",
                          },
                          children: [
                            (0, V.jsxs)("div", {
                              style: {
                                display: "flex",
                                gap: "4px",
                                alignItems: "center",
                              },
                              children: [
                                (0, V.jsx)("div", {
                                  style: {
                                    width: "48px",
                                    height: "48px",
                                    lineHeight: "22px",
                                    backgroundSize: "100%",
                                    textAlign: "center",
                                    padding: "8px 16px 16px 12px",
                                    color: "rgb(255, 255, 255)",
                                    fontWeight: "bold",
                                    backgroundImage:
                                      "url('https://gw.alipayobjects.com/zos/bmw-prod/daaf8d50-8e6d-4251-905d-676a24ddfa12.svg')",
                                  },
                                  children: "2",
                                }),
                                (0, V.jsx)("div", {
                                  style: {
                                    fontSize: "16px",
                                    color: "rgba(0, 0, 0, 0.88)",
                                    paddingBottom: "8px",
                                  },
                                  children: l("home.h6"),
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: {
                                fontSize: "14px",
                                color: "rgba(0, 0, 0, 0.65)",
                                textAlign: "justify",
                                lineHeight: "22px",
                                marginBottom: "8px",
                              },
                              children: l("home.h7"),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          style: {
                            backgroundColor: "rgb(255, 255, 255)",
                            boxShadow:
                              "rgba(0, 0, 0, 0.08) 0px 6px 16px 0px, rgba(0, 0, 0, 0.12) 0px 3px 6px -4px, rgba(0, 0, 0, 0.05) 0px 9px 28px 8px",
                            borderRadius: "8px",
                            fontSize: "14px",
                            color: "rgba(0, 0, 0, 0.65)",
                            lineHeight: "22px",
                            padding: "16px 19px",
                            minWidth: "220px",
                            flex: "1 1 0%",
                          },
                          children: [
                            (0, V.jsxs)("div", {
                              style: {
                                display: "flex",
                                gap: "4px",
                                alignItems: "center",
                              },
                              children: [
                                (0, V.jsx)("div", {
                                  style: {
                                    width: "48px",
                                    height: "48px",
                                    lineHeight: "22px",
                                    backgroundSize: "100%",
                                    textAlign: "center",
                                    padding: "8px 16px 16px 12px",
                                    color: "rgb(255, 255, 255)",
                                    fontWeight: "bold",
                                    backgroundImage:
                                      "url('https://gw.alipayobjects.com/zos/bmw-prod/daaf8d50-8e6d-4251-905d-676a24ddfa12.svg')",
                                  },
                                  children: "3",
                                }),
                                (0, V.jsx)("div", {
                                  style: {
                                    fontSize: "16px",
                                    color: "rgba(0, 0, 0, 0.88)",
                                    paddingBottom: "8px",
                                  },
                                  children: l("home.h8"),
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: {
                                fontSize: "14px",
                                color: "rgba(0, 0, 0, 0.65)",
                                textAlign: "justify",
                                lineHeight: "22px",
                                marginBottom: "8px",
                              },
                              children: l("home.h9"),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          style: {
                            backgroundColor: "rgb(255, 255, 255)",
                            boxShadow:
                              "rgba(0, 0, 0, 0.08) 0px 6px 16px 0px, rgba(0, 0, 0, 0.12) 0px 3px 6px -4px, rgba(0, 0, 0, 0.05) 0px 9px 28px 8px",
                            borderRadius: "8px",
                            fontSize: "14px",
                            color: "rgba(0, 0, 0, 0.65)",
                            lineHeight: "22px",
                            padding: "16px 19px",
                            minWidth: "220px",
                            flex: "1 1 0%",
                          },
                          children: [
                            (0, V.jsxs)("div", {
                              style: {
                                display: "flex",
                                gap: "4px",
                                alignItems: "center",
                              },
                              children: [
                                (0, V.jsx)("div", {
                                  style: {
                                    width: "48px",
                                    height: "48px",
                                    lineHeight: "22px",
                                    backgroundSize: "100%",
                                    textAlign: "center",
                                    padding: "8px 16px 16px 12px",
                                    color: "rgb(255, 255, 255)",
                                    fontWeight: "bold",
                                    backgroundImage:
                                      "url('https://gw.alipayobjects.com/zos/bmw-prod/daaf8d50-8e6d-4251-905d-676a24ddfa12.svg')",
                                  },
                                  children: "4",
                                }),
                                (0, V.jsx)("div", {
                                  style: {
                                    fontSize: "16px",
                                    color: "rgba(0, 0, 0, 0.88)",
                                    paddingBottom: "8px",
                                  },
                                  children: l("home.h10"),
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: {
                                fontSize: "14px",
                                color: "rgba(0, 0, 0, 0.65)",
                                textAlign: "justify",
                                lineHeight: "22px",
                                marginBottom: "8px",
                              },
                              children: l("home.h11"),
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
              (0, V.jsx)("div", {
                style: { width: "100%", height: "280px" },
                children: (0, V.jsxs)("div", {
                  className: "home-safety-tips",
                  children: [
                    (0, V.jsxs)("div", {
                      className: "content",
                      children: [
                        (0, V.jsx)("h4", { children: l("home.h12") }),
                        (0, V.jsx)("p", { children: l("home.h13") }),
                      ],
                    }),
                    (0, V.jsx)(ee(), {
                      className: "tips_img",
                      src: "/safety.png",
                      alt: "solana icon",
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      };
      var et = a(74769),
        ea = a(17407),
        el = a(32742),
        en = a(73091),
        es = a(58467),
        eo = a(28537),
        er = a(77043),
        ei = a(65964),
        ec = a(95827),
        ed = a(65752),
        eu = a(34155),
        em = a(48764).Buffer;
      async function disableAuthority(e, t, a, l, n, s) {
        let o = new Y.PublicKey(t),
          r = new Y.Transaction();
        if (l) {
          let e = (0, et.zl)(o, a, et.aj.MintTokens, null);
          r.add(e);
        }
        if (n) {
          let e = (0, et.zl)(o, a, et.aj.FreezeAccount, null);
          r.add(e);
        }
        if (s) {
          let [e] = await Y.PublicKey.findProgramAddressSync(
              [
                em.from("metadata"),
                new Y.PublicKey(ex).toBuffer(),
                o.toBuffer(),
              ],
              new Y.PublicKey(ex)
            ),
            t = (0, ec.createUpdateMetadataAccountV2Instruction)(
              { metadata: e, updateAuthority: a },
              {
                updateMetadataAccountArgsV2: {
                  data: null,
                  isMutable: !1,
                  primarySaleHappened: !1,
                  updateAuthority: a,
                },
              }
            );
          r.add(t);
        }
        let i = Number("0.1"),
          c = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
          d = Y.SystemProgram.transfer({
            fromPubkey: a,
            toPubkey: c,
            lamports: 1e9 * i,
          });
        return r.add(d), r;
      }
      async function disableAccount(e, t, a) {
        let l = new Y.PublicKey(e),
          n = new Y.Transaction();
        n = setPublicGasfee(n);
        let s = (0, ea.Gh)(l, t, a);
        n.add(s);
        let o = Number("0.1"),
          r = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
          i = Y.SystemProgram.transfer({
            fromPubkey: a,
            toPubkey: r,
            lamports: 1e9 * o,
          });
        return n.add(i), n;
      }
      async function burntokensAndcloseacc(e, t, a, l, n) {
        new Y.PublicKey(a);
        let s = new Y.Transaction(),
          o = (0, el.T7)(new Y.PublicKey(t), new Y.PublicKey(a), l, n);
        s.add(o);
        let r = Number("0.1"),
          i = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
          c = Y.SystemProgram.transfer({
            fromPubkey: l,
            toPubkey: i,
            lamports: 1e9 * r,
          });
        return s.add(c), s;
      }
      function setPublicGasfee(e, t) {
        switch (ed.qg) {
          case 0:
            return e;
          case 1:
            return (
              e.add(
                Y.ComputeBudgetProgram.setComputeUnitLimit({
                  units: 5e-4 * Y.LAMPORTS_PER_SOL,
                })
              ),
              e.add(
                Y.ComputeBudgetProgram.setComputeUnitPrice({
                  microLamports: 0.004 * Y.LAMPORTS_PER_SOL,
                })
              ),
              e
            );
          case 2:
            return (
              e.add(
                Y.ComputeBudgetProgram.setComputeUnitLimit({
                  units: 6e-4 * Y.LAMPORTS_PER_SOL,
                })
              ),
              e.add(
                Y.ComputeBudgetProgram.setComputeUnitPrice({
                  microLamports: 0.008 * Y.LAMPORTS_PER_SOL,
                })
              ),
              e
            );
        }
      }
      async function burntokens(e, t, a, l, n) {
        let s = new Y.Transaction();
        s = setPublicGasfee(s);
        let o = (0, el.T7)(new Y.PublicKey(t), new Y.PublicKey(a), l, n);
        s.add(o);
        let r = Number("0.1"),
          i = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
          c = Y.SystemProgram.transfer({
            fromPubkey: l,
            toPubkey: i,
            lamports: 1e9 * r,
          });
        return s.add(c), s;
      }
      eu.env.NEXT_PUBLIC_PRICE_DISCOUNT;
      let ex = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
        createMintTokenTransactionproc = async (
          e,
          t,
          a,
          l,
          n,
          s,
          o,
          r,
          i,
          c,
          d
        ) => {
          let u = new Y.Transaction();
          u = setPublicGasfee(u);
          let m = await (0, en.Mg)(e);
          u.add(
            Y.SystemProgram.createAccount({
              fromPubkey: t,
              newAccountPubkey: a.publicKey,
              lamports: m,
              space: en.Bl,
              programId: es.H_,
            })
          ),
            u.add((0, eo.I0)(a.publicKey, l, t, t, es.H_));
          let x = await (0, en.Am)(a.publicKey, t),
            g = await (0, er.Ek)(t, x, t, a.publicKey);
          u.add(g);
          let p = (0, ei.G7)(a.publicKey, x, t, n * Math.pow(10, l));
          u.add(p);
          let y = Number("0.1"),
            f = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
            h = Y.SystemProgram.transfer({
              fromPubkey: t,
              toPubkey: f,
              lamports: 1e9 * y,
            });
          if ((u.add(h), "" == s || "" == o || "" == r)) return u;
          let [b] = await Y.PublicKey.findProgramAddressSync(
              [
                em.from("metadata"),
                new Y.PublicKey(ex).toBuffer(),
                a.publicKey.toBuffer(),
              ],
              new Y.PublicKey(ex)
            ),
            w = !d;
          console.log(w);
          let j = (0, ec.createCreateMetadataAccountV3Instruction)(
            {
              metadata: b,
              mint: a.publicKey,
              mintAuthority: t,
              payer: t,
              updateAuthority: t,
            },
            {
              createMetadataAccountArgsV3: {
                data: {
                  name: o,
                  symbol: r,
                  uri: s,
                  sellerFeeBasisPoints: 1e3,
                  creators: [{ address: t, verified: !0, share: 100 }],
                  collection: null,
                  uses: null,
                },
                isMutable: w,
                collectionDetails: null,
              },
            }
          );
          if ((u.add(j), i)) {
            let e = (0, et.zl)(a.publicKey, t, et.aj.MintTokens, null);
            u.add(e);
          }
          if (c) {
            let e = (0, et.zl)(a.publicKey, t, et.aj.FreezeAccount, null);
            u.add(e);
          }
          return u;
        },
        setMintTokenProc = async (e, t, a, l) => {
          let n = new Y.Transaction();
          n = setPublicGasfee(n);
          let s = await (0, en.Am)(t, e),
            o = (0, ei.G7)(t, s, e, l);
          n.add(o);
          let r = Number("0.1"),
            i = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
            c = Y.SystemProgram.transfer({
              fromPubkey: e,
              toPubkey: i,
              lamports: 1e9 * r,
            });
          return n.add(c), n;
        },
        getmyTokenUri = async (e, t, a, l, n, s, o, r) =>
          new Promise((i, c) => {
            let d = new FormData();
            d.append("file", e),
              d.append("tokenname", t),
              d.append("symbol", a),
              d.append("description", l),
              d.append("website", n),
              d.append("telegram", s),
              d.append("twitter", o),
              d.append("wordArray", r),
              d.append("key", "PCCAR4Fs2-Fuck U !"),
              fetch("/api/upload", { method: "POST", body: d })
                .then((e) => {
                  if (!e.ok) throw Error("网络错误");
                  return e.json();
                })
                .then((e) => {
                  console.log("上传成功:", e), i(e.uri);
                })
                .catch((e) => {
                  console.error("上传失败:", e), i("error");
                });
          }),
        createUpdateMetadataIx = async (e, t, a, l, n) => {
          let [s] = await Y.PublicKey.findProgramAddressSync(
              [
                em.from("metadata"),
                new Y.PublicKey(ex).toBuffer(),
                e.toBuffer(),
              ],
              new Y.PublicKey(ex)
            ),
            o = new Y.Transaction(),
            r = (0, ec.createUpdateMetadataAccountV2Instruction)(
              { metadata: s, updateAuthority: n },
              {
                updateMetadataAccountArgsV2: {
                  data: {
                    name: t,
                    symbol: a,
                    uri: l,
                    sellerFeeBasisPoints: 1e3,
                    creators: [{ address: n, verified: !0, share: 100 }],
                    collection: null,
                    uses: null,
                  },
                  updateAuthority: n,
                  primarySaleHappened: !0,
                  isMutable: !0,
                },
              }
            );
          o.add(r);
          let i = Number("0.1"),
            c = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"),
            d = Y.SystemProgram.transfer({
              fromPubkey: n,
              toPubkey: c,
              lamports: 1e9 * i,
            });
          return o.add(d), o;
        };
      var eg = a(31569);
      function notify(e) {
        let { notifications: t, set: a } = eg.Z.getState();
        a((a) => {
          a.notifications = [...t, { type: "success", ...e }];
        });
      }
      var ep = a(64070),
        ey = a(43651);
      let TestParam = (e) => {
          let { selectedFile: t } = e,
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            { networkConfiguration: i } = (0, ep.lt)();
          (0, z.useMemo)(() => (0, Y.clusterApiUrl)(i), [i]), (0, ey.z)();
          let [c, d] = (0, z.useState)(null),
            [u, m] = (0, z.useState)(""),
            x = (0, z.useCallback)(async () => {
              if (l) {
                let e = document.getElementById("tokenname"),
                  a = document.getElementById("tokencount"),
                  l = document.getElementById("tokendec"),
                  n = document.getElementById("tokenSymbol"),
                  s = document.getElementById("userweb"),
                  o = document.getElementById("tglink"),
                  r = document.getElementById("xlink"),
                  i = document.getElementById("dislink"),
                  c = document.getElementById("des"),
                  d = document.getElementById("tags");
                if ((null == e ? void 0 : e.value) == "") {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称不能为空",
                  });
                  return;
                }
                if ((null == e ? void 0 : e.value.length) > 15) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称长度不能大于15",
                  });
                  return;
                }
                if ((null == n ? void 0 : n.value) == "") {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称不能为空",
                  });
                  return;
                }
                if ((null == n ? void 0 : n.value.length) > 8) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币简称长度不能大于8",
                  });
                  return;
                }
                if (isNaN(Number(null == l ? void 0 : l.value))) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币精度请输入一个数字1-10",
                  });
                  return;
                }
                if (isNaN(Number(null == a ? void 0 : a.value))) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币总数必须为数字",
                  });
                  return;
                }
                let u = {
                  decimals: null == l ? void 0 : l.value,
                  supply: null == a ? void 0 : a.value,
                  tokenName: null == e ? void 0 : e.value,
                  symbol: null == n ? void 0 : n.value,
                  web: null == s ? void 0 : s.value,
                  tglink: null == o ? void 0 : o.value,
                  xlink: null == r ? void 0 : r.value,
                  dislink: null == i ? void 0 : i.value,
                  description: null == c ? void 0 : c.value,
                  tags: null == d ? void 0 : d.value,
                  image: "",
                };
                if (t) {
                  let e = u.tags.split(","),
                    a = e.map((e) => e.trim());
                  console.log(a), console.log("sendfile:", t);
                  let l = await getmyTokenUri(
                    t,
                    u.tokenName,
                    u.symbol,
                    u.description,
                    u.web,
                    u.tglink,
                    u.xlink,
                    a
                  );
                  console.log(l);
                }
                return;
              }
              notify({
                type: "error",
                message: "错误",
                description: "钱包未链接...",
              }),
                console.log("error", "wallet not connect!");
            }, [notify, n, t]);
          return (0, V.jsx)("button", {
            className:
              "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
            onClick: x,
            style: {
              background: "#ff9815",
              border: "none",
              boxShadow: "0 4px 0 0 #db7a00",
              height: "48px",
              padding: "10px 50px",
            },
            children: (0, V.jsx)("span", { children: "确定创建 " }),
          });
        },
        TestView = (e) => {
          let {} = e;
          (0, Q.O)();
          let { connection: t } = (0, U.R)(),
            [a, l] = (0, z.useState)(null),
            handletestproc = async () => {
              let e;
              console.log("1111111");
              let a = new Y.PublicKey(
                "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"
              );
              try {
                e = await t.getProgramAccounts(a);
              } catch (e) {
                console.log("err", e);
              }
              console.log("Accounts for program ".concat(a, ": ")),
                console.log(e);
            };
          return (0, V.jsx)("div", {
            className: "md:hero mx-auto p-4",
            children: (0, V.jsxs)("div", {
              className: "md:hero-content flex flex-col",
              children: [
                (0, V.jsxs)("div", {
                  className: "mt-6",
                  children: [
                    (0, V.jsx)("h1", {
                      className:
                        "text-center text-5xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      children: "创建代币",
                    }),
                    (0, V.jsx)("button", {
                      onClick: handletestproc,
                      children: "获取程序地址",
                    }),
                  ],
                }),
                (0, V.jsxs)("h2", {
                  children: [
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "*代币全称:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "tokenname",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "请输入全称(如:Btc Coin)",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "*简称:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "tokenSymbol",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "请输入全称(如:BTC)",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "*精度:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "tokendec",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "9",
                            defaultValue: "9",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "*总供应量:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "tokencount",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "100000",
                            defaultValue: "100000",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "LOGO:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsxs)("div", {
                            className: "m-auto w-[350px] px-2 text-center",
                            children: [
                              (0, V.jsx)("svg", {
                                className: "mx-auto h-12 w-12 text-gray-400",
                                stroke: "currentColor",
                                fill: "none",
                                viewBox: "0 0 48 48",
                                "aria-hidden": "true",
                                children: (0, V.jsx)("path", {
                                  d: "M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02",
                                  "stroke-linejoin": "round",
                                }),
                              }),
                              (0, V.jsxs)("label", {
                                className:
                                  "cursor-pointer font-medium text-purple-500 hover:text-indigo-500",
                                children: [
                                  (0, V.jsx)("span", { children: "选择图片" }),
                                  (0, V.jsx)("input", {
                                    type: "file",
                                    id: "fileInput",
                                    onChange: (e) => {
                                      l(e.target.files[0]);
                                    },
                                    className: "sr-only",
                                    required: !0,
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "官网:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "userweb",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "选填,",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "Telegram群组:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "tglink",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "选填,",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "Twitter:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "xlink",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "选填,",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "Discord:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[350px]",
                          children: (0, V.jsx)("input", {
                            id: "dislink",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: "选填,",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "简介:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[468px]",
                          children: (0, V.jsx)("textarea", {
                            id: "des",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-8 my-2",
                            placeholder: "选填,最多200字",
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-1 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "标签:",
                        }),
                        (0, V.jsx)("div", {
                          className: "m-auto  w-[468px]",
                          children: (0, V.jsx)("textarea", {
                            id: "tags",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-8 my-2",
                            placeholder: "Meme,NFT,DIFI",
                            defaultValue: "Meme,NFT,DIFI",
                          }),
                        }),
                      ],
                    }),
                  ],
                }),
                (0, V.jsx)("div", {
                  className: "flex flex-col mt-2",
                  children: (0, V.jsx)(TestParam, { selectedFile: a }),
                }),
              ],
            }),
          });
        };
      a(83473), a(78736), a(21267), a(70353);
      var components_Loading = () =>
          (0, V.jsx)("div", {
            className: "loading-overlay",
            children: (0, V.jsx)("div", { className: "loading-spinner" }),
          }),
        ef = a(80738),
        eh = a(65400),
        eb = a.n(eh),
        ew = a(32267),
        ej = a(6154),
        ek = a(53740),
        eS = a(94055),
        ev = a(36754),
        eP = a(48138),
        eN = a(46564);
      let useMessageBoxPam = (e) => {
          let [t, a] = (0, z.useState)(e);
          return [
            t,
            (e) => {
              a(e);
            },
          ];
        },
        { Title: eT, Text: eA } = ek.default;
      var msgbox = (e) => {
        let { isModalOpen: t, msgParam: a, handleCancel: l } = e,
          { t: n } = (0, G.$G)("common"),
          [s, o] = (0, z.useState)(!1),
          [r, i] = (0, z.useState)(!1);
        return (0, V.jsx)(ej.Z, {
          gap: "middle",
          align: "start",
          vertical: !0,
          children: (0, V.jsxs)(ew.Z, {
            title: "",
            open: t,
            width: 600,
            onCancel: l,
            footer: [],
            children: [
              (0, V.jsx)(ej.Z, {
                align: "center",
                justify: "center",
                children: (0, V.jsx)(eT, {
                  level: 2,
                  children: n("msgbox.h1"),
                }),
              }),
              (0, V.jsx)(ej.Z, {
                align: "center",
                justify: "center",
                children: (0, V.jsxs)(eT, {
                  level: 5,
                  type: "warning",
                  children: [" ", n("msgbox.t1"), " "],
                }),
              }),
              (0, V.jsx)(ej.Z, {
                align: "center",
                justify: "center",
                children: (0, V.jsxs)(eA, {
                  children: [" ", n("msgbox.t2"), " "],
                }),
              }),
              "" !== a.addr1 &&
                (0, V.jsx)(ej.Z, {
                  align: "center",
                  justify: "flex-start",
                  children: (0, V.jsxs)(eT, {
                    level: 5,
                    children: [
                      a.addrName,
                      " ",
                      (0, V.jsx)(eA, { type: "success", children: a.addr1 }),
                      s
                        ? (0, V.jsx)(eP.Z, {})
                        : (0, V.jsxs)(eS.default, {
                            title: "copy",
                            children: [
                              " ",
                              (0, V.jsx)(ev.default, {
                                onClick: () => {
                                  navigator.clipboard.writeText(a.addr1),
                                    o(!0),
                                    setTimeout(() => {
                                      o(!1);
                                    }, 1e3);
                                },
                              }),
                              " ",
                            ],
                          }),
                      (0, V.jsx)(eS.default, {
                        title: "Open in browser",
                        children: (0, V.jsxs)(H(), {
                          href: "https://solscan.io/"
                            .concat(a.addrTag, "/")
                            .concat(a.addr1),
                          target: "_blank",
                          rel: "noopener noreferrer",
                          passHref: !0,
                          children: [" ", (0, V.jsx)(eN.default, {})],
                        }),
                      }),
                    ],
                  }),
                }),
              (0, V.jsx)(ej.Z, {
                align: "center",
                justify: "flex-start",
                children: (0, V.jsxs)(eT, {
                  level: 5,
                  children: [
                    a.hxName,
                    " ",
                    (0, V.jsx)(eA, { type: "success", children: a.hxAddr }),
                    r
                      ? (0, V.jsx)(eP.Z, {})
                      : (0, V.jsxs)(eS.default, {
                          title: "copy",
                          children: [
                            " ",
                            (0, V.jsx)(ev.default, {
                              onClick: () => {
                                navigator.clipboard.writeText(a.hxAddr),
                                  i(!0),
                                  setTimeout(() => {
                                    i(!1);
                                  }, 1e3);
                              },
                            }),
                            " ",
                          ],
                        }),
                    (0, V.jsx)(eS.default, {
                      title: "Open in browser",
                      children: (0, V.jsxs)(H(), {
                        href: "https://solscan.io/tx/".concat(a.hxAddr),
                        target: "_blank",
                        rel: "noopener noreferrer",
                        passHref: !0,
                        children: [" ", (0, V.jsx)(eN.default, {}), " "],
                      }),
                    }),
                  ],
                }),
              }),
              (0, V.jsx)(ej.Z, {
                align: "center",
                justify: "center",
                children: (0, V.jsx)(
                  eb(),
                  { onClick: l, children: n("msgbox.btn") },
                  "back"
                ),
              }),
            ],
          }),
        });
      };
      let CreateParam = (e) => {
          let { selectedFile: t } = e,
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            i = (0, ey.z)(),
            [c, d] = (0, z.useState)(null),
            [u, m] = (0, z.useState)(""),
            [x, g] = (0, z.useState)(null),
            [p, y] = (0, z.useState)(!1),
            { t: f } = (0, G.$G)("common"),
            [h, b] = (0, z.useState)(!1),
            [w, j] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            }),
            k = (0, z.useCallback)(async () => {
              if (l) {
                let e;
                let l = document.getElementById("tokenname"),
                  n = document.getElementById("tokencount"),
                  s = document.getElementById("tokendec"),
                  o = document.getElementById("tokenSymbol"),
                  r = document.getElementById("userweb"),
                  c = document.getElementById("tglink"),
                  d = document.getElementById("xlink"),
                  u = document.getElementById("dislink"),
                  x = document.getElementById("des"),
                  p = document.getElementById("tags"),
                  h = document.getElementById("freeys"),
                  w = document.getElementById("freemint"),
                  k = document.getElementById("freeacc"),
                  S = w.checked,
                  v = k.checked,
                  P = h.checked;
                if ((null == l ? void 0 : l.value) == "") {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称不能为空",
                  });
                  return;
                }
                if ((null == l ? void 0 : l.value.length) > 30) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称长度不能大于30",
                  });
                  return;
                }
                if ((null == o ? void 0 : o.value) == "") {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称不能为空",
                  });
                  return;
                }
                if ((null == o ? void 0 : o.value.length) > 15) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币简称长度不能大于8",
                  });
                  return;
                }
                if (isNaN(Number(null == s ? void 0 : s.value))) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币精度请输入一个数字1-10",
                  });
                  return;
                }
                if (isNaN(Number(null == n ? void 0 : n.value))) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币总数必须为数字",
                  });
                  return;
                }
                if (!t) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "请选择logo文件",
                  });
                  return;
                }
                let N = {
                    decimals: null == s ? void 0 : s.value,
                    supply: null == n ? void 0 : n.value,
                    tokenName: null == l ? void 0 : l.value,
                    symbol: null == o ? void 0 : o.value,
                    web: null == r ? void 0 : r.value,
                    tglink: null == c ? void 0 : c.value,
                    xlink: null == d ? void 0 : d.value,
                    dislink: null == u ? void 0 : u.value,
                    description: null == x ? void 0 : x.value,
                    tags: null == p ? void 0 : p.value,
                    image: "",
                  },
                  T = {
                    decimals: parseInt(N.decimals),
                    totalSupply: parseFloat(N.supply),
                  },
                  A = N.tags.split(","),
                  L = A.map((e) => e.trim());
                if ((console.log(L), t)) {
                  y(!0);
                  try {
                    let a = await getmyTokenUri(
                      t,
                      N.tokenName,
                      N.symbol,
                      N.description,
                      N.web,
                      N.tglink,
                      N.xlink,
                      L
                    );
                    if ((y(!1), "error" != a)) (e = a), console.log(a);
                    else {
                      notify({
                        type: "error",
                        message: "上传元数据失败,请尝试勾选自行上传",
                      });
                      return;
                    }
                  } catch (e) {
                    y(!1),
                      notify({
                        type: "error",
                        message: "上传元数据失败,请尝试勾选自行上传#",
                      });
                    return;
                  }
                } else {
                  notify({ type: "error", message: "未选择logo文件" });
                  return;
                }
                try {
                  let t = Y.Keypair.generate();
                  console.log("生成的token地址: " + t.publicKey.toString()),
                    console.log(P);
                  let l = await createMintTokenTransactionproc(
                    a,
                    i.publicKey,
                    t,
                    T.decimals,
                    T.totalSupply,
                    e,
                    N.tokenName,
                    N.symbol,
                    S,
                    v,
                    P
                  );
                  y(!0);
                  try {
                    l.feePayer = i.publicKey;
                    let e = (await a.getLatestBlockhash()).blockhash;
                    (l.recentBlockhash = e), l.partialSign(t);
                    let n = await i.signTransaction(l),
                      s = n.serialize(),
                      o = await a.sendRawTransaction(s, { skipPreflight: !0 });
                    m(o),
                      g(t.publicKey.toString()),
                      notify({
                        type: "success",
                        message: "成功",
                        description: "交易已发送",
                      });
                    let r = {
                      addrTag: "token",
                      addrName: f("create.param.addr"),
                      addr1: t.publicKey.toString(),
                      hxName: "交易哈希:",
                      hxAddr: o,
                    };
                    j(r), b(!0), console.log("交易完成: ", o);
                  } catch (e) {
                    notify({
                      type: "success",
                      message: "错误",
                      description: "交易失败",
                    });
                  } finally {
                    y(!1);
                  }
                } catch (e) {
                  console.error("交易失败: ", e);
                }
              } else {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未链接...",
                }),
                  console.log("error", "wallet not connect!");
                return;
              }
            }, [notify, n, t]);
          return (0, V.jsxs)("div", {
            className: "flex justify-center items-center",
            children: [
              (0, V.jsxs)("div", {
                children: [
                  (0, V.jsxs)("div", {
                    className: "mt-4 flex  items-center  space-x-1 text-left",
                    style: { color: "black" },
                    children: [
                      f("create.param.addr"),
                      " ",
                      x || f("create.param.addrnot"),
                      " ",
                    ],
                  }),
                  (0, V.jsx)("button", {
                    className:
                      "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                    onClick: k,
                    style: {
                      background: "#ff9815",
                      border: "none",
                      borderRadius: "5px 5px 5px 5px",
                      boxShadow: "0 4px 0 0 #db7a00",
                      padding: "10px 50px",
                      color: "#fff",
                    },
                    children: (0, V.jsxs)("span", {
                      children: [f("create.param.enter"), " "],
                    }),
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: f("msgbox.fbtn") }),
                onClick: () => b(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: h,
                msgParam: w,
                handleCancel: () => {
                  b(!1);
                },
              }),
              p && (0, V.jsx)(components_Loading, {}),
            ],
          });
        },
        CreateView = (e) => {
          let {} = e;
          (0, Q.O)();
          let { connection: t } = (0, U.R)(),
            { t: a } = (0, G.$G)("common"),
            [l, n] = (0, z.useState)(!0),
            s =
              "flex-col md:max-w-2xl md:flex-row items-center space-x-3 md:w-[600px]",
            o = "md:w-1/3 md:text-1xl text-left text-stone-200 mr-2",
            r =
              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 w-80",
            i =
              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 w-full h-[150px]",
            [c, d] = (0, z.useState)(null);
          return (0, V.jsx)("div", {
            className: "md:hero mx-auto p-1 ",
            style: { width: "60%" },
            children: (0, V.jsx)("div", {
              children: (0, V.jsxs)("div", {
                className: "md:hero-content flex flex-col",
                style: { display: "block" },
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-1",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4 ",
                      style: { color: "black" },
                      children: a("create.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    style: { margin: "0 auto", height: "90px" },
                    children: [
                      (0, V.jsxs)("div", {
                        className: s,
                        style: { float: "left", width: "50%" },
                        children: [
                          (0, V.jsx)("div", {
                            className: o,
                            style: {
                              color: "black",
                              padding: "0px 0px 0 20px",
                              width: "100%",
                            },
                            children: a("create.tokenname"),
                          }),
                          (0, V.jsx)("div", {
                            className: "md:w-2/3 m-auto",
                            children: (0, V.jsx)("input", {
                              id: "tokenname",
                              className: r,
                              placeholder: a("create.tokennamets"),
                              style: { background: "#fff", color: "black" },
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsxs)("div", {
                        className: s,
                        style: { float: "left", width: "50%" },
                        children: [
                          (0, V.jsx)("div", {
                            className: o,
                            style: {
                              color: "black",
                              padding: "0px 0px 0 20px",
                              width: "100%",
                            },
                            children: a("create.symbol"),
                          }),
                          (0, V.jsx)("div", {
                            className: "md:w-2/3 m-auto",
                            children: (0, V.jsx)("input", {
                              id: "tokenSymbol",
                              className: r,
                              placeholder: a("create.symbolts"),
                              style: { background: "#fff", color: "black" },
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    style: { margin: "0 auto", height: "200px" },
                    children: [
                      (0, V.jsxs)("div", {
                        style: { height: "200px", float: "left", width: "50%" },
                        children: [
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.dec"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                children: (0, V.jsx)("input", {
                                  id: "tokendec",
                                  className: r,
                                  placeholder: "6",
                                  defaultValue: "6",
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.amount"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                children: (0, V.jsx)("input", {
                                  id: "tokencount",
                                  className: r,
                                  placeholder: "1",
                                  defaultValue: "1",
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                      (0, V.jsx)("div", {
                        style: { height: "200px", float: "left", width: "45%" },
                        children: (0, V.jsxs)("div", {
                          className: "flex flex-col   space-x-3 md:w-[600px]",
                          style: { width: "50%" },
                          children: [
                            (0, V.jsx)("div", {
                              className: "".concat(o, " pr-1"),
                              style: {
                                color: "black",
                                padding: "0px 0px 0px 20px",
                              },
                              children: a("create.logo"),
                            }),
                            (0, V.jsxs)("div", {
                              className: "m-auto  w-[350px]",
                              style: {
                                border: "2px solid #5252529f",
                                borderRadius: "18px",
                                height: "140px",
                              },
                              children: [
                                (0, V.jsxs)("div", {
                                  className: "m-auto w-[350px]",
                                  style: { marginLeft: "10px" },
                                  children: [
                                    (0, V.jsx)("svg", {
                                      className: " h-12 w-12 text-gray-400",
                                      stroke: "currentColor",
                                      fill: "none",
                                      viewBox: "0 0 48 48",
                                      "aria-hidden": "true",
                                      children: (0, V.jsx)("path", {
                                        d: "M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02",
                                      }),
                                    }),
                                    (0, V.jsxs)("label", {
                                      className:
                                        "cursor-pointer font-medium text-purple-500 hover:text-indigo-500",
                                      children: [
                                        (0, V.jsx)("span", {
                                          style: { color: "black" },
                                          children: a("create.logosel"),
                                        }),
                                        (0, V.jsx)("input", {
                                          type: "file",
                                          id: "fileInput",
                                          onChange: (e) => {
                                            d(e.target.files[0]);
                                          },
                                          className: "sr-only",
                                          required: !0,
                                        }),
                                        (0, V.jsxs)("p", {
                                          className:
                                            "text-1x1 md:text-1xl  text-slate-100 my-2",
                                          id: "filename",
                                          style: { color: "black" },
                                          children: [
                                            c &&
                                              (0, V.jsxs)("p", {
                                                style: {
                                                  color: "black",
                                                  fontSize: "12px",
                                                },
                                                children: [
                                                  a("create.logoselts"),
                                                  c.name,
                                                ],
                                              }),
                                            " ",
                                          ],
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                                (0, V.jsx)("p", {
                                  className:
                                    "text-center text-slate-300 my-2 text-sm",
                                  style: {
                                    color: "black",
                                    width: "205px",
                                    marginLeft: "10px",
                                  },
                                  children: a("create.logojy"),
                                }),
                              ],
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    children: [
                      (0, V.jsxs)("div", {
                        style: { margin: "0 auto", height: "90px" },
                        children: [
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { float: "left", width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.web"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                children: (0, V.jsx)("input", {
                                  id: "userweb",
                                  className: r + " text-sm",
                                  placeholder: a("create.webts"),
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { float: "left", width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.tg"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                children: (0, V.jsx)("input", {
                                  id: "tglink",
                                  className: r + " text-sm",
                                  placeholder: a("create.tgts"),
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                      (0, V.jsxs)("div", {
                        style: { margin: "0 auto", height: "90px" },
                        children: [
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { float: "left", width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.x"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                children: (0, V.jsx)("input", {
                                  id: "xlink",
                                  className: r + " text-sm",
                                  placeholder: a("create.xts"),
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { float: "left", width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.dis"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                children: (0, V.jsx)("input", {
                                  id: "dislink",
                                  className: r + " text-sm",
                                  placeholder: a("create.dists"),
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                      (0, V.jsxs)("div", {
                        style: { margin: "0 auto", height: "90px" },
                        children: [
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { float: "left", width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.des"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                style: { width: "90%" },
                                children: (0, V.jsx)("textarea", {
                                  id: "des",
                                  className: i,
                                  placeholder: a("create.dests"),
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className: s,
                            style: { float: "left", width: "50%" },
                            children: [
                              (0, V.jsx)("div", {
                                className: o,
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("create.tags"),
                              }),
                              (0, V.jsx)("div", {
                                className: "md:w-2/3 m-auto",
                                style: { width: "90%" },
                                children: (0, V.jsx)("textarea", {
                                  id: "tags",
                                  className: i,
                                  placeholder: "Meme,NFT,DIFI",
                                  defaultValue: "Meme,NFT,DIFI",
                                  style: { background: "#fff", color: "black" },
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex justify-between md:flex-row items-center space-x-3 md:w-[600px]",
                    style: { width: "100%" },
                    children: [
                      (0, V.jsxs)("div", {
                        style: {
                          width: "33%",
                          float: "left",
                          height: "200px",
                          background: "#f6f6f6",
                          borderRadius: "5px",
                          paddingLeft: "16px",
                          paddingRight: "16px",
                        },
                        children: [
                          (0, V.jsx)("div", {
                            className: "form-control",
                            style: { borderBottom: "1px solid #00000014" },
                            children: (0, V.jsxs)("label", {
                              className: "label cursor-pointer",
                              children: [
                                (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: {
                                    color: "black",
                                    padding: "0px 0px 0 20px",
                                    width: "100%",
                                  },
                                  children: a("auth.freeys"),
                                }),
                                (0, V.jsx)("input", {
                                  type: "checkbox",
                                  id: "freeys",
                                  className: "toggle_ny",
                                  defaultChecked: !1,
                                }),
                              ],
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsx)("label", {
                              className: "label cursor-pointer",
                              children: (0, V.jsx)("span", {
                                className: "label-text",
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("auth.q1"),
                              }),
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsxs)("div", {
                        style: {
                          width: "33%",
                          float: "left",
                          height: "200px",
                          background: "#f6f6f6",
                          borderRadius: "5px",
                          paddingLeft: "16px",
                          paddingRight: "16px",
                        },
                        children: [
                          (0, V.jsx)("div", {
                            className: "form-control",
                            style: { borderBottom: "1px solid #00000014" },
                            children: (0, V.jsxs)("label", {
                              className: "label cursor-pointer",
                              children: [
                                (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: {
                                    color: "black",
                                    padding: "0px 0px 0 20px",
                                    width: "100%",
                                  },
                                  children: a("auth.mint"),
                                }),
                                (0, V.jsx)("input", {
                                  type: "checkbox",
                                  id: "freemint",
                                  className: "toggle_ny",
                                  defaultChecked: !1,
                                }),
                              ],
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsx)("label", {
                              className: "label cursor-pointer",
                              children: (0, V.jsx)("span", {
                                className: "label-text",
                                style: {
                                  color: "black",
                                  padding: "0px 0px 0 20px",
                                  width: "100%",
                                },
                                children: a("auth.q2"),
                              }),
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsxs)("div", {
                        style: {
                          width: "33%",
                          float: "left",
                          height: "200px",
                          background: "#f6f6f6",
                          borderRadius: "5px",
                          paddingLeft: "16px",
                          paddingRight: "16px",
                        },
                        children: [
                          (0, V.jsx)("div", {
                            className: "form-control",
                            style: { borderBottom: "1px solid #00000014" },
                            children: (0, V.jsxs)("label", {
                              className: "label cursor-pointer",
                              children: [
                                (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: {
                                    color: "black",
                                    padding: "0px 0px 0 20px",
                                    width: "100%",
                                  },
                                  children: a("auth.free"),
                                }),
                                (0, V.jsx)("input", {
                                  type: "checkbox",
                                  id: "freeacc",
                                  className: "toggle_ny",
                                  defaultChecked: !1,
                                }),
                              ],
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsx)("label", {
                              className: "label cursor-pointer",
                              children: (0, V.jsx)("span", {
                                className: "label-text",
                                style: { color: "black", width: "100%" },
                                children: a("auth.q3"),
                              }),
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsx)(CreateParam, { selectedFile: c }),
                ],
              }),
            }),
          });
        },
        AuthorityParam = () => {
          let { connection: e } = (0, U.R)(),
            {
              publicKey: t,
              sendTransaction: a,
              signMessage: l,
              signTransaction: n,
              signAllTransactions: s,
            } = (0, Q.O)(),
            { networkConfiguration: o } = (0, ep.lt)(),
            r = (0, ey.z)(),
            [i, c] = (0, z.useState)(null),
            [d, u] = (0, z.useState)(""),
            { t: m } = (0, G.$G)("common"),
            [x, g] = (0, z.useState)(!1),
            [p, y] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            }),
            f = (0, z.useCallback)(async () => {
              if (t) {
                let a = document.getElementById("tokenaddr"),
                  l = document.getElementById("freeMeta"),
                  n = document.getElementById("minttoken"),
                  s = document.getElementById("freeAccount"),
                  o = n.checked,
                  i = s.checked,
                  c = l.checked;
                if (o || i || c)
                  try {
                    let l = new Y.PublicKey(null == a ? void 0 : a.value),
                      n = await disableAuthority(e, l, t, o, i, c);
                    n.feePayer = r.publicKey;
                    let s = (await e.getLatestBlockhash()).blockhash;
                    n.recentBlockhash = s;
                    let d = await r.signTransaction(n),
                      m = d.serialize(),
                      x = await e.sendRawTransaction(m, { skipPreflight: !0 });
                    u(x),
                      y({
                        addrTag: "tx",
                        addrName: "提示:",
                        addr1: "可点击下方查看哈希上链情况",
                        hxName: "交易哈希:",
                        hxAddr: x,
                      }),
                      g(!0),
                      x
                        ? (notify({ type: "success", message: "完成.." }),
                          console.log(
                            "success",
                            "Succeed to revoke mint authority!"
                          ))
                        : console.log("warning", "Failed to revoke authority!");
                  } catch (e) {
                    console.log("warning", e);
                  }
                else notify({ type: "error", message: "请至少选择一样" });
                return;
              }
              notify({
                type: "error",
                message: "错误",
                description: "钱包未链接...",
              }),
                console.log("error", "wallet not connect!");
            }, [notify, a]);
          return (0, V.jsxs)("div", {
            children: [
              (0, V.jsx)("button", {
                className:
                  "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                onClick: f,
                style: {
                  background: "#ff9815",
                  border: "none",
                  borderRadius: "5px 5px 5px 5px",
                  boxShadow: "0 4px 0 0 #db7a00",
                  padding: "10px 50px",
                  color: "#fff",
                },
                children: (0, V.jsxs)("span", {
                  children: [m("auth.enter"), " "],
                }),
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsxs)("div", {
                  children: [" ", m("msgbox.fbtn")],
                }),
                onClick: () => g(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: x,
                msgParam: p,
                handleCancel: () => {
                  g(!1);
                },
              }),
            ],
          });
        };
      var eL = a(80633),
        eB = a(59361),
        eK = a(48764).Buffer;
      let AuthorityView = (e) => {
        let {} = e;
        (0, Q.O)();
        let { connection: t } = (0, U.R)(),
          { t: a } = (0, G.$G)("common"),
          [l, n] = (0, z.useState)(!1),
          [s, o] = (0, z.useState)(!1),
          [r, i] = (0, z.useState)(!1),
          [c, d] = (0, z.useState)(!1),
          handleCheck = async () => {
            if (!eL.ZLm) {
              notify({ type: "error", message: "钱包未连接" });
              return;
            }
            try {
              let e = document.getElementById("tokenaddr"),
                a = new Y.PublicKey(null == e ? void 0 : e.value),
                l = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
                [s] = await Y.PublicKey.findProgramAddressSync(
                  [
                    eK.from("metadata"),
                    new Y.PublicKey(l).toBuffer(),
                    a.toBuffer(),
                  ],
                  new Y.PublicKey(l)
                ),
                [r, c] = await t
                  .getMultipleAccountsInfo([a, s])
                  .catch((e) => [null, null]);
              if (!r) {
                console.log("Token not found");
                return;
              }
              if ((console.log("metadataAccountInfo:", c), c)) {
                let e = ec.Metadata.deserialize(c.data)[0];
                console.log("metadataInfo:", e),
                  e.updateAuthority.toBase58(),
                  e.isMutable ? o(!0) : o(!1);
              }
              let u = await (0, en.ih)(t, a);
              console.log(u.freezeAuthority),
                console.log(u.mintAuthority),
                u.freezeAuthority ? d(!0) : d(!1),
                u.mintAuthority ? i(!0) : i(!1),
                n(!0);
            } catch (e) {
              notify({ type: "error", message: "查询错误" });
              return;
            }
          };
        return (0, V.jsx)("div", {
          className: "md:hero mx-auto p-4",
          children: (0, V.jsxs)("div", {
            className: "md:hero-content flex flex-col",
            children: [
              (0, V.jsx)("div", {
                className: "mt-6",
                children: (0, V.jsx)("h1", {
                  className:
                    "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                  style: { color: "black" },
                  children: a("auth.t1"),
                }),
              }),
              (0, V.jsxs)("h2", {
                children: [
                  (0, V.jsxs)("div", {
                    className:
                      "flex mt-4 items-center  space-x-2 text-left md:w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-[200px] text-2x1 md:text-2xl text-center text-slate-300 my-2",
                        style: { color: "black" },
                        children: a("auth.addr"),
                      }),
                      (0, V.jsx)("div", {
                        className: "m-auto  w-[350px]",
                        children: (0, V.jsx)("input", {
                          id: "tokenaddr",
                          className:
                            "md:w-[400px] mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 my-2 text-sm",
                          placeholder: a("auth.addrts"),
                          style: { background: "#fff", color: "black" },
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex mt-4 items-center  space-x-2 text-left md:w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-[200px] text-2x1 md:text-2xl text-center text-slate-300 my-2",
                      }),
                      (0, V.jsx)("div", {
                        className: "m-auto  w-[350px]",
                        children: (0, V.jsx)("button", {
                          className:
                            "px-5 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                          onClick: handleCheck,
                          style: {
                            background: "#ff9815",
                            border: "none",
                            borderRadius: "5px 5px 5px 5px",
                            boxShadow: "0 4px 0 0 #db7a00",
                            padding: "10px 50px",
                            color: "#fff",
                            width: "156px",
                          },
                          children: (0, V.jsx)("span", {
                            children: a("auth.check"),
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className: "items-center md:w-[600px]",
                    style: { marginTop: "10px" },
                    children: (0, V.jsxs)("div", {
                      className:
                        "flex justify-between md:flex-row items-center space-x-3 md:w-[600px]",
                      style: { width: "100%" },
                      children: [
                        (0, V.jsxs)("div", {
                          style: {
                            width: "33%",
                            float: "left",
                            height: "200px",
                            background: "#f6f6f6",
                            borderRadius: "5px",
                            paddingRight: "16px",
                          },
                          children: [
                            (0, V.jsx)("div", {
                              className:
                                "mt-4 space-x-2 text-left md:w-[200px] flex justify-center",
                              children: (0, V.jsx)("div", {
                                className: "form-control",
                                children: (0, V.jsxs)("label", {
                                  className: "label cursor-pointer",
                                  children: [
                                    (0, V.jsx)("span", {
                                      className: "label-text text-slate-300",
                                      style: { color: "black" },
                                      children: a("auth.freeys"),
                                    }),
                                    (0, V.jsx)("input", {
                                      type: "checkbox",
                                      id: "freeMeta",
                                      className: "toggle_ny",
                                      defaultChecked: !1,
                                      disabled: !s,
                                    }),
                                    l
                                      ? s
                                        ? (0, V.jsx)(eB.Z, {
                                            color: "#f50",
                                            children: a("auth.not"),
                                          })
                                        : (0, V.jsx)(eB.Z, {
                                            color: "#87d068",
                                            children: a("auth.yes"),
                                          })
                                      : "",
                                  ],
                                }),
                              }),
                            }),
                            (0, V.jsx)("div", {
                              className: "form-control",
                              children: (0, V.jsx)("label", {
                                className: "label cursor-pointer",
                                children: (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: {
                                    color: "black",
                                    padding: "0px 0px 0 20px",
                                    width: "100%",
                                  },
                                  children: a("auth.q1"),
                                }),
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          style: {
                            width: "33%",
                            float: "left",
                            height: "200px",
                            background: "#f6f6f6",
                            borderRadius: "5px",
                            paddingRight: "16px",
                          },
                          children: [
                            (0, V.jsx)("div", {
                              className:
                                "mt-4 space-x-2 text-left md:w-[200px] flex justify-center",
                              children: (0, V.jsx)("div", {
                                className: "form-control",
                                children: (0, V.jsxs)("label", {
                                  className: "label cursor-pointer",
                                  children: [
                                    (0, V.jsx)("span", {
                                      className: "label-text text-slate-300",
                                      style: { color: "black" },
                                      children: a("auth.mint"),
                                    }),
                                    (0, V.jsx)("input", {
                                      type: "checkbox",
                                      id: "minttoken",
                                      className: "toggle_ny",
                                      defaultChecked: !1,
                                      disabled: !r,
                                    }),
                                    l
                                      ? r
                                        ? (0, V.jsx)(eB.Z, {
                                            color: "#f50",
                                            children: a("auth.not"),
                                          })
                                        : (0, V.jsx)(eB.Z, {
                                            color: "#87d068",
                                            children: a("auth.yes"),
                                          })
                                      : "",
                                  ],
                                }),
                              }),
                            }),
                            (0, V.jsx)("div", {
                              className: "form-control",
                              children: (0, V.jsx)("label", {
                                className: "label cursor-pointer",
                                children: (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: {
                                    color: "black",
                                    padding: "0px 0px 0 20px",
                                    width: "100%",
                                  },
                                  children: a("auth.q2"),
                                }),
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          style: {
                            width: "33%",
                            float: "left",
                            height: "200px",
                            background: "#f6f6f6",
                            borderRadius: "5px",
                            paddingRight: "16px",
                          },
                          children: [
                            (0, V.jsx)("div", {
                              className:
                                "mt-4 space-x-2 text-left md:w-[200px] flex justify-center",
                              children: (0, V.jsx)("div", {
                                className: "form-control",
                                children: (0, V.jsxs)("label", {
                                  className: "label cursor-pointer",
                                  children: [
                                    (0, V.jsx)("span", {
                                      className: "label-text text-slate-300",
                                      style: { color: "black" },
                                      children: a("auth.free"),
                                    }),
                                    (0, V.jsx)("input", {
                                      type: "checkbox",
                                      id: "freeAccount",
                                      className: "toggle_ny",
                                      defaultChecked: !1,
                                      disabled: !c,
                                    }),
                                    l
                                      ? c
                                        ? (0, V.jsx)(eB.Z, {
                                            color: "#f50",
                                            children: a("auth.not"),
                                          })
                                        : (0, V.jsx)(eB.Z, {
                                            color: "#87d068",
                                            children: a("auth.yes"),
                                          })
                                      : "",
                                  ],
                                }),
                              }),
                            }),
                            (0, V.jsx)("div", {
                              className: "form-control",
                              children: (0, V.jsx)("label", {
                                className: "label cursor-pointer",
                                children: (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: { color: "black", width: "100%" },
                                  children: a("auth.q3"),
                                }),
                              }),
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, V.jsx)("div", {
                className: "flex flex-col mt-2",
                children: (0, V.jsx)(AuthorityParam, {}),
              }),
            ],
          }),
        });
      };
      var eM = a(83510),
        eC = a(82729),
        e_ = a(83300),
        eR = a.n(e_),
        eO = a(80108);
      function _templateObject() {
        let e = (0, eC._)([
          "\n    query MyQuery($where: Raydium_LiquidityPoolv4_bool_exp) {\n      Raydium_LiquidityPoolv4(\n        where: $where\n      ) {  \n        _updatedAt\n    amountWaveRatio\n    baseDecimal\n    baseLotSize\n    baseMint\n    baseNeedTakePnl\n    baseTotalPnl\n    baseVault\n    depth\n    lpMint\n    lpReserve\n    lpVault\n    marketId\n    marketProgramId\n    maxOrder\n    maxPriceMultiplier\n    minPriceMultiplier\n    minSeparateDenominator\n    minSeparateNumerator\n    minSize\n    nonce\n    openOrders\n    orderbookToInitTime\n    owner\n    pnlDenominator\n    pnlNumerator\n    poolOpenTime\n    punishCoinAmount\n    punishPcAmount\n    quoteDecimal\n    quoteLotSize\n    quoteMint\n    quoteNeedTakePnl\n    quoteTotalPnl\n    quoteVault\n    resetFlag\n    state\n    status\n    swapBase2QuoteFee\n    swapBaseInAmount\n    swapBaseOutAmount\n    swapFeeDenominator\n    swapFeeNumerator\n    swapQuote2BaseFee\n    swapQuoteInAmount\n    swapQuoteOutAmount\n    systemDecimalValue\n    targetOrders\n    tradeFeeDenominator\n    tradeFeeNumerator\n    volMaxCutRatio\n    withdrawQueue\n    pubkey    \n      }\n      }",
        ]);
        return (
          (_templateObject = function () {
            return e;
          }),
          e
        );
      }
      function _templateObject1() {
        let e = (0, eC._)([
          "\n      query MyQuery ($where: Raydium_LiquidityPoolv4_bool_exp) {\n    Raydium_LiquidityPoolv4(\n      where: $where\n    ) {\n      baseMint\n      lpMint\n      lpReserve\n    }\n  }",
        ]);
        return (
          (_templateObject1 = function () {
            return e;
          }),
          e
        );
      }
      let gettoken_getTokenAccounts = async (e) => {
          let t = await eR()(
              "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35",
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  jsonrpc: "2.0",
                  method: "getTokenAccounts",
                  id: "1",
                  params: {
                    page: 1,
                    limit: 100,
                    displayOptions: { showZeroBalance: !1 },
                    owner: e,
                  },
                }),
              }
            ),
            a = await t.json();
          if (!a.result) {
            console.error("No result in the response", a);
            return;
          }
          return a;
        },
        gettoken_getMetadata = async (e) => {
          let t = await eR()(
              "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35",
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  mintAccounts: e,
                  includeOffChain: !0,
                  disableCache: !1,
                }),
              }
            ),
            a = await t.json();
          return a;
        },
        truncateString = (e, t, a, l) => {
          if (e.length <= t) return e;
          {
            let t = e.substring(0, a),
              n = e.substring(e.length - l);
            return t + "............" + n;
          }
        };
      async function getImageJson(e) {
        try {
          let t = await eR()(e);
          if (!t.ok) throw Error("Network response was not ok");
          let a = await t.json();
          return a;
        } catch (t) {
          return console.error("Error fetching JSON:", t), e;
        }
      }
      let getTokenListByShyft = async (e) => {
          var t = new Headers();
          t.append("x-api-key", "-xyhHbkRL6Q-VUqZ");
          let a = await eR()(
              "https://api.shyft.to/sol/v1/wallet/all_tokens?network=mainnet-beta&wallet=".concat(
                e
              ),
              { method: "GET", headers: t, redirect: "follow" }
            ),
            l = await a.json();
          if (!l.result) {
            console.error("No result in the response", l);
            return;
          }
          return console.log(JSON.stringify(l.result, null, 2)), l;
        },
        eZ = new eO.g6(
          "https://programs.shyft.to/v0/graphql/?api_key=-xyhHbkRL6Q-VUqZ",
          {
            method: "POST",
            jsonSerializer: { parse: JSON.parse, stringify: JSON.stringify },
          }
        );
      async function queryLpPair(e, t) {
        let a = (0, eO.Ps)(_templateObject());
        return await eZ.request(a, {
          where: { _or: [{ baseMint: { _eq: e } }, { quoteMint: { _eq: e } }] },
        });
      }
      async function queryLpMintInfo(e) {
        let t = (0, eO.Ps)(_templateObject1());
        return await eZ.request(t, { where: { pubkey: { _eq: e } } });
      }
      var eI = a(48764).Buffer;
      let { PublicKey: eE } = a(96737),
        deserializeMetadata = (e) => {
          try {
            return ec.Metadata.fromAccountInfo(e)[0];
          } catch (e) {
            console.log("Failed to deserialize on-chain metadata:", e);
          }
        };
      async function getTokenMetadataProc(e, t) {
        let a = eE.findProgramAddressSync(
            [
              eI.from("metadata", "utf8"),
              new eE("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").toBuffer(),
              new eE(t).toBuffer(),
            ],
            new eE("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")
          )[0],
          l = await e.getAccountInfo(a).catch((e) => null);
        if (l) return deserializeMetadata(l);
        let n = eE.findProgramAddressSync(
            [
              eI.from("metadata", "utf8"),
              new eE("META4s4fSmpkTbZoUsgC1oBnWB31vQcmnN8giPw51Zu").toBuffer(),
              new eE(t).toBuffer(),
            ],
            new eE("META4s4fSmpkTbZoUsgC1oBnWB31vQcmnN8giPw51Zu")
          )[0],
          s = await e.getAccountInfo(n).catch((e) => null);
        return s ? deserializeMetadata(s) : null;
      }
      let eF = {};
      async function loadImageAndCache(e) {
        if (eF[e]) return eF[e];
        try {
          let t = await fetch(e),
            a = await t.blob(),
            l = URL.createObjectURL(a);
          return (eF[e] = l), l;
        } catch (e) {
          throw (console.error("Error loading image:", e), e);
        }
      }
      var imageParam = (e) => {
        let { src: t, alt: a } = e,
          [l, n] = (0, z.useState)(null);
        return ((0, z.useEffect)(
          () => (
            loadImageAndCache(t)
              .then((e) => {
                n(e);
              })
              .catch((e) => {
                console.error("Failed to load image:", e);
              }),
            () => {
              l && eF[t] && (URL.revokeObjectURL(l), delete eF[t]);
            }
          ),
          [t]
        ),
        l)
          ? (0, V.jsx)("img", {
              src: l,
              alt: a,
              className: "w-full h-full object-cover",
            })
          : (0, V.jsx)("div", { children: " Loading... " });
      };
      let eq = [],
        BurnView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)([]),
            [g, p] = (0, z.useState)(0),
            [y, f] = (0, z.useState)(""),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            [j, k] = (0, z.useState)(null),
            handleEnterbtnclick = async () => {
              let e = document.getElementById("freeAccount"),
                n = document.getElementById("burnamount"),
                s = d.dec;
              s || (s = 9), console.log("tokendec:", s);
              let o = Number(null == n ? void 0 : n.value) * Math.pow(10, s);
              console.log(o);
              let r = e.checked;
              if (r) {
                let e = Math.floor(1e9 * Number(d.amount)),
                  n = await burntokensAndcloseacc(a, d.address, d.mint, l, e);
                (n.feePayer = t.publicKey),
                  (n.recentBlockhash = (
                    await a.getLatestBlockhash()
                  ).blockhash);
                let s = await t.signTransaction(n),
                  o = s.serialize(),
                  r = await a.sendRawTransaction(o, { skipPreflight: !0 });
                f(r),
                  r
                    ? (notify({ type: "success", message: "完成.." }),
                      console.log(
                        "success",
                        "Succeed to revoke mint authority!"
                      ))
                    : console.log(
                        "warning",
                        "Failed to revoke mint authority!"
                      );
              } else {
                console.log(d.address), console.log(d.mint);
                try {
                  let e = await burntokens(a, d.address, d.mint, l, o);
                  (e.feePayer = t.publicKey),
                    (e.recentBlockhash = (
                      await a.getLatestBlockhash()
                    ).blockhash);
                  let n = await t.signTransaction(e),
                    s = n.serialize(),
                    r = await a.sendRawTransaction(s, { skipPreflight: !0 });
                  f(r),
                    r
                      ? (notify({ type: "success", message: "完成.." }),
                        console.log(r),
                        console.log(
                          "success",
                          "Succeed to revoke mint authority!"
                        ))
                      : console.log(
                          "warning",
                          "Failed to revoke mint authority!"
                        );
                } catch (e) {
                  notify({ type: "error", message: "错误,交易失败" }),
                    console.log(e);
                }
              }
            };
          async function displaytokenList(e, t) {
            if (e) {
              x([]);
              for (let e = 0; e < eq.length; e++)
                if (eq[e].isToken) {
                  let t = eq[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: eq[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      eq[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", eq[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: eq[e].label,
                      amount: eq[e].amount,
                      address: eq[e].address,
                      dec: eq[e].dec,
                    };
                  x((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(eq[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", eq[e].amount],
                        }),
                      ],
                    }),
                    mint: eq[e].label,
                    amount: eq[e].amount,
                    address: eq[e].address,
                    dec: eq[e].dec,
                  };
                  x((e) => [...e, t]);
                }
            } else {
              x([]), console.log(eq);
              for (let e = 0; e < eq.length; e++)
                if (eq[e].isToken && eq[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [eq[e].symbol, " - ", eq[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", eq[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: eq[e].label,
                    address: eq[e].address,
                  };
                  x((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (l) {
              if (!i) {
                c(!0), x((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(l.toString());
                if (e.result) {
                  c(!0), (eq = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? eq.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : eq.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "md:hero mx-auto p-4",
            children: [
              (0, V.jsxs)("div", {
                className: "md:hero-content flex flex-col",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      style: { color: "black" },
                      children: w("burn.t1"),
                    }),
                  }),
                  (0, V.jsx)("div", {
                    className: "text-center mt-6",
                    children: (0, V.jsx)("div", {
                      children: (0, V.jsxs)("div", {
                        className: "md:w-[450px]",
                        children: [
                          (0, V.jsx)("div", {
                            className: "text-left",
                            children: (0, V.jsx)(eM.ZP, {
                              value: d,
                              onChange: (e) => {
                                u(e);
                              },
                              onFocus: handleFocus,
                              options: m,
                              isMulti: !1,
                              className: "text-black",
                            }),
                          }),
                          (0, V.jsx)("input", {
                            id: "burnamount",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-10 my-2",
                            placeholder: w("burn.burnamount"),
                            style: { background: "#fff", color: "black" },
                          }),
                          (0, V.jsxs)("label", {
                            htmlFor: "freeAccount",
                            className: "inline-flex items-center",
                            children: [
                              (0, V.jsx)("input", {
                                type: "checkbox",
                                id: "freeAccount",
                                className:
                                  "form-checkbox h-6 w-6 text-indigo-600 rounded-md ml-2 mt-1",
                              }),
                              (0, V.jsx)("span", {
                                className: "pointer-events:none ml-2",
                                style: { color: "black" },
                                children: w("burn.burnandfree"),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("button", {
                            className:
                              "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                            onClick: handleEnterbtnclick,
                            style: {
                              background: "#ff9815",
                              border: "none",
                              borderRadius: "5px 5px 5px 5px",
                              boxShadow: "0 4px 0 0 #db7a00",
                              padding: "10px 50px",
                              color: "#fff",
                            },
                            children: [w("burn.enter"), " "],
                          }),
                        ],
                      }),
                    }),
                  }),
                ],
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        },
        MoreView = (e) => {
          let {} = e;
          (0, Q.O)();
          let { connection: t } = (0, U.R)(),
            [a, l] = (0, z.useState)(null);
          return (0, V.jsx)("div", {
            className: "md:hero mx-auto p-4",
            children: (0, V.jsxs)("div", {
              className: "md:hero-content flex flex-col",
              children: [
                (0, V.jsx)("div", {
                  className: "mt-6",
                  children: (0, V.jsx)("h1", {
                    className:
                      "text-center text-5xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                    children: "更多工具",
                  }),
                }),
                (0, V.jsxs)("h2", {
                  children: [
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "OpenBook创建市场ID",
                        }),
                        (0, V.jsx)(H(), {
                          href: "http://openbook.jlbcode.com/market/create",
                          target: "_blank",
                          rel: "noopener noreferrer",
                          passHref: !0,
                          className: "text-secondary hover:text-white",
                          children: (0, V.jsx)("div", {
                            className: "flex flex-row ml-1",
                            children: (0, V.jsx)("button", {
                              className:
                                "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                              children: "立即前往",
                            }),
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "Cointool创建市场ID",
                        }),
                        (0, V.jsx)(H(), {
                          href: "https://cointool.app/sol/openbook-market",
                          target: "_blank",
                          rel: "noopener noreferrer",
                          passHref: !0,
                          className: "text-secondary hover:text-white",
                          children: (0, V.jsx)("div", {
                            className: "flex flex-row ml-1",
                            children: (0, V.jsx)("button", {
                              className:
                                "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                              children: "立即前往",
                            }),
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "Cointool流动性池管理",
                        }),
                        (0, V.jsx)(H(), {
                          href: "https://cointool.app/sol/liquidity",
                          target: "_blank",
                          rel: "noopener noreferrer",
                          passHref: !0,
                          className: "text-secondary hover:text-white",
                          children: (0, V.jsx)("div", {
                            className: "flex flex-row ml-1",
                            children: (0, V.jsx)("button", {
                              className:
                                "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                              children: "立即前往",
                            }),
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)("div", {
                      className:
                        "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                      children: [
                        (0, V.jsx)("div", {
                          className:
                            "md:w-full text-2x1 md:text-2xl text-center text-slate-300 my-2",
                          children: "批量转账",
                        }),
                        (0, V.jsx)(H(), {
                          href: "https://cointool.app/multiSender/sol",
                          target: "_blank",
                          rel: "noopener noreferrer",
                          passHref: !0,
                          className: "text-secondary hover:text-white",
                          children: (0, V.jsx)("div", {
                            className: "flex flex-row ml-1",
                            children: (0, V.jsx)("button", {
                              className:
                                "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                              children: "立即前往",
                            }),
                          }),
                        }),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          });
        },
        UpdataParam = (e) => {
          let { useaddr: t } = e,
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            { networkConfiguration: i } = (0, ep.lt)();
          (0, z.useMemo)(() => (0, Y.clusterApiUrl)(i), [i]);
          let c = (0, ey.z)(),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(""),
            [g, p] = (0, z.useState)(null),
            [y, f] = (0, z.useState)(null),
            { t: h } = (0, G.$G)("common"),
            [b, w] = (0, z.useState)(!1),
            j =
              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 md:w-[600px]",
            k = "md:w-1/3 md:text-1xl text-right text-stone-200 mr-2",
            S =
              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 w-80",
            v =
              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 w-full h-[150px]",
            P = (0, z.useCallback)(async () => {
              if (l) {
                let e = document.getElementById("tokenname"),
                  n = document.getElementById("tokenSymbol"),
                  s = document.getElementById("userweb"),
                  o = document.getElementById("tglink"),
                  r = document.getElementById("xlink"),
                  i = document.getElementById("dislink"),
                  d = document.getElementById("des"),
                  u = document.getElementById("tags");
                if ((null == e ? void 0 : e.value) == "") {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称不能为空",
                  });
                  return;
                }
                if ((null == e ? void 0 : e.value.length) > 35) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称长度不能大于30",
                  });
                  return;
                }
                if ((null == n ? void 0 : n.value) == "") {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币名称不能为空",
                  });
                  return;
                }
                if ((null == n ? void 0 : n.value.length) > 8) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "代币简称长度不能大于8",
                  });
                  return;
                }
                if (!y) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "请选择logo文件",
                  });
                  return;
                }
                let m = {
                  tokenName: null == e ? void 0 : e.value,
                  symbol: null == n ? void 0 : n.value,
                  web: null == s ? void 0 : s.value,
                  tglink: null == o ? void 0 : o.value,
                  xlink: null == r ? void 0 : r.value,
                  dislink: null == i ? void 0 : i.value,
                  description: null == d ? void 0 : d.value,
                  tags: null == u ? void 0 : u.value,
                  image: "",
                };
                if (y) {
                  let e;
                  let n = m.tags.split(","),
                    s = n.map((e) => e.trim());
                  w(!0);
                  try {
                    let t = await getmyTokenUri(
                      y,
                      m.tokenName,
                      m.symbol,
                      m.description,
                      m.web,
                      m.tglink,
                      m.xlink,
                      s
                    );
                    if ((w(!1), "error" != t)) (e = t), console.log(e);
                    else {
                      notify({
                        type: "error",
                        message: "上传元数据失败,请尝试勾选自行上传",
                      });
                      return;
                    }
                  } catch (e) {
                    w(!1),
                      notify({
                        type: "error",
                        message: "上传元数据失败,请尝试勾选自行上传#",
                      });
                    return;
                  }
                  try {
                    let n = new Y.PublicKey(t),
                      s = await createUpdateMetadataIx(
                        n,
                        m.tokenName,
                        m.symbol,
                        e,
                        l
                      );
                    (s.feePayer = c.publicKey),
                      (s.recentBlockhash = (
                        await a.getLatestBlockhash()
                      ).blockhash);
                    let o = await c.signTransaction(s),
                      r = o.serialize(),
                      i = await a.sendRawTransaction(r, { skipPreflight: !0 });
                    x(i),
                      console.log("交易完成: ", i),
                      notify({
                        type: "success",
                        message: "交易已发送",
                        description: "哈希: " + i,
                      });
                  } catch (e) {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "交易失败",
                    });
                  }
                } else notify({ type: "error", message: "请选择logo文件" });
                return;
              }
              notify({
                type: "error",
                message: "错误",
                description: "钱包未链接...",
              }),
                console.log("error", "wallet not connect!");
            }, [notify, n, t, y]);
          return (0, V.jsxs)("div", {
            className: "flex  items-center text-left md:w-[600px]",
            children: [
              (0, V.jsxs)("div", {
                className: "space-y-5",
                children: [
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.tokenname"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("input", {
                          id: "tokenname",
                          className: S,
                          placeholder: h("create.tokennamets"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.symbol"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("input", {
                          id: "tokenSymbol",
                          className: S,
                          placeholder: h("create.symbolts"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 md:w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className: "".concat(k, " pr-1"),
                        children: h("create.logo"),
                      }),
                      (0, V.jsxs)("div", {
                        className: "md:w-2/3 m-auto",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "m-auto w-[350px] px-2 text-center",
                            children: [
                              (0, V.jsx)("svg", {
                                className: "mx-auto h-12 w-12 text-gray-400",
                                stroke: "currentColor",
                                fill: "none",
                                viewBox: "0 0 48 48",
                                "aria-hidden": "true",
                                children: (0, V.jsx)("path", {
                                  d: "M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02",
                                }),
                              }),
                              (0, V.jsxs)("label", {
                                className:
                                  "cursor-pointer font-medium text-purple-500 hover:text-indigo-500",
                                children: [
                                  (0, V.jsx)("span", {
                                    children: h("create.logosel"),
                                  }),
                                  (0, V.jsx)("input", {
                                    type: "file",
                                    id: "fileInput",
                                    onChange: (e) => {
                                      f(e.target.files[0]);
                                    },
                                    className: "sr-only",
                                    required: !0,
                                  }),
                                  (0, V.jsxs)("p", {
                                    className:
                                      "md:w-full text-1x1 md:text-1xl text-center text-slate-100 my-2",
                                    id: "filename",
                                    children: [
                                      y &&
                                        (0, V.jsxs)("p", {
                                          children: [
                                            h("create.logoselts"),
                                            y.name,
                                          ],
                                        }),
                                      " ",
                                    ],
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("p", {
                            className:
                              "md:w-full text-xs text-center text-slate-300 my-2",
                            children: h("create.logojy"),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.web"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("input", {
                          id: "userweb",
                          className: S + " text-sm",
                          placeholder: h("create.webts"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.tg"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("input", {
                          id: "tglink",
                          className: S + " text-sm",
                          placeholder: h("create.tgts"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.x"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("input", {
                          id: "xlink",
                          className: S + " text-sm",
                          placeholder: h("create.xts"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.dis"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("input", {
                          id: "dislink",
                          className: S + " text-sm",
                          placeholder: h("create.dists"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.des"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("textarea", {
                          id: "des",
                          className: v,
                          placeholder: h("create.dests"),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className: j,
                    children: [
                      (0, V.jsx)("div", {
                        className: k,
                        children: h("create.tags"),
                      }),
                      (0, V.jsx)("div", {
                        className: "md:w-2/3 m-auto",
                        children: (0, V.jsx)("textarea", {
                          id: "tags",
                          className: v,
                          placeholder: "Meme,NFT,DIFI",
                          defaultValue: "Meme,NFT,DIFI",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsx)("button", {
                    className:
                      "md:w-full px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black ",
                    onClick: P,
                    children: (0, V.jsxs)("span", {
                      children: [h("updata.enter"), " "],
                    }),
                  }),
                ],
              }),
              b && (0, V.jsx)(components_Loading, {}),
            ],
          });
        },
        UpdataView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            [l, n] = (0, z.useState)(null),
            [s, o] = (0, z.useState)(!1),
            [r, i] = (0, z.useState)(!1),
            { publicKey: c } = (0, Q.O)(),
            [d, u] = (0, z.useState)(!1),
            { t: m } = (0, G.$G)("common"),
            handlecheck = async () => {
              if (c) {
                let e = document.getElementById("tokenaddr"),
                  a = null == e ? void 0 : e.value;
                u(!0);
                let l = await gettoken_getMetadata([a]);
                if (l) {
                  u(!1);
                  let e = l[0].onChainMetadata.metadata;
                  e
                    ? (console.log(e.updateAuthority),
                      console.log(t.publicKey.toString()),
                      e.updateAuthority === t.publicKey.toString()
                        ? (o(!0), i(!0), n(a))
                        : (o(!0), i(!1), n("")))
                    : notify({ type: "error", message: "无效地址" });
                } else notify({ type: "error", message: "获取Json错误" });
              } else
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先连接钱包!",
                });
            };
          return (0, V.jsxs)("div", {
            className: "md:hero mx-auto p-2",
            children: [
              (0, V.jsxs)("div", {
                className: "md:hero-content flex flex-col",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500",
                      style: { color: "black" },
                      children: m("updata.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    children: [
                      (0, V.jsxs)("div", {
                        className:
                          "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                        children: [
                          (0, V.jsx)("div", {
                            className:
                              "md:w-[200px] md:text-1xl text-center text-slate-300 my-2",
                            style: { color: "black" },
                            children: m("updata.addr"),
                          }),
                          (0, V.jsx)("div", {
                            className: "m-auto  w-[350px]",
                            children: (0, V.jsx)("input", {
                              id: "tokenaddr",
                              className:
                                "md:w-[400px] mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2",
                              placeholder: m("updata.addrts"),
                              style: { background: "#fff", color: "black" },
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsx)("div", {
                        className: "flex justify-center items-center",
                        children: (0, V.jsx)("button", {
                          className:
                            "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                          onClick: handlecheck,
                          style: {
                            background: "#ff9815",
                            border: "none",
                            borderRadius: "5px 5px 5px 5px",
                            boxShadow: "0 4px 0 0 #db7a00",
                            padding: "10px 50px",
                            color: "#fff",
                            width: "156px",
                          },
                          children: (0, V.jsxs)("span", {
                            children: [m("updata.check"), " "],
                          }),
                        }),
                      }),
                      s &&
                        (0, V.jsxs)("div", {
                          className:
                            "mt-4 flex  items-center  space-x-2 text-left md:w-[600px]",
                          children: [
                            (0, V.jsx)("div", {
                              className:
                                "md:w-[200px] md:text-1xl text-center text-slate-300 my-2",
                              style: { color: "black" },
                              children: m("updata.auth"),
                            }),
                            r
                              ? (0, V.jsx)("div", {
                                  children: (0, V.jsx)("span", {
                                    className:
                                      "md:w-[200px] md:text-1xl text-center text-slate-300 my-2",
                                    style: { color: "black" },
                                    children: m("updata.authyes"),
                                  }),
                                })
                              : (0, V.jsx)("span", {
                                  className:
                                    "md:w-[200px] md:text-1xl text-center text-slate-300 my-2",
                                  style: { color: "black" },
                                  children: m("updata.authnot"),
                                }),
                          ],
                        }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className: "scroll-pr-1",
                    children: r && (0, V.jsx)(UpdataParam, { useaddr: l }),
                  }),
                ],
              }),
              d && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var eD = a(56362),
        eV = a(83613),
        ez = a(21236);
      let eW = [],
        eH = [],
        MultiSenderView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: n,
              sendTransaction: s,
              signMessage: o,
              signTransaction: r,
              signAllTransactions: i,
            } = (0, Q.O)(),
            [c, d] = (0, z.useState)(!1),
            [u, m] = (0, z.useState)(null),
            [x, g] = (0, z.useState)([]),
            [p, y] = (0, z.useState)(0),
            [f, h] = (0, z.useState)(""),
            [b, w] = (0, z.useState)(!1),
            [j, k] = (0, z.useState)(!1),
            [S, v] = (0, z.useState)(0),
            [P, N] = (0, z.useState)(0),
            { t: T } = (0, G.$G)("common"),
            [A, L] = (0, z.useState)(!1),
            [B, K] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            }),
            getSolBalance = async () => {
              try {
                return (
                  (await a.getBalance(n, "confirmed")) / Y.LAMPORTS_PER_SOL
                );
              } catch (e) {
                return console.log("error getting balance: ", e), 0;
              }
            },
            handleEnterbtnclick = async () => {
              if (n) {
                if (j) {
                  let e = Number("0.1");
                  if ("SOL" === u.mint) {
                    console.log("sol");
                    let l = await getSolBalance();
                    if (l > P) {
                      let l = new Y.Transaction(),
                        s = new Y.PublicKey(
                          "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                        );
                      l.add(
                        Y.SystemProgram.transfer({
                          fromPubkey: n,
                          toPubkey: s,
                          lamports: e * Y.LAMPORTS_PER_SOL,
                        })
                      ),
                        (l = setPublicGasfee(l));
                      for (let e = 0; e < eH.length; e++) {
                        let t = new Y.PublicKey(eH[e].addr),
                          a = eH[e].amount;
                        l.add(
                          Y.SystemProgram.transfer({
                            fromPubkey: n,
                            toPubkey: t,
                            lamports: a * Y.LAMPORTS_PER_SOL,
                          })
                        );
                      }
                      w(!0);
                      try {
                        l.feePayer = t.publicKey;
                        let e = (await a.getLatestBlockhash()).blockhash;
                        l.recentBlockhash = e;
                        let n = await t.signTransaction(l),
                          s = n.serialize(),
                          o = await a.sendRawTransaction(s, {
                            skipPreflight: !0,
                          });
                        K({
                          addrTag: "account",
                          addrName: "提示",
                          addr1: "可点击下方查看哈希上链情况",
                          hxName: "交易哈希:",
                          hxAddr: o,
                        }),
                          L(!0),
                          h(o),
                          notify({
                            type: "success",
                            message: "成功",
                            description: "交易已发送",
                          }),
                          console.log("交易完成: ", o);
                      } catch (e) {
                        notify({
                          type: "success",
                          message: "错误",
                          description: "交易失败",
                        });
                      } finally {
                        w(!1);
                      }
                    } else {
                      notify({
                        type: "error",
                        message: "失败",
                        description: "SOL余额不足以支付转账",
                      });
                      return;
                    }
                  } else {
                    console.log("token");
                    let l = u.dec;
                    l || (l = 9), console.log("tokendec:", l);
                    let s = await getSolBalance();
                    if (s < 0.01) {
                      notify({
                        type: "error",
                        message: "失败",
                        description: "SOL余额不足以支付转账费,请补充",
                      });
                      return;
                    }
                    if (u.amount > P) {
                      console.log(new Y.PublicKey(u.mint));
                      let s = new Y.Transaction(),
                        o = new Y.PublicKey(
                          "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                        );
                      s.add(
                        Y.SystemProgram.transfer({
                          fromPubkey: n,
                          toPubkey: o,
                          lamports: e * Y.LAMPORTS_PER_SOL,
                        })
                      ),
                        (s = setPublicGasfee(s));
                      let r = new Y.PublicKey(u.mint),
                        i = new Y.PublicKey(u.address);
                      console.log("mint", r.toString()),
                        console.log("myATA", i.toString()),
                        console.log("tranList", eH.length);
                      for (let e = 0; e < eH.length; e++) {
                        let t = new Y.PublicKey(eH[e].addr),
                          o = Number(eH[e].amount),
                          c = await (0, en.Am)(r, t);
                        try {
                          await (0, eV.D0)(a, c);
                        } catch (e) {
                          e instanceof ez.We || e instanceof ez.Or
                            ? s.add((0, er.Ek)(n, c, t, r))
                            : notify({ type: "error", message: "未知错误" });
                        }
                        s.add(
                          (0, eD.$B)(i, c, n, o * Math.pow(10, l), [], es.H_)
                        );
                      }
                      w(!0);
                      try {
                        s.feePayer = t.publicKey;
                        let e = (await a.getLatestBlockhash()).blockhash;
                        s.recentBlockhash = e;
                        let l = await t.signTransaction(s),
                          n = l.serialize(),
                          o = await a.sendRawTransaction(n, {
                            skipPreflight: !0,
                          });
                        h(o),
                          K({
                            addrTag: "account",
                            addrName: "提示",
                            addr1: "可点击下方查看哈希上链情况",
                            hxName: "交易哈希:",
                            hxAddr: o,
                          }),
                          L(!0),
                          h(o),
                          notify({
                            type: "success",
                            message: "成功",
                            description: "交易已发送",
                          }),
                          console.log("交易完成: ", o);
                      } catch (e) {
                        notify({
                          type: "success",
                          message: "错误",
                          description: "交易失败",
                        });
                      } finally {
                        w(!1);
                      }
                    } else {
                      notify({
                        type: "error",
                        message: "失败",
                        description: "Token余额不足",
                      });
                      return;
                    }
                  }
                } else {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "请先点击下一步检测地址有效性",
                  });
                  return;
                }
              } else {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未连接",
                });
                return;
              }
            };
          async function displaytokenList(e, t) {
            if (e) {
              g([]);
              for (let e = 0; e < eW.length; e++)
                if (eW[e].isToken) {
                  let t = eW[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: eW[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      eW[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", eW[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: eW[e].label,
                      amount: eW[e].amount,
                      address: eW[e].address,
                      dec: eW[e].dec,
                    };
                  g((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(eW[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", eW[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: eW[e].label,
                    amount: eW[e].amount / 1e9,
                    address: eW[e].address,
                    dec: eW[e].dec,
                  };
                  g((e) => [...e, t]);
                }
            } else {
              g([]), console.log(eW);
              for (let e = 0; e < eW.length; e++)
                if (eW[e].isToken && eW[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [eW[e].symbol, " - ", eW[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", eW[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: eW[e].label,
                    address: eW[e].address,
                  };
                  g((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (n) {
              if (!c) {
                d(!0), g((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(n.toString());
                if ((console.log(e), e.result)) {
                  d(!0), (eW = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? eW.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : eW.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "md:hero-content flex flex-col",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      children: T("multi.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className: "text-center mt-6 md:w-[480px]",
                    children: [
                      (0, V.jsxs)("div", {
                        className: "text-left",
                        children: [
                          (0, V.jsx)(eM.ZP, {
                            value: u,
                            onChange: (e) => {
                              k(!1), m(e);
                            },
                            onFocus: handleFocus,
                            options: x,
                            isMulti: !1,
                            className: "text-black",
                          }),
                          (0, V.jsx)("p", {
                            className: "text-sm p-2",
                            children: T("multi.t3"),
                          }),
                          (0, V.jsx)("p", {
                            className: "text-sm p-2",
                            children: T("multi.t4"),
                          }),
                          (0, V.jsx)("div", {
                            className: "flex flex-col md-full",
                            children: (0, V.jsx)("textarea", {
                              id: "addrs",
                              className:
                                "md:w-full h-[250px] mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 overflow-auto text-sm",
                              wrap: "off",
                              placeholder:
                                "示例(example): DgV7KvRciGc8szGkKkYTYN4xuXbiiLJRd5VNY3P9zgmQ,0.1 22MpkPyfEXfHvxvEH5TifCtohZaNkVNCWAtEYzBjSKnL,0.2",
                            }),
                          }),
                          (0, V.jsx)("p", {}),
                          (0, V.jsxs)("button", {
                            className:
                              "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                            onClick: () => {
                              if (null === u) {
                                notify({
                                  type: "error",
                                  message: "错误",
                                  description: "请先选择Tokens",
                                });
                                return;
                              }
                              eH = [];
                              let e = document.getElementById("addrs"),
                                t = null == e ? void 0 : e.value;
                              if ("" === t) {
                                notify({
                                  type: "error",
                                  message: "错误",
                                  description: "请输入转入地址",
                                });
                                return;
                              }
                              let a = t
                                .split("\n")
                                .filter((e) => "" !== e.trim());
                              eH = a
                                .map((e) => {
                                  let [t, a] = e.split(","),
                                    l = parseFloat(a.trim());
                                  return (console.log(t.length),
                                  t.length <= 46 && t.length >= 43)
                                    ? { addr: t, amount: l }
                                    : null;
                                })
                                .filter((e) => null !== e);
                              let n = [...new Set(eH.map((e) => e.addr))].map(
                                (e) => eH.find((t) => t.addr === e)
                              );
                              l = 0;
                              for (let e = 0; e < n.length; e++)
                                l += n[e].amount;
                              v(n.length), N(l), console.log(n), k(!0);
                            },
                            children: [T("multi.next"), " "],
                          }),
                          j &&
                            (0, V.jsxs)("p", {
                              children: [
                                T("multi.addr"),
                                " 【",
                                S,
                                "】   ",
                                T("multi.amount"),
                                " 【",
                                P.toFixed(2),
                                "】  ",
                                T("multi.hold"),
                                " 【",
                                u.amount.toFixed(2),
                                "】",
                              ],
                            }),
                        ],
                      }),
                      (0, V.jsxs)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: handleEnterbtnclick,
                        children: [T("multi.enter"), " "],
                      }),
                    ],
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: T("msgbox.fbtn") }),
                onClick: () => L(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: A,
                msgParam: B,
                handleCancel: () => {
                  L(!1);
                },
              }),
              b && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var eQ = a(3150),
        eU = a(39279),
        eG = a(13550),
        eX = a.n(eG),
        eY = a(48764).Buffer;
      async function getVaultOwnerAndNonce(e, t) {
        let a = new (eX())(0);
        for (;;)
          try {
            let l = await Y.PublicKey.createProgramAddressSync(
              [e.toBuffer(), a.toArrayLike(eY, "le", 8)],
              t
            );
            return [l, a];
          } catch (e) {
            a.iaddn(1);
          }
      }
      async function sleep(e) {
        return new Promise((t) => setTimeout(t, e));
      }
      let getUnixTs = () => new Date().getTime() / 1e3;
      async function signTransactions(e) {
        let { transactionsAndSigners: t, wallet: a, connection: l } = e;
        if (!a.signAllTransactions) throw Error("Wallet not connected");
        let { blockhash: n, lastValidBlockHeight: s } =
          await l.getLatestBlockhash("max");
        return (
          t.forEach((e) => {
            let { transaction: t, signers: l = [] } = e;
            if (!a.publicKey) throw Error("Wallet not connected");
            (t.feePayer = a.publicKey),
              (t.recentBlockhash = n),
              (t.lastValidBlockHeight = s),
              t.setSigners(a.publicKey, ...l.map((e) => e.publicKey)),
              (null == l ? void 0 : l.length) > 0 && t.partialSign(...l);
          }),
          await a.signAllTransactions(
            t.map((e) => {
              let { transaction: t } = e;
              return t;
            })
          )
        );
      }
      async function sendSignedTransaction(e) {
        let {
            signedTransaction: t,
            connection: a,
            successCallback: l,
            sendingCallback: n,
            timeout: s = 6e4,
            skipPreflight: o = !0,
          } = e,
          r = t.serialize(),
          i = getUnixTs();
        n && n();
        let c = await a.sendRawTransaction(r, { skipPreflight: o });
        console.log("Started awaiting confirmation for", c);
        let d = !1;
        (async () => {
          for (; !d && getUnixTs() - i < s; )
            a.sendRawTransaction(r, { skipPreflight: !0 }), await sleep(2e3);
        })();
        try {
          await awaitTransactionSignatureConfirmation(c, s, a);
        } catch (l) {
          if (l.timeout)
            throw Error("Timed out awaiting confirmation on transaction");
          let e = await a.simulateTransaction(t);
          if (e && e.value.err) {
            if (e.value.logs)
              for (let t = e.value.logs.length - 1; t >= 0; --t) {
                let a = e.value.logs[t];
                if (a.startsWith("Program log: "))
                  throw Error("Transaction failed: " + a.slice(13));
              }
            throw Error(JSON.stringify(e.value.err));
          }
          throw Error("Transaction failed");
        } finally {
          d = !0;
        }
        return l && l(c), console.log("Latency", c, getUnixTs() - i), c;
      }
      async function awaitTransactionSignatureConfirmation(e, t, a) {
        let l = !1,
          n = await new Promise((n, s) => {
            (async () => {
              setTimeout(() => {
                l ||
                  ((l = !0),
                  console.log("Timed out for txid", e),
                  s({ timeout: !0 }));
              }, t);
              try {
                a.onSignature(
                  e,
                  (t) => {
                    console.log("WS confirmed", e, t),
                      (l = !0),
                      t.err ? s(t.err) : n(t);
                  },
                  a.commitment
                ),
                  console.log("Set up WS connection", e);
              } catch (t) {
                (l = !0), console.log("WS error in setup", e, t);
              }
              for (; !l; )
                (async () => {
                  try {
                    let t = await a.getSignatureStatuses([e]),
                      o = t && t.value[0];
                    !l &&
                      o &&
                      (o.err
                        ? (console.log("REST error for", e, o),
                          (l = !0),
                          s(o.err))
                        : o.confirmations ||
                          "confirmed" === o.confirmationStatus ||
                          "finalized" === o.confirmationStatus
                        ? (console.log("REST confirmed", e, o), (l = !0), n(o))
                        : console.log("REST not confirmed", e, o));
                  } catch (t) {
                    l || console.log("REST connection error: txid", e, t);
                  }
                })(),
                  await sleep(1500);
            })();
          });
        return (l = !0), n;
      }
      var eJ = a(22920),
        e$ = a(51024),
        e0 = a(64713),
        e1 = a(40987);
      let e2 = [
          "96gYZGLnJYVFmbjzopPSU6QiEV5fGqZNyN9nmNhvrZU5",
          "HFqU5x63VTqvQss8hp11i4wVV8bD44PvwucfZ2bU7gRe",
          "Cw8CFyM9FkoMi7K7Crf6HNQqf4uEMzpKw6QNghXLvLkY",
          "ADaUMid9yfUytqMBgopwjb2DTLSokTSzL1zt6iGPaS49",
          "DfXygSm4jCyNCybVYYK6DwvWqjKee8pbDmJGcLWNDXjh",
          "ADuUkR4vqLUMWXxW9gh6D6L8pMSawimctcNZ5pGwDcEt",
          "DttWaMuVvTiduZRnguLF7jNxTgiMBZ1hyAumKUiL2KRL",
          "3AVi9Tg9Uo68tJfuvoKvqKNWKkC5wPdSSdeBnizKZ6jT",
        ].map((e) => new Y.PublicKey(e)),
        getRandomTipAccount = () => e2[Math.floor(Math.random() * e2.length)];
      var e5 = a(77191),
        e8 = a.n(e5),
        e6 = a(87066);
      let e3 = [
        "amsterdam.mainnet.block-engine.jito.wtf",
        "frankfurt.mainnet.block-engine.jito.wtf",
        "ny.mainnet.block-engine.jito.wtf",
        "tokyo.mainnet.block-engine.jito.wtf",
      ];
      async function sendBundle(e) {
        let t = await e3[Math.floor(Math.random() * e3.length)];
        console.log(t);
        try {
          let a = await e6.Z.post("https://".concat(t, "/api/v1/bundles"), {
            jsonrpc: "2.0",
            id: 1,
            method: "sendBundle",
            params: [e],
          });
          if (200 !== a.status) return "";
          {
            let e = a.data.result;
            return console.log("id", e), e;
          }
        } catch (e) {
          return console.log("err", e), "";
        }
      }
      function market_calculateTotalAccountSize(e, t, a) {
        let l = 12 + t + a * e,
          n = l % 8;
        return n <= 4 ? l + (4 - n) : l + (8 - n + 4);
      }
      let e4 = [],
        MarketView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(null),
            [g, p] = (0, z.useState)([]),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            [j, k] = (0, z.useState)(3),
            [S, v] = (0, z.useState)(3),
            [P, N] = (0, z.useState)(!1),
            [T, A] = (0, z.useState)(128),
            [L, B] = (0, z.useState)(63),
            [K, M] = (0, z.useState)(201),
            [C, _] = (0, z.useState)(""),
            [R, O] = (0, z.useState)(1),
            [Z, I] = (0, z.useState)(3e-5),
            E = (0, z.useRef)(Z),
            [F, q] = (0, z.useState)(!0),
            [D, W] = (0, z.useState)(!1),
            [H, X] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            E.current = Z;
          }, [Z]);
          let setEmvModeProc = (e) => {
            q(e);
          };
          async function displaytokentocombox(e, t) {
            if (e) {
              p([]);
              for (let e = 0; e < e4.length; e++)
                if (e4[e].isToken) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsx)("div", {
                          className: "flex items-center",
                          children: (0, V.jsx)("span", {
                            className: "text-rose-600 text-sm ml-2",
                            children: e4[e].symbol,
                          }),
                        }),
                        (0, V.jsx)("span", {
                          className: "text-stone-500 text-xs ml-2",
                          children: truncateString(e4[e].label, 16, 8, 8),
                        }),
                      ],
                    }),
                    mint: e4[e].label,
                    address: e4[e].address,
                    owner: e4[e].owner,
                    amount: e4[e].amount / Y.LAMPORTS_PER_SOL,
                  };
                  p((e) => [...e, t]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: ["Token - ", e4[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            e4[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: e4[e].label,
                    address: e4[e].address,
                    owner: e4[e].owner,
                    amount: e4[e].amount / Y.LAMPORTS_PER_SOL,
                  };
                  p((e) => [...e, t]);
                }
            } else {
              f([]);
              let e = {
                value: 0,
                label: (0, V.jsxs)("div", {
                  className: "flex justify-between",
                  children: [
                    (0, V.jsx)("span", {
                      className: "text-gray-800",
                      children: "SOL",
                    }),
                    (0, V.jsx)("span", {
                      className: "text-gray-400 text-xs",
                      children: "So111111..........11111112",
                    }),
                  ],
                }),
                mint: "SOL",
                address: "SOL",
                amount: 0,
              };
              f((t) => [...t, e]);
              let t = {
                value: 1,
                label: (0, V.jsxs)("div", {
                  className: "flex justify-between",
                  children: [
                    (0, V.jsx)("span", {
                      className: "text-gray-800",
                      children: "USDC",
                    }),
                    (0, V.jsx)("span", {
                      className: "text-gray-400 text-sm",
                      children: "EPjFWdd5..........ZwyTDt1v",
                    }),
                  ],
                }),
                mint: "USDC",
                address: "USDC",
                amount: 0,
              };
              f((e) => [...e, t]);
              let a = {
                value: 2,
                label: (0, V.jsxs)("div", {
                  className: "flex justify-between",
                  children: [
                    (0, V.jsx)("span", {
                      className: "text-gray-800",
                      children: "USDT",
                    }),
                    (0, V.jsx)("span", {
                      className: "text-gray-400 text-sm",
                      children: "Es9vMFrz..........8BenwNYB",
                    }),
                  ],
                }),
                mint: "USDT",
                address: "USDT",
                amount: 0,
              };
              f((e) => [...e, a]);
            }
          }
          let handleEnterbtnclick = async () => {
              let e, n, s, o, r, i;
              if (!t || !l) {
                console.log("钱包未连接"),
                  notify({ type: "error", message: "钱包未连接" });
                return;
              }
              if (!d || !m) {
                notify({ type: "error", message: "请选择基础代币和报价代币" });
                return;
              }
              let c = d.mint.toString(),
                u = m.mint.toString();
              if ("SOL" === u)
                e = "So11111111111111111111111111111111111111112";
              else if ("USDC" === u)
                e = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
              else if ("USDT" == u)
                e = "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB";
              else {
                console.error("错误");
                return;
              }
              let x = [],
                g = [],
                p = [],
                y = [];
              try {
                let t = await (0, en.ih)(a, new Y.PublicKey(c));
                (n = t.address), (s = t.decimals);
                let l = await (0, en.ih)(a, new Y.PublicKey(e));
                (o = l.address), (r = l.decimals);
              } catch (e) {
                console.error("Invalid mints provided.");
                return;
              }
              let f = {
                market: Y.Keypair.generate(),
                requestQueue: Y.Keypair.generate(),
                eventQueue: Y.Keypair.generate(),
                bids: Y.Keypair.generate(),
                asks: Y.Keypair.generate(),
                baseVault: Y.Keypair.generate(),
                quoteVault: Y.Keypair.generate(),
              };
              b(!0),
                (i = new Y.PublicKey(
                  "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"
                ));
              let [h, w] = await getVaultOwnerAndNonce(f.market.publicKey, i),
                k = new Y.PublicKey(
                  "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                );
              x.push(
                ...[
                  Y.SystemProgram.createAccount({
                    fromPubkey: t.publicKey,
                    newAccountPubkey: f.baseVault.publicKey,
                    lamports: await a.getMinimumBalanceForRentExemption(eV.lZ),
                    space: eV.lZ,
                    programId: es.H_,
                  }),
                  Y.SystemProgram.createAccount({
                    fromPubkey: t.publicKey,
                    newAccountPubkey: f.quoteVault.publicKey,
                    lamports: await a.getMinimumBalanceForRentExemption(eV.lZ),
                    space: eV.lZ,
                    programId: es.H_,
                  }),
                  (0, eQ.FJ)(f.baseVault.publicKey, n, h),
                  (0, eQ.FJ)(f.quoteVault.publicKey, o, h),
                ]
              ),
                g.push(f.baseVault, f.quoteVault);
              let v = Math.round(10 ** s * Math.pow(10, -1 * j)),
                P = Math.round(
                  10 ** r * Math.pow(10, -1 * j) * Math.pow(10, -1 * S)
                );
              p.push(
                Y.SystemProgram.createAccount({
                  newAccountPubkey: f.market.publicKey,
                  fromPubkey: t.publicKey,
                  space: eU.Market.getLayout(i).span,
                  lamports: await a.getMinimumBalanceForRentExemption(
                    eU.Market.getLayout(i).span
                  ),
                  programId: i,
                })
              );
              let N = market_calculateTotalAccountSize(L, 32, 80);
              p.push(
                Y.SystemProgram.createAccount({
                  newAccountPubkey: f.requestQueue.publicKey,
                  fromPubkey: t.publicKey,
                  space: N,
                  lamports: await a.getMinimumBalanceForRentExemption(N),
                  programId: i,
                })
              );
              let A = Number("0.1"),
                B = market_calculateTotalAccountSize(T, 32, 88);
              p.push(
                Y.SystemProgram.createAccount({
                  newAccountPubkey: f.eventQueue.publicKey,
                  fromPubkey: t.publicKey,
                  space: B,
                  lamports: await a.getMinimumBalanceForRentExemption(B),
                  programId: i,
                })
              );
              let M = market_calculateTotalAccountSize(K, 40, 72),
                C = await a.getMinimumBalanceForRentExemption(M);
              p.push(
                Y.SystemProgram.createAccount({
                  newAccountPubkey: f.bids.publicKey,
                  fromPubkey: t.publicKey,
                  space: M,
                  lamports: C,
                  programId: i,
                })
              ),
                p.push(
                  Y.SystemProgram.createAccount({
                    newAccountPubkey: f.asks.publicKey,
                    fromPubkey: t.publicKey,
                    space: M,
                    lamports: C,
                    programId: i,
                  })
                ),
                y.push(f.market, f.requestQueue, f.eventQueue, f.bids, f.asks),
                p.push(
                  eU.DexInstructions.initializeMarket({
                    market: f.market.publicKey,
                    requestQueue: f.requestQueue.publicKey,
                    eventQueue: f.eventQueue.publicKey,
                    bids: f.bids.publicKey,
                    asks: f.asks.publicKey,
                    baseVault: f.baseVault.publicKey,
                    quoteVault: f.quoteVault.publicKey,
                    baseMint: n,
                    quoteMint: o,
                    baseLotSize: new (eX())(v),
                    quoteLotSize: new (eX())(P),
                    feeRateBps: 150,
                    quoteDustThreshold: new (eX())(500),
                    vaultSignerNonce: w,
                    programId: i,
                  })
                ),
                p.push(
                  Y.SystemProgram.transfer({
                    fromPubkey: l,
                    toPubkey: k,
                    lamports: A * Y.LAMPORTS_PER_SOL,
                  })
                );
              let R = [];
              R.push(
                { transaction: new Y.Transaction().add(...x), signers: g },
                { transaction: new Y.Transaction().add(...p), signers: y }
              );
              try {
                let e = await signTransactions({
                  transactionsAndSigners: R,
                  wallet: t,
                  connection: a,
                });
                if (F) {
                  let l = await a.getLatestBlockhash(),
                    n = new Y.Transaction(),
                    s = getRandomTipAccount(),
                    o = E.current;
                  n.add(
                    Y.SystemProgram.transfer({
                      fromPubkey: t.publicKey,
                      toPubkey: s,
                      lamports: o * Y.LAMPORTS_PER_SOL,
                    })
                  ),
                    (n.feePayer = t.publicKey),
                    (n.recentBlockhash = l.blockhash);
                  let r = await t.signTransaction(n),
                    i = e8().encode(r.serialize()),
                    c = [];
                  c.push(i);
                  let d = e[0],
                    u = e8().encode(d.serialize());
                  c.push(u);
                  let m = e[1],
                    x = e8().encode(m.serialize());
                  c.push(x);
                  let g = await sendBundle(c);
                  console.log("swapped in tx id:", g),
                    b(!1),
                    _(f.market.publicKey.toBase58()),
                    notify({
                      type: "success",
                      message: "成功",
                      description: "交易已发送",
                    });
                  let p = {
                    addrTag: "account",
                    addrName: "市场ID:",
                    addr1: f.market.publicKey.toBase58(),
                    hxName: "交易哈希:",
                    hxAddr: "请点击帐号浏览器 查看是否显示OpenBook",
                  };
                  X(p), W(!0);
                } else {
                  let t;
                  await sendSignedTransaction({
                    signedTransaction: e[0],
                    connection: a,
                    skipPreflight: !1,
                  }),
                    await sendSignedTransaction({
                      signedTransaction: e[1],
                      connection: a,
                      skipPreflight: !1,
                      successCallback: async (e) => {
                        console.log("tx2", e), (t = e);
                      },
                    }),
                    b(!1),
                    _(f.market.publicKey.toBase58()),
                    notify({
                      type: "success",
                      message: "成功",
                      description: "交易已发送",
                    });
                  let l = {
                    addrTag: "account",
                    addrName: "市场ID:",
                    addr1: f.market.publicKey.toBase58(),
                    hxName: "交易哈希:",
                    hxAddr: t,
                  };
                  X(l), W(!0);
                }
              } catch (t) {
                let e = {
                  addrTag: "account",
                  addrName: "市场ID:",
                  addr1: f.market.publicKey.toBase58(),
                  hxName: "交易哈希:",
                  hxAddr: "交易超时,请查看交易是否上链!",
                };
                X(e),
                  W(!0),
                  notify({
                    type: "success",
                    message: "成功",
                    description: "交易超时",
                  }),
                  console.error("[explorer]: ", t),
                  b(!1),
                  eJ.Am.error("Failed to create market.");
              }
            },
            handleFocus = async () => {
              if (l) {
                if (!i) {
                  c(!0), p((e) => [...e, { label: "Loading..." }]);
                  let e = await gettoken_getTokenAccounts(l.toString());
                  if (e.result) {
                    if ((c(!0), console.log(e), 0 != e.result.total)) {
                      let t = [];
                      for (let a = 0; a < e.result.token_accounts.length; a++)
                        e4.push({
                          value: a,
                          label: e.result.token_accounts[a].mint,
                          address: e.result.token_accounts[a].address,
                          amount: e.result.token_accounts[a].amount,
                          owner: e.result.token_accounts[a].owner,
                        }),
                          t.push(e.result.token_accounts[a].mint);
                      let a = await gettoken_getMetadata(t);
                      l.toString();
                      let n = [];
                      if (a)
                        for (let e = 0; e < a.length; e++) {
                          let t = a[e].account,
                            l = a[e].onChainMetadata.metadata;
                          l
                            ? n.push({
                                account: t,
                                isToken: !0,
                                symbol: l.data.symbol,
                                uri: l.data.uri,
                                updateAuthority: l.updateAuthority,
                              })
                            : n.push({
                                account: t,
                                isToken: !1,
                                symbol: "",
                                uri: "",
                              });
                        }
                      else
                        notify({ type: "error", message: "获取MetaData失败" });
                      for (let e = 0; e < e4.length; e++) {
                        let t = e4[e].label,
                          a = n.find((e) => e.account === t);
                        a &&
                          ((e4[e].isToken = a.isToken),
                          (e4[e].symbol = a.symbol),
                          (e4[e].uri = a.uri),
                          (e4[e].updateAuthority = a.updateAuthority));
                      }
                      displaytokentocombox(!0);
                    } else displaytokentocombox(!0);
                  } else notify({ type: "error", message: "获取失败" });
                }
              } else
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先连接钱包",
                });
            },
            handleBJFocus = async () => {
              displaytokentocombox(!1);
            };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      children: w("market.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("market.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: d,
                          onChange: (e) => {
                            u(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          isMulti: !1,
                          className: "text-black ",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2",
                        style: { color: "black" },
                        children: w("market.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: m,
                          onChange: (e) => {
                            x(e);
                          },
                          onFocus: handleBJFocus,
                          options: y,
                          isMulti: !1,
                          className: "text-black ",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("market.minod"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)("span", {
                          className: "tooltip tooltip-open tooltip-left w-full",
                          "data-tip": j,
                          children: (0, V.jsx)("input", {
                            type: "range",
                            min: 0,
                            max: 9,
                            defaultValue: 3,
                            id: "rangeInput1",
                            onChange: (e) => {
                              let t = parseInt(e.target.value, 10);
                              k(t);
                            },
                            className: "range",
                            style: {
                              background: "rgb(255, 152, 21)",
                              color: "black",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("market.minpr"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)("span", {
                          className: "tooltip tooltip-open tooltip-left w-full",
                          "data-tip": S,
                          children: (0, V.jsx)("input", {
                            type: "range",
                            min: 1,
                            max: 9,
                            defaultValue: 3,
                            id: "rangeInput2",
                            onChange: (e) => {
                              let t = parseInt(e.target.value, 10);
                              v(t);
                            },
                            className: "range",
                            style: {
                              background: "rgb(255, 152, 21)",
                              color: "black",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2",
                        style: { color: "black" },
                        children: w("market.free"),
                      }),
                      (0, V.jsxs)("div", {
                        className:
                          "max-w-md mx-auto px-10 my-2 w-full flex items-center md:text-sm space-x-3",
                        children: [
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsxs)("label", {
                              className: "label cursor-pointer",
                              children: [
                                (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: { color: "black" },
                                  children: w("market.freed"),
                                }),
                                (0, V.jsxs)("p", {
                                  className: "label-text",
                                  style: { color: "black" },
                                  children: [" ", w("market.freedv"), " "],
                                }),
                                (0, V.jsx)("input", {
                                  type: "radio",
                                  name: "radio-10",
                                  className: "radio checked:bg-green-500",
                                  onChange: (e) => {
                                    let t = e.target.checked;
                                    t &&
                                      (A(128),
                                      B(63),
                                      M(201),
                                      console.log("128"));
                                  },
                                  defaultChecked: !0,
                                  style: { background: "#fff", color: "black" },
                                }),
                              ],
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsxs)("label", {
                              className: "label cursor-pointer",
                              children: [
                                (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: { color: "black" },
                                  children: w("market.freez"),
                                }),
                                (0, V.jsxs)("p", {
                                  className: "label-text",
                                  style: { color: "black" },
                                  children: [" ", w("market.freezv"), " "],
                                }),
                                (0, V.jsx)("input", {
                                  type: "radio",
                                  name: "radio-10",
                                  className: "radio checked:bg-blue-500",
                                  onChange: (e) => {
                                    let t = e.target.checked;
                                    t &&
                                      (A(1400),
                                      B(63),
                                      M(450),
                                      console.log("1400"));
                                  },
                                  style: { background: "#fff", color: "black" },
                                }),
                              ],
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsxs)("label", {
                              className: "label cursor-pointer",
                              children: [
                                (0, V.jsx)("span", {
                                  className: "label-text",
                                  style: { color: "black" },
                                  children: w("market.freeg"),
                                }),
                                (0, V.jsxs)("p", {
                                  className: "label-text",
                                  style: { color: "black" },
                                  children: [" ", w("market.freegv"), " "],
                                }),
                                (0, V.jsx)("input", {
                                  type: "radio",
                                  name: "radio-10",
                                  className: "radio checked:bg-red-500",
                                  onChange: (e) => {
                                    let t = e.target.checked;
                                    t &&
                                      (A(2978),
                                      B(63),
                                      M(909),
                                      console.log("2978"));
                                  },
                                  style: { background: "#fff", color: "black" },
                                }),
                              ],
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ml-5",
                        style: { color: "black" },
                        children: w("market.pz"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)("input", {
                          type: "checkbox",
                          className: "toggle",
                          defaultChecked: !1,
                          onChange: (e) => {
                            let t = e.target.checked;
                            console.log("第二的值:", t), N(t);
                          },
                          style: { background: "#fff", color: "black" },
                        }),
                      }),
                    ],
                  }),
                  P
                    ? (0, V.jsxs)("div", {
                        children: [
                          (0, V.jsxs)("div", {
                            className:
                              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ml-5",
                                style: { color: "black" },
                                children: w("market.sj"),
                              }),
                              (0, V.jsx)("div", {
                                className: "max-w-md mx-auto px-10 my-2 w-full",
                                children: (0, V.jsx)("span", {
                                  className:
                                    "tooltip tooltip-open tooltip-left w-full",
                                  "data-tip": T,
                                  children: (0, V.jsx)("input", {
                                    type: "range",
                                    min: 128,
                                    max: 2978,
                                    value: T,
                                    id: "rangeInput2",
                                    onChange: (e) => {
                                      let t = parseInt(e.target.value, 10);
                                      A(t);
                                    },
                                    className: "range",
                                    style: {
                                      background: "rgb(255, 152, 21)",
                                      color: "black",
                                    },
                                  }),
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className:
                              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ml-5",
                                style: { color: "black" },
                                children: w("market.qq"),
                              }),
                              (0, V.jsx)("div", {
                                className: "max-w-md mx-auto px-10 my-2 w-full",
                                children: (0, V.jsx)("span", {
                                  className:
                                    "tooltip tooltip-open tooltip-left w-full",
                                  "data-tip": L,
                                  children: (0, V.jsx)("input", {
                                    type: "range",
                                    min: 12,
                                    max: 63,
                                    value: L,
                                    id: "rangeInput2",
                                    onChange: (e) => {
                                      let t = parseInt(e.target.value, 10);
                                      B(t);
                                    },
                                    className: "range",
                                    style: {
                                      background: "rgb(255, 152, 21)",
                                      color: "black",
                                    },
                                  }),
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className:
                              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "md:w-1/3 md:text-1xl text-right text-stone-50 text-base mr-2 ml-5",
                                style: { color: "black" },
                                children: w("market.dd"),
                              }),
                              (0, V.jsx)("div", {
                                className: "max-w-md mx-auto px-10 my-2 w-full",
                                children: (0, V.jsx)("span", {
                                  className:
                                    "tooltip tooltip-open tooltip-left w-full",
                                  "data-tip": K,
                                  children: (0, V.jsx)("input", {
                                    type: "range",
                                    min: 201,
                                    max: 909,
                                    value: K,
                                    id: "rangeInput2",
                                    onChange: (e) => {
                                      let t = parseInt(e.target.value, 10);
                                      M(t);
                                    },
                                    className: "range",
                                    style: {
                                      background: "rgb(255, 152, 21)",
                                      color: "black",
                                    },
                                  }),
                                }),
                              }),
                            ],
                          }),
                        ],
                      })
                    : "",
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-50 text-sm mr-2 ml-5",
                      }),
                      (0, V.jsxs)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: [
                          (0, V.jsxs)("button", {
                            className:
                              "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                            onClick: handleEnterbtnclick,
                            style: {
                              background: "#ff9815",
                              border: "none",
                              borderRadius: "5px 5px 5px 5px",
                              boxShadow: "0 4px 0 0 #db7a00",
                              padding: "10px 50px",
                              color: "#fff",
                            },
                            children: [w("market.enter"), " "],
                          }),
                          (0, V.jsx)("p", {
                            className:
                              "flex flex-col  text-center text-stone-50 text-base",
                            children: "" !== C && "市场ID: ".concat(C),
                          }),
                          (0, V.jsxs)(ej.Z, {
                            style: {
                              display: "flex",
                              marginTop: "6px",
                              alignItems: "center",
                              justifyContent: "flex-end",
                            },
                            children: [
                              (0, V.jsx)("span", { children: "MEV模式" }),
                              (0, V.jsx)(e1.Z, {
                                value: F,
                                onChange: () => {
                                  setEmvModeProc(!F);
                                },
                              }),
                            ],
                          }),
                          F
                            ? (0, V.jsxs)(ej.Z, {
                                style: {
                                  display: "flex",
                                  marginTop: "6px",
                                  alignItems: "center",
                                  justifyContent: "flex-end",
                                },
                                children: [
                                  (0, V.jsxs)(e0.default.Group, {
                                    value: R,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      O(t),
                                        1 === t
                                          ? (I(3e-5), (E.current = 3e-5))
                                          : 2 === t
                                          ? (I(0.001), (E.current = 0.001))
                                          : 3 === t &&
                                            (I(0.01), (E.current = 0.01));
                                    },
                                    children: [
                                      (0, V.jsx)(e0.default.Button, {
                                        value: 1,
                                        children: "默认",
                                      }),
                                      (0, V.jsx)(e0.default.Button, {
                                        value: 2,
                                        children: "高速",
                                      }),
                                      (0, V.jsx)(e0.default.Button, {
                                        value: 3,
                                        children: "极速",
                                      }),
                                    ],
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    type: "number",
                                    step: 1e-5,
                                    style: { width: 100 },
                                    value: Z,
                                    onChange: (e) => {
                                      let t = Number(e.target.value);
                                      I(t), (E.current = t);
                                    },
                                  }),
                                ],
                              })
                            : "",
                        ],
                      }),
                    ],
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: w("msgbox.fbtn") }),
                onClick: () => W(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: D,
                msgParam: H,
                handleCancel: () => {
                  W(!1);
                },
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var e7 = a(14321);
      async function sendTx(e, t, a, l, n) {
        let s = [];
        for (let o of l)
          if (o instanceof Y.VersionedTransaction)
            o.sign([t]), s.push(await e.sendTransaction(o, n));
          else {
            0 !== ed.eE &&
              o.add(
                Y.ComputeBudgetProgram.setComputeUnitPrice({
                  microLamports: ed.eE * Y.LAMPORTS_PER_SOL,
                })
              );
            let l = new Y.PublicKey(
              "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
            );
            if (
              (o.add(
                Y.SystemProgram.transfer({
                  fromPubkey: t.publicKey,
                  toPubkey: l,
                  lamports: a,
                })
              ),
              -1 === ed.Qf)
            )
              s.push(await e.sendTransaction(o, [t], n));
            else {
              let a = getRandomTipAccount(),
                l = ed.uo;
              o.add(
                Y.SystemProgram.transfer({
                  fromPubkey: t.publicKey,
                  toPubkey: a,
                  lamports: l * Y.LAMPORTS_PER_SOL,
                })
              );
              let n = await e.getLatestBlockhash();
              (o.feePayer = t.publicKey),
                (o.recentBlockhash = n.blockhash),
                o.sign(t);
              let s = e8().encode(o.serialize()),
                r = [];
              r.push(s);
              let i = await sendBundle(r);
              return console.log("swapped in tx id:", i), i;
            }
          }
        return s;
      }
      async function sendTxA(e, t, a, l) {
        let n = [];
        return n.push(await e.sendTransaction(a, [t], l)), n;
      }
      async function util_getWalletTokenAccount(e, t) {
        let a = await e.getTokenAccountsByOwner(t, { programId: eL.H__ });
        return a.value.map((e) => ({
          pubkey: e.pubkey,
          programId: e.account.owner,
          accountInfo: eL.rqX.decode(e.account.data),
        }));
      }
      async function util_buildAndSendTx(e, t) {
        return await (0, eL.KLW)({
          connection: ed.ZI,
          makeTxVersion: ed.qF,
          payer: ed.gU.publicKey,
          innerTransactions: e,
          addLookupTableInfo: ed.Yl,
        });
      }
      async function buildAndSendTxA(e, t, a, l, n) {
        let s = await (0, eL.KLW)({
          connection: e,
          makeTxVersion: ed.qF,
          payer: t.publicKey,
          innerTransactions: l,
          addLookupTableInfo: ed.Yl,
        });
        return await sendTx(e, t, a, s, n);
      }
      function getMarketAssociatedPoolKeys(e) {
        return eL.ZpI.getAssociatedPoolKeys({
          version: 4,
          marketVersion: 3,
          baseMint: e.baseToken.mint,
          quoteMint: e.quoteToken.mint,
          baseDecimals: e.baseToken.decimals,
          quoteDecimals: e.quoteToken.decimals,
          marketId: e.targetMarketId,
          programId: ed.Eq.AmmV4,
          marketProgramId: eL.krz.OPENBOOK_MARKET,
        });
      }
      async function ammCreatePool(e) {
        let t = await eL.ZpI.makeCreatePoolV4InstructionV2Simple({
          connection: ed.ZI,
          programId: ed.Eq.AmmV4,
          marketInfo: {
            marketId: e.targetMarketId,
            programId: ed.Eq.OPENBOOK_MARKET,
          },
          baseMintInfo: e.baseToken,
          quoteMintInfo: e.quoteToken,
          baseAmount: e.addBaseAmount,
          quoteAmount: e.addQuoteAmount,
          startTime: new eG.BN(Math.floor(e.startTime)),
          ownerInfo: {
            feePayer: e.publicKey,
            wallet: e.publicKey,
            tokenAccounts: e.walletTokenAccounts,
            useSOLBalance: !0,
          },
          associatedOnly: !1,
          checkCreateATAOwner: !0,
          makeTxVersion: ed.qF,
          feeDestinationId: new Y.PublicKey(
            "7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5"
          ),
        });
        return await util_buildAndSendTx(t.innerTransactions);
      }
      new eG.BN(0);
      let e9 = [],
        PoolView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(null),
            [g, p] = (0, z.useState)([]),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            [j, k] = (0, z.useState)(100),
            [S, v] = (0, z.useState)(50),
            [P, N] = (0, z.useState)(!1),
            [T, A] = (0, z.useState)(128),
            [L, B] = (0, z.useState)(63),
            [K, M] = (0, z.useState)(201),
            [C, _] = (0, z.useState)(null),
            [R, O] = (0, z.useState)(0.1),
            [Z, I] = (0, z.useState)(0.1),
            [E, F] = (0, z.useState)(!1),
            [q, D] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            d && O((d.amount / 100) * j);
          }, [j, d]),
            (0, z.useEffect)(() => {
              m && I((m.amount / 100) * S);
            }, [S, m]);
          let getSolBalance = async () => {
            try {
              return (await a.getBalance(l, "confirmed")) / Y.LAMPORTS_PER_SOL;
            } catch (e) {
              return console.log("error getting balance: ", e), 0;
            }
          };
          async function displaytokentocombox(e, t) {
            if (e) {
              p([]);
              for (let e = 0; e < e9.length; e++)
                if (e9[e].isToken) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("div", {
                          className: "flex items-center",
                          children: [
                            (0, V.jsx)("span", {
                              className: "text-rose-600 text-xs ml-2",
                              children: e9[e].symbol,
                            }),
                            (0, V.jsx)("span", {
                              className: "text-stone-500 text-xs ml-2",
                              children: truncateString(e9[e].label, 16, 8, 8),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-rose-400 text-xs",
                          children: ["余额: ", e9[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: e9[e].label,
                    address: e9[e].address,
                    owner: e9[e].owner,
                    amount: e9[e].amount / Y.LAMPORTS_PER_SOL,
                    symbol: e9[e].symbol,
                    dec: e9[e].dec,
                  };
                  p((e) => [...e, t]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: ["Token - ", e9[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            e9[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: e9[e].label,
                    address: e9[e].address,
                    owner: e9[e].owner,
                    amount: e9[e].amount / Y.LAMPORTS_PER_SOL,
                    dec: e9[e].dec,
                  };
                  p((e) => [...e, t]);
                }
            } else {
              let e = await getSolBalance();
              f([]);
              let t = {
                value: 0,
                label: (0, V.jsxs)("div", {
                  className: "flex justify-between",
                  children: [
                    (0, V.jsx)("span", {
                      className: "text-gray-800",
                      children: "SOL",
                    }),
                    (0, V.jsxs)("span", {
                      className: "text-gray-400 text-xs",
                      children: ["余额:", e],
                    }),
                  ],
                }),
                mint: "SOL",
                address: "SOL",
                symbol: "SOL",
                amount: e,
              };
              f((e) => [...e, t]);
              for (let e = 0; e < e9.length; e++)
                if (e9[e].isToken) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: [e9[e].symbol, " - ", e9[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            e9[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: e9[e].label,
                    address: e9[e].address,
                    owner: e9[e].owner,
                    amount: e9[e].amount / Y.LAMPORTS_PER_SOL,
                    symbol: e9[e].symbol,
                    dec: e9[e].dec,
                  };
                  f((e) => [...e, t]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: ["Token - ", e9[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            e9[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: e9[e].label,
                    address: e9[e].address,
                    owner: e9[e].owner,
                    amount: e9[e].amount / Y.LAMPORTS_PER_SOL,
                    dec: e9[e].dec,
                  };
                  f((e) => [...e, t]);
                }
            }
          }
          let handleEnterbtnclick = async () => {
              let e, n, s, o, r;
              if (!t || !l) {
                console.log("钱包未连接"),
                  notify({ type: "error", message: "钱包未连接" });
                return;
              }
              (0, ed.kH)(t), (0, ed.lm)(a);
              let i = document.getElementById("openbookid"),
                c = null == i ? void 0 : i.value;
              if ("" === c) {
                notify({ type: "error", message: "请填写OpenBookID" });
                return;
              }
              if (!d || !m) {
                notify({ type: "error", message: "请选择基础代币和报价代币" });
                return;
              }
              if (0 === R || 0 === Z) {
                notify({
                  type: "error",
                  message: "请填写基础代币和报价代币的数量",
                });
                return;
              }
              let u = d.mint.toString(),
                x = d.dec;
              x || (x = 9), console.log("baseMintdec:", x);
              let g = d.symbol;
              "SOL" === m.mint.toString()
                ? ((e = "So11111111111111111111111111111111111111112"),
                  (n = 9),
                  (s = "WSOL"))
                : ((e = m.mint.toString()), (n = m.dec), (s = m.symbol));
              let p = new eL.WUB(es.H_, new Y.PublicKey(u), x, g, g),
                y = new eL.WUB(es.H_, new Y.PublicKey(e), n, s, s),
                f = new Y.PublicKey(c);
              console.log(R);
              let h = new (eX())(R).mul(new (eX())(Math.pow(10, x))),
                w = new (eX())(Z * Y.LAMPORTS_PER_SOL);
              if (
                (console.log("base", h.toString()),
                console.log("quote", w.toString()),
                console.log(h + "," + w),
                C && "" !== C)
              ) {
                let e = new Date(C),
                  t = e.getTime();
                o = Math.floor(new Date(t).getTime() / 1e3);
              } else {
                let e = Date.now();
                o = Math.floor(new Date(e).getTime() / 1e3);
              }
              console.log(o);
              let j = await util_getWalletTokenAccount(a, l);
              console.log(j);
              let k = getMarketAssociatedPoolKeys({
                baseToken: p,
                quoteToken: y,
                targetMarketId: f,
              });
              console.log(k),
                console.log(k.id.toString()),
                console.log(
                  (r = ammCreatePool({
                    startTime: o,
                    addBaseAmount: h,
                    addQuoteAmount: w,
                    baseToken: p,
                    quoteToken: y,
                    targetMarketId: f,
                    publicKey: l,
                    walletTokenAccounts: j,
                  }))
                ),
                b(!0);
              try {
                for (let e of await r)
                  if (e instanceof Y.Transaction) {
                    let n = Number("0.1"),
                      s = new Y.PublicKey(
                        "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                      );
                    e.add(
                      Y.SystemProgram.transfer({
                        fromPubkey: l,
                        toPubkey: s,
                        lamports: 1e9 * n,
                      })
                    ),
                      (e = setPublicGasfee(e));
                    let o = await t.signTransaction(e),
                      r = o.serialize(),
                      i = await a.sendRawTransaction(r, { skipPreflight: !0 });
                    console.log("交易完成2: ", i),
                      console.log("流动性池ID:", k.id.toString());
                    let c = {
                      addrTag: "account",
                      addrName: "池ID:",
                      addr1: k.id.toString(),
                      hxName: "交易哈希:",
                      hxAddr: i,
                    };
                    D(c), F(!0);
                  }
                notify({
                  type: "success",
                  message: "成功",
                  description: "交易已发送",
                });
              } catch (e) {
                notify({
                  type: "success",
                  message: "错误",
                  description: "交易失败",
                }),
                  console.log("err", e);
              } finally {
                b(!1);
              }
            },
            handleFocus = async () => {
              if (l) {
                if (!i) {
                  c(!0), p((e) => [...e, { label: "Loading..." }]);
                  let e = await gettoken_getTokenAccounts(l.toString());
                  if (e.result) {
                    if ((c(!0), console.log(e), 0 != e.result.total)) {
                      let t = [];
                      for (let a = 0; a < e.result.token_accounts.length; a++)
                        e9.push({
                          value: a,
                          label: e.result.token_accounts[a].mint,
                          address: e.result.token_accounts[a].address,
                          amount: e.result.token_accounts[a].amount,
                          owner: e.result.token_accounts[a].owner,
                        }),
                          t.push(e.result.token_accounts[a].mint);
                      let a = await gettoken_getMetadata(t);
                      l.toString();
                      let n = [];
                      if (a)
                        for (let e = 0; e < a.length; e++) {
                          let t = a[e].account,
                            l = a[e].onChainMetadata.metadata,
                            s =
                              a[e].onChainAccountInfo.accountInfo.data.parsed
                                .info;
                          l
                            ? n.push({
                                account: t,
                                isToken: !0,
                                symbol: l.data.symbol,
                                uri: l.data.uri,
                                updateAuthority: l.updateAuthority,
                                dec: s.decimals,
                              })
                            : n.push({
                                account: t,
                                isToken: !1,
                                symbol: "",
                                uri: "",
                              });
                        }
                      else
                        notify({ type: "error", message: "获取MetaData失败" });
                      for (let e = 0; e < e9.length; e++) {
                        let t = e9[e].label,
                          a = n.find((e) => e.account === t);
                        a &&
                          ((e9[e].isToken = a.isToken),
                          (e9[e].symbol = a.symbol),
                          (e9[e].uri = a.uri),
                          (e9[e].updateAuthority = a.updateAuthority),
                          (e9[e].dec = a.dec));
                      }
                      displaytokentocombox(!0);
                    } else displaytokentocombox(!0);
                  } else notify({ type: "error", message: "获取失败" });
                }
              } else
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先连接钱包",
                });
            },
            handleBJFocus = async () => {
              f((e) => [...e, { label: "加载中..." }]),
                displaytokentocombox(!1);
            };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      children: w("pool.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("pool.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: d,
                          onChange: (e) => {
                            u(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          isMulti: !1,
                          className: "text-black ",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: w("pool.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: m,
                          onChange: (e) => {
                            x(e);
                          },
                          onFocus: handleBJFocus,
                          options: y,
                          isMulti: !1,
                          className: "text-black ",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("pool.open"),
                      }),
                      (0, V.jsxs)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: [
                          (0, V.jsx)("input", {
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            id: "openbookid",
                            defaultValue: "",
                            style: { background: "#fff", color: "black" },
                          }),
                          (0, V.jsxs)("p", {
                            className: "text-stone-300 text-sm",
                            style: { color: "black" },
                            children: [
                              w("pool.notopen"),
                              "   ",
                              (0, V.jsx)(H(), {
                                href: "./market",
                                children: (0, V.jsx)("span", {
                                  className:
                                    "no-underline hover:underline decoration-1 text-blue-600",
                                  children: w("pool.notopencreate"),
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("pool.baseamount"),
                      }),
                      (0, V.jsxs)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "md:w-1/2",
                            children: [
                              (0, V.jsx)("input", {
                                type: "number",
                                className:
                                  "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                value: R,
                                onChange: (e) => {
                                  O(parseFloat(e.target.value));
                                },
                                style: { background: "#fff", color: "black" },
                              }),
                              (0, V.jsx)("span", {
                                className: "text-stone-300 text-sm",
                                children:
                                  d &&
                                  (0, V.jsxs)("span", {
                                    children: [
                                      w("pool.balance"),
                                      " ",
                                      d.amount,
                                      " ",
                                      d.symbol,
                                    ],
                                  }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("span", {
                            className: "md:w-1/2 tooltip w-full",
                            "data-tip": "".concat(j, "%"),
                            children: [
                              (0, V.jsx)("input", {
                                type: "range",
                                min: 1,
                                max: 100,
                                value: j,
                                className: "range",
                                id: "rangeInput1",
                                onChange: (e) => {
                                  let t = parseInt(e.target.value, 10);
                                  k(t);
                                },
                                style: { background: "#fff", color: "black" },
                              }),
                              (0, V.jsxs)("div", {
                                className:
                                  "w-full flex justify-between text-xs pl-2",
                                children: [
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      k(1);
                                    },
                                    style: { color: "black" },
                                    children: " 1",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      k(25);
                                    },
                                    style: { color: "black" },
                                    children: "25",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      k(50);
                                    },
                                    style: { color: "black" },
                                    children: "50",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      k(75);
                                    },
                                    style: { color: "black" },
                                    children: "75",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      k(100);
                                    },
                                    style: { color: "black" },
                                    children: "100",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("pool.quoteamount"),
                      }),
                      (0, V.jsxs)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "md:w-1/2",
                            children: [
                              (0, V.jsx)("input", {
                                type: "number",
                                className:
                                  " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                value: Z,
                                onChange: (e) => {
                                  I(parseFloat(e.target.value));
                                },
                                style: { background: "#fff", color: "black" },
                              }),
                              (0, V.jsx)("span", {
                                className: "text-stone-300 text-sm",
                                children:
                                  m &&
                                  (0, V.jsxs)("span", {
                                    children: [
                                      w("pool.balance"),
                                      " ",
                                      m.amount,
                                      "  ",
                                      m.symbol,
                                    ],
                                  }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("span", {
                            className: "md:w-1/2 tooltip w-full",
                            "data-tip": "".concat(S, "%"),
                            children: [
                              (0, V.jsx)("input", {
                                type: "range",
                                min: 1,
                                max: 100,
                                value: S,
                                className: "range",
                                id: "rangeInput2",
                                onChange: (e) => {
                                  let t = parseInt(e.target.value, 10);
                                  v(t);
                                },
                                style: { background: "#fff", color: "black" },
                              }),
                              (0, V.jsxs)("div", {
                                className:
                                  "w-full flex justify-between text-xs pl-2",
                                children: [
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      v(1);
                                    },
                                    style: { color: "black" },
                                    children: " 1",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      v(25);
                                    },
                                    style: { color: "black" },
                                    children: "25",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      v(50);
                                    },
                                    style: { color: "black" },
                                    children: "50",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      v(75);
                                    },
                                    style: { color: "black" },
                                    children: "75",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      v(100);
                                    },
                                    style: { color: "black" },
                                    children: "100",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ml-5",
                        style: { color: "black" },
                        children: w("pool.opentime"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)("input", {
                          type: "checkbox",
                          className: "toggle",
                          defaultChecked: !1,
                          onChange: (e) => {
                            let t = e.target.checked;
                            N(t);
                          },
                          style: { background: "#fff", color: "black" },
                        }),
                      }),
                    ],
                  }),
                  P
                    ? (0, V.jsx)("div", {
                        children: (0, V.jsxs)("div", {
                          className:
                            "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                          children: [
                            (0, V.jsxs)("div", {
                              className:
                                "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ml-5",
                              style: { color: "black" },
                              children: [w("pool.time"), " (UTC+8*)"],
                            }),
                            (0, V.jsx)("div", {
                              className: "max-w-md mx-auto px-10 my-2 w-full",
                              children: (0, V.jsx)(e7.Z, {
                                onChange: (e, t) => {
                                  _(t);
                                },
                                showTime: !0,
                              }),
                            }),
                          ],
                        }),
                      })
                    : "",
                  (0, V.jsx)("div", {
                    className:
                      "flex flex-col md:flex-row items-center space-x-3 w-[600px]",
                    children: (0, V.jsx)("div", {
                      className:
                        "flex flex-col md:w-2/3 max-w-md mx-auto px-10 my-2 items-center",
                      children: (0, V.jsxs)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: handleEnterbtnclick,
                        style: {
                          background: "#ff9815",
                          border: "none",
                          borderRadius: "5px 5px 5px 5px",
                          boxShadow: "0 4px 0 0 #db7a00",
                          padding: "10px 50px",
                          color: "#fff",
                        },
                        children: [w("repool.t1"), " "],
                      }),
                    }),
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: w("msgbox.fbtn") }),
                onClick: () => F(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: E,
                msgParam: q,
                handleCancel: () => {
                  F(!1);
                },
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var te = a(69282),
        tt = a.n(te);
      async function formatAmmKeysById_formatAmmKeysById(e) {
        let t = await ed.ZI.getAccountInfo(new Y.PublicKey(e));
        if (null === t) throw Error(" get id info error ");
        let a = eL.TRh.decode(t.data),
          l = a.marketId,
          n = await ed.ZI.getAccountInfo(l);
        if (null === n) throw Error(" get market info error");
        let s = eL.SsU.decode(n.data),
          o = a.lpMint,
          r = await ed.ZI.getAccountInfo(o);
        if (null === r) throw Error(" get lp mint info error");
        let i = eL.d_N.decode(r.data);
        return {
          id: e,
          baseMint: a.baseMint.toString(),
          quoteMint: a.quoteMint.toString(),
          lpMint: a.lpMint.toString(),
          baseDecimals: a.baseDecimal.toNumber(),
          quoteDecimals: a.quoteDecimal.toNumber(),
          lpDecimals: i.decimals,
          version: 4,
          programId: t.owner.toString(),
          authority: eL.ZpI.getAssociatedAuthority({
            programId: t.owner,
          }).publicKey.toString(),
          openOrders: a.openOrders.toString(),
          targetOrders: a.targetOrders.toString(),
          baseVault: a.baseVault.toString(),
          quoteVault: a.quoteVault.toString(),
          withdrawQueue: a.withdrawQueue.toString(),
          lpVault: a.lpVault.toString(),
          marketVersion: 3,
          marketProgramId: a.marketProgramId.toString(),
          marketId: a.marketId.toString(),
          marketAuthority: eL.IYM.getAssociatedAuthority({
            programId: a.marketProgramId,
            marketId: a.marketId,
          }).publicKey.toString(),
          marketBaseVault: s.baseVault.toString(),
          marketQuoteVault: s.quoteVault.toString(),
          marketBids: s.bids.toString(),
          marketAsks: s.asks.toString(),
          marketEventQueue: s.eventQueue.toString(),
          lookupTableAccount: Y.PublicKey.default.toString(),
        };
      }
      async function formatAmmKeysByIdA(e, t) {
        let a = await e.getAccountInfo(new Y.PublicKey(t));
        if (null === a) throw Error(" get id info error ");
        let l = eL.TRh.decode(a.data),
          n = l.marketId,
          s = await e.getAccountInfo(n);
        if (null === s) throw Error(" get market info error");
        let o = eL.SsU.decode(s.data),
          r = l.lpMint,
          i = await e.getAccountInfo(r);
        if (null === i) throw Error(" get lp mint info error");
        let c = eL.d_N.decode(i.data);
        return {
          id: t,
          baseMint: l.baseMint.toString(),
          quoteMint: l.quoteMint.toString(),
          lpMint: l.lpMint.toString(),
          baseDecimals: l.baseDecimal.toNumber(),
          quoteDecimals: l.quoteDecimal.toNumber(),
          lpDecimals: c.decimals,
          version: 4,
          programId: a.owner.toString(),
          authority: eL.ZpI.getAssociatedAuthority({
            programId: a.owner,
          }).publicKey.toString(),
          openOrders: l.openOrders.toString(),
          targetOrders: l.targetOrders.toString(),
          baseVault: l.baseVault.toString(),
          quoteVault: l.quoteVault.toString(),
          withdrawQueue: l.withdrawQueue.toString(),
          lpVault: l.lpVault.toString(),
          marketVersion: 3,
          marketProgramId: l.marketProgramId.toString(),
          marketId: l.marketId.toString(),
          marketAuthority: eL.IYM.getAssociatedAuthority({
            programId: l.marketProgramId,
            marketId: l.marketId,
          }).publicKey.toString(),
          marketBaseVault: o.baseVault.toString(),
          marketQuoteVault: o.quoteVault.toString(),
          marketBids: o.bids.toString(),
          marketAsks: o.asks.toString(),
          marketEventQueue: o.eventQueue.toString(),
          lookupTableAccount: Y.PublicKey.default.toString(),
        };
      }
      async function ammRemoveLiquidity(e) {
        let t = await formatAmmKeysById_formatAmmKeysById(e.targetPool);
        tt()(t, "cannot find the target pool"), console.log("target: ", t);
        let a = new eL.WUB(
            es.H_,
            new Y.PublicKey(t.lpMint),
            t.lpDecimals,
            "TO",
            "TO"
          ),
          l = new eL.dtM(a, e.removeAmount);
        console.log("amount: ", l);
        let n = (0, eL.Rl)(t),
          s = await eL.ZpI.makeRemoveLiquidityInstructionSimple({
            connection: ed.ZI,
            poolKeys: n,
            userKeys: {
              owner: e.publicKey,
              payer: e.publicKey,
              tokenAccounts: e.walletTokenAccounts,
            },
            amountIn: l,
            makeTxVersion: ed.qF,
          });
        return util_buildAndSendTx(s.innerTransactions);
      }
      async function ammV4MockPoolInfo_getTokenAccounts(e, t) {
        let a = await e.getTokenAccountsByOwner(t, { programId: es.H_ }),
          l = [];
        for (let { pubkey: e, account: t } of a.value)
          l.push({
            programId: es.H_,
            pubkey: e,
            accountInfo: eL.rqX.decode(t.data),
          });
        return l;
      }
      let ta = new Y.PublicKey("srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX");
      async function GetparsePoolInfo(e, t, a) {
        var l, n;
        console.log("tokenAccounts111");
        let s = await ammV4MockPoolInfo_getTokenAccounts(e, t);
        console.log("tokenAccounts", s),
          console.log("example to get pool info");
        let o = await e.getAccountInfo(new Y.PublicKey(a));
        if (!o) return;
        let r = eL.TRh.decode(o.data);
        console.log("222");
        let i = await eU.OpenOrders.load(e, r.openOrders, ta),
          c = 10 ** r.baseDecimal.toNumber(),
          d = 10 ** r.quoteDecimal.toNumber(),
          u = await e.getTokenAccountBalance(r.baseVault),
          m = await e.getTokenAccountBalance(r.quoteVault);
        console.log(r.baseNeedTakePnl.toNumber()),
          console.log(r.quoteNeedTakePnl.toNumber());
        let x = r.baseNeedTakePnl.toNumber() / c,
          g = r.quoteNeedTakePnl.toNumber() / d,
          p = i.baseTokenTotal.toNumber() / c,
          y = i.quoteTokenTotal.toNumber() / d,
          f =
            ((null === (l = u.value) || void 0 === l ? void 0 : l.uiAmount) ||
              0) +
            p -
            x,
          h =
            ((null === (n = m.value) || void 0 === n ? void 0 : n.uiAmount) ||
              0) +
            y -
            g,
          b = new (eX())(10).pow(r.baseDecimal),
          w = s.find((e) => e.accountInfo.mint.equals(r.lpMint));
        return (
          console.log(
            "SOL_USDC pool info:",
            "pool total base " + f,
            "pool total quote " + h,
            "base vault balance " + u.value.uiAmount,
            "quote vault balance " + m.value.uiAmount,
            "base tokens in openorders " + p,
            "quote tokens in openorders  " + y,
            "base token decimals " + r.baseDecimal.toNumber(),
            "quote token decimals " + r.quoteDecimal.toNumber(),
            "total lp " + r.lpReserve.div(b).toString(),
            "addedLpAmount " +
              ((null == w ? void 0 : w.accountInfo.amount.toNumber()) || 0) / c
          ),
          {
            base: f,
            quote: h,
            baseBalance: u.value.uiAmount,
            quoteBalance: m.value.uiAmount,
            baseOpenOrder: p,
            quoteOpenOrder: y,
            baseDec: r.baseDecimal.toNumber(),
            quoteDec: r.quoteDecimal.toNumber(),
            totalLP: r.lpReserve.div(b).toString(),
            LpAmount:
              ((null == w ? void 0 : w.accountInfo.amount.toNumber()) || 0) / c,
          }
        );
      }
      async function GetparsePoolInfo_NotLPVal(e, t) {
        var a, l;
        console.log("example to get pool info");
        let n = await e.getAccountInfo(new Y.PublicKey(t));
        if (!n) return;
        let s = eL.TRh.decode(n.data);
        console.log("222");
        let o = await eU.OpenOrders.load(e, s.openOrders, ta),
          r = 10 ** s.baseDecimal.toNumber(),
          i = 10 ** s.quoteDecimal.toNumber(),
          c = await e.getTokenAccountBalance(s.baseVault),
          d = await e.getTokenAccountBalance(s.quoteVault),
          u = s.baseNeedTakePnl.toNumber() / r,
          m = s.quoteNeedTakePnl.toNumber() / i,
          x = o.baseTokenTotal.toNumber() / r,
          g = o.quoteTokenTotal.toNumber() / i,
          p =
            ((null === (a = c.value) || void 0 === a ? void 0 : a.uiAmount) ||
              0) +
            x -
            u,
          y =
            ((null === (l = d.value) || void 0 === l ? void 0 : l.uiAmount) ||
              0) +
            g -
            m,
          f = new (eX())(10).pow(s.baseDecimal);
        return (
          console.log(
            "SOL_USDC pool info:",
            "pool total base " + p,
            "pool total quote " + y,
            "base vault balance " + c.value.uiAmount,
            "quote vault balance " + d.value.uiAmount,
            "base tokens in openorders " + x,
            "quote tokens in openorders  " + g,
            "base token decimals " + s.baseDecimal.toNumber(),
            "quote token decimals " + s.quoteDecimal.toNumber(),
            "total lp " + s.lpReserve.div(f).toString()
          ),
          {
            base: p,
            quote: y,
            baseBalance: c.value.uiAmount,
            quoteBalance: d.value.uiAmount,
            baseOpenOrder: x,
            quoteOpenOrder: g,
            baseDec: s.baseDecimal.toNumber(),
            quoteDec: s.quoteDecimal.toNumber(),
            totalLP: s.lpReserve.div(f).toString(),
          }
        );
      }
      var tl = a(48764).Buffer;
      let RemoveView = (e) => {
        let {} = e,
          t = (0, Q.O)(),
          { connection: a } = (0, U.R)(),
          {
            publicKey: l,
            sendTransaction: s,
            signMessage: o,
            signTransaction: r,
            signAllTransactions: i,
          } = (0, Q.O)(),
          { t: c } = (0, G.$G)("common"),
          [d, u] = (0, z.useState)(!1),
          [m, x] = (0, z.useState)(!1),
          [g, p] = (0, z.useState)(!1),
          [y, f] = (0, z.useState)(0),
          [h, b] = (0, z.useState)(100),
          [w, j] = (0, z.useState)(""),
          [k, S] = (0, z.useState)(""),
          [v, P] = (0, z.useState)(0),
          [N, T] = (0, z.useState)(""),
          [A, L] = (0, z.useState)(0),
          [B, K] = (0, z.useState)(0.01),
          [M, C] = (0, z.useState)("");
        (0, z.useEffect)(() => {
          g && (f((A / 100) * h), K((v / 100) * h));
        }, [h, A, v]);
        let [_, R] = (0, z.useState)(!1),
          [O, Z] = useMessageBoxPam({
            addrTag: "",
            addrName: "",
            addr1: "",
            hxName: "",
            hxAddr: "",
          }),
          getPoolAssociatedId = (e) => {
            let t = ed.Eq.AmmV4,
              [a] = Y.PublicKey.findProgramAddressSync(
                [
                  t.toBuffer(),
                  e.toBuffer(),
                  tl.from("amm_associated_seed", "utf-8"),
                ],
                t
              );
            return a;
          },
          handleCheckClick = async () => {
            if (!l) {
              notify({ type: "error", message: "钱包未连接" });
              return;
            }
            let e = document.getElementById("tokenaddr"),
              s = null == e ? void 0 : e.value;
            if ("" === s) {
              notify({ type: "error", message: "请输入查询地址" });
              return;
            }
            if (((0, ed.kH)(t), (0, ed.lm)(a), m)) {
              C(""), u(!0);
              try {
                let e = new Y.PublicKey(s),
                  t = getPoolAssociatedId(e);
                console.log(t.toString());
                let o = await formatAmmKeysById_formatAmmKeysById(t.toString());
                if (o) {
                  (n = o.lpDecimals),
                    console.log("lpDec:", n),
                    j(""),
                    S(""),
                    T(""),
                    L(0),
                    K(0),
                    P(0),
                    p(!1),
                    console.log("targetPoolInfo", o);
                  let {
                    base: e,
                    quote: s,
                    baseBalance: r,
                    quoteBalance: i,
                    baseOpenOrder: c,
                    quoteOpenOrder: d,
                    baseDec: m,
                    quoteDec: x,
                    totalLP: g,
                    LpAmount: y,
                  } = await GetparsePoolInfo(a, l, t.toString());
                  u(!1),
                    j("".concat(e.toFixed(3), "/").concat(s.toFixed(3))),
                    S("".concat(r.toFixed(3), "/").concat(i.toFixed(3))),
                    T("".concat(c, "/").concat(d)),
                    L(y),
                    K(i),
                    P(i),
                    C(o.id),
                    p(!0);
                } else {
                  notify({ type: "error", message: "没有查询到池子信息" });
                  return;
                }
                u(!1);
              } catch (e) {
                u(!1),
                  console.log("err", e),
                  notify({ type: "error", message: "查询错误" });
                return;
              }
            } else {
              C(""), u(!0);
              try {
                j(""), S(""), T(""), L(0), K(0), P(0), p(!1);
                let e = await formatAmmKeysById_formatAmmKeysById(s);
                if (e) {
                  (n = e.lpDecimals),
                    console.log("lpDec:", n),
                    console.log("targetPoolInfo", e);
                  let {
                    base: t,
                    quote: o,
                    baseBalance: r,
                    quoteBalance: i,
                    baseOpenOrder: c,
                    quoteOpenOrder: d,
                    baseDec: m,
                    quoteDec: x,
                    totalLP: g,
                    LpAmount: y,
                  } = await GetparsePoolInfo(a, l, s);
                  console.log("LpAmount", y),
                    u(!1),
                    j("".concat(t.toFixed(3), "/").concat(o.toFixed(3))),
                    S("".concat(r.toFixed(3), "/").concat(i.toFixed(3))),
                    T("".concat(c, "/").concat(d)),
                    L(y),
                    K(i),
                    P(i),
                    C(e.id),
                    p(!0);
                } else {
                  notify({ type: "error", message: "没有查询到池子信息" });
                  return;
                }
              } catch (e) {
                u(!1),
                  console.log("查询错误", e),
                  notify({ type: "error", message: "查询错误" });
                return;
              }
            }
          },
          handleRemoveClick = async () => {
            let e;
            if (!l) {
              notify({ type: "error", message: "钱包未连接" });
              return;
            }
            if ("" === M) {
              notify({ type: "error", message: "请先查询池子信息" });
              return;
            }
            (0, ed.kH)(t),
              (0, ed.lm)(a),
              console.log(M),
              console.log("lpDec:", n);
            let s = y * Math.pow(10, n);
            console.log("removeAmount:", s);
            let o = await util_getWalletTokenAccount(a, t.publicKey);
            (e = ammRemoveLiquidity({
              removeAmount: s,
              targetPool: M,
              walletTokenAccounts: o,
              publicKey: l,
            })),
              u(!0);
            try {
              for (let n of await e)
                if (n instanceof Y.Transaction) {
                  let e = Number("0.1"),
                    s = new Y.PublicKey(
                      "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                    );
                  n.add(
                    Y.SystemProgram.transfer({
                      fromPubkey: l,
                      toPubkey: s,
                      lamports: 1e9 * e,
                    })
                  ),
                    (n = setPublicGasfee(n));
                  let o = await t.signTransaction(n),
                    r = o.serialize(),
                    i = await a.sendRawTransaction(r, { skipPreflight: !0 }),
                    c = {
                      addrTag: "",
                      addrName: "",
                      addr1: "",
                      hxName: "交易哈希:",
                      hxAddr: i,
                    };
                  Z(c), R(!0);
                }
              notify({
                type: "success",
                message: "成功",
                description: "交易已发送",
              });
            } catch (e) {
              notify({
                type: "success",
                message: "错误",
                description: "交易失败",
              }),
                console.log("err", e);
            } finally {
              u(!1);
            }
          };
        return (0, V.jsxs)("div", {
          className: "flex flex-col md:hero mx-auto p-1 md:w-full",
          children: [
            (0, V.jsxs)("div", {
              className: "md:hero-content flex flex-col",
              children: [
                (0, V.jsx)("div", {
                  className: "mt-6",
                  children: (0, V.jsx)("h1", {
                    className:
                      "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                    children: c("repool.t1"),
                  }),
                }),
                (0, V.jsxs)("div", {
                  className:
                    "flex flex-col md:max-w-2xl md:flex-row  items-center  space-x-2 text-left md:w-[600px]",
                  children: [
                    (0, V.jsxs)("div", {
                      className:
                        "md:w-1/3 text-center text-slate-400 text-base my-2",
                      style: { color: "black" },
                      children: [" ", c(m ? "repool.lpid2" : "repool.lpid")],
                    }),
                    (0, V.jsxs)("div", {
                      className: "md:w-2/3 m-auto text-sm w-full",
                      children: [
                        m
                          ? (0, V.jsx)("input", {
                              id: "tokenaddr",
                              className:
                                "w-full mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 text-sm",
                              placeholder: c("repool.lpidin2"),
                              style: { background: "#fff", color: "black" },
                            })
                          : (0, V.jsx)("input", {
                              id: "tokenaddr",
                              className:
                                "w-full mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 text-sm",
                              placeholder: c("repool.lpidin"),
                              style: { background: "#fff", color: "black" },
                            }),
                        m
                          ? (0, V.jsxs)("p", {
                              style: { color: "black" },
                              children: [
                                c("repool.lpid2wj"),
                                "  ",
                                (0, V.jsxs)(H(), {
                                  href: "",
                                  children: [
                                    " ",
                                    (0, V.jsx)("span", {
                                      className: "text-sky-500",
                                      onClick: () => {
                                        x(!m);
                                      },
                                      children: c("repool.lpid2wj2"),
                                    }),
                                  ],
                                }),
                                " ",
                                c("repool.lpidcheck"),
                              ],
                            })
                          : (0, V.jsxs)("p", {
                              style: { color: "black" },
                              children: [
                                c("repool.lpidwj"),
                                " ",
                                (0, V.jsxs)(H(), {
                                  href: "",
                                  children: [
                                    " ",
                                    (0, V.jsx)("span", {
                                      className: "text-sky-500",
                                      onClick: () => {
                                        x(!m);
                                      },
                                      children: c("repool.lpidwj2"),
                                    }),
                                  ],
                                }),
                                " ",
                                c("repool.lpidcheck"),
                                " ",
                              ],
                            }),
                      ],
                    }),
                  ],
                }),
                (0, V.jsx)("div", {
                  className: "flex flex-col w-50",
                  children: (0, V.jsx)("button", {
                    className:
                      "px-10 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                    onClick: handleCheckClick,
                    style: {
                      background: "#ff9815",
                      border: "none",
                      borderRadius: "5px 5px 5px 5px",
                      boxShadow: "0 4px 0 0 #db7a00",
                      padding: "10px 50px",
                      color: "#fff",
                    },
                    children: c("repool.lpidcheck"),
                  }),
                }),
                g &&
                  (0, V.jsx)("div", {
                    className: "card justify-center glass md:w-[500px]",
                    children: (0, V.jsxs)("div", {
                      className: "card-body flex justify-start",
                      children: [
                        (0, V.jsxs)("h2", {
                          className: "card-title flex justify-center",
                          children: [c("repool.lpinfo"), " "],
                        }),
                        (0, V.jsxs)("div", {
                          className: "grid grid-cols-2 gap-2",
                          children: [
                            (0, V.jsx)("div", {
                              className: "flex justify-end mr-4",
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-start",
                              children: c("repool.lpinfoty"),
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-end mr-4",
                              children: c("repool.lpinfototal"),
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-start",
                              children: w,
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-end mr-4",
                              children: c("repool.lpinfobalance"),
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-start",
                              children: k,
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-end mr-4",
                              children: c("repool.lpinfoorder"),
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-start",
                              children: N,
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-end mr-4",
                              children: c("repool.lpinfolpamount"),
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-start",
                              children: A,
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-end mr-4 mt-4",
                              children: c("repool.lpinfolpget"),
                            }),
                            (0, V.jsx)("div", {
                              className: "flex justify-start mt-4",
                              children: B,
                            }),
                          ],
                        }),
                        (0, V.jsx)("div", {
                          children: (0, V.jsx)("div", {
                            className:
                              "flex md:flex-row items-center justify-start",
                            children: (0, V.jsxs)("div", {
                              className:
                                "flex justify-start mx-left md:w-2/1 mt-2 w-full items-center",
                              children: [
                                (0, V.jsxs)("div", {
                                  className: "flex flex-col md:w-1/2",
                                  children: [
                                    (0, V.jsx)("input", {
                                      type: "number",
                                      className:
                                        "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                      value: y,
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        t <= A
                                          ? (f(parseFloat(t)), K((v / A) * t))
                                          : (f(A), K(v));
                                      },
                                    }),
                                    (0, V.jsx)("span", {
                                      className: "text-stone-300 text-sm",
                                      children: (0, V.jsxs)("span", {
                                        children: [
                                          c("repool.lpinfolpremove"),
                                          " ",
                                          A,
                                        ],
                                      }),
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)("span", {
                                  className:
                                    "flex flex-col mx-left md:w-1/2 tooltip",
                                  "data-tip": "".concat(h, "%"),
                                  children: [
                                    (0, V.jsx)("input", {
                                      type: "range",
                                      min: 1,
                                      max: 100,
                                      value: h,
                                      className: "range",
                                      id: "rangeInput1",
                                      onChange: (e) => {
                                        let t = parseInt(e.target.value, 10);
                                        b(t);
                                      },
                                    }),
                                    (0, V.jsxs)("div", {
                                      className:
                                        "w-full flex justify-between text-xs pl-2",
                                      children: [
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            b(1);
                                          },
                                          children: " 1",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            b(25);
                                          },
                                          children: "25",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            b(50);
                                          },
                                          children: "50",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            b(75);
                                          },
                                          children: "75",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            b(100);
                                          },
                                          children: "100",
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                          }),
                        }),
                        (0, V.jsx)("div", {
                          className: "card-actions justify-end",
                          children: (0, V.jsx)("button", {
                            className:
                              "btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                            onClick: handleRemoveClick,
                            children: c("repool.enter"),
                          }),
                        }),
                      ],
                    }),
                  }),
              ],
            }),
            (0, V.jsx)(ef.Z, {
              tooltip: (0, V.jsx)("div", { children: c("msgbox.fbtn") }),
              onClick: () => R(!0),
            }),
            (0, V.jsx)(msgbox, {
              isModalOpen: _,
              msgParam: O,
              handleCancel: () => {
                R(!1);
              },
            }),
            d && (0, V.jsx)(components_Loading, {}),
          ],
        });
      };
      var tn = a(76623),
        ts = a(84960),
        to = a(70302),
        tr = a(31059),
        ti = a(5789),
        tc = a(35297),
        td = a(55673),
        tu = a(36155),
        tm = a(74048),
        tx = a(2307);
      async function swapOnlyAmmA(e, t, a, l, n, s, o) {
        let r;
        let i = (0, eL.Rl)(a),
          { amountOut: c, minAmountOut: d } = eL.ZpI.computeAmountOut({
            poolKeys: i,
            poolInfo: await eL.ZpI.fetchInfo({ connection: e, poolKeys: i }),
            amountIn: s.inputTokenAmount,
            currencyOut: s.outputToken,
            slippage: s.slippage,
          }),
          { innerTransactions: u } = await eL.ZpI.makeSwapInstructionSimple({
            connection: e,
            poolKeys: i,
            userKeys: {
              tokenAccounts: s.walletTokenAccounts,
              owner: s.wallet.publicKey,
            },
            amountIn: s.inputTokenAmount,
            amountOut: d,
            fixedSide: o,
            makeTxVersion: ed.qF,
          });
        return (
          (console.log(
            "amountOut:",
            c.toFixed(),
            "  minAmountOut: ",
            d.toFixed()
          ),
          n)
            ? (r =
                0.01 *
                Number(s.inputTokenAmount.toFixed()) *
                Y.LAMPORTS_PER_SOL) %
                1 !=
                0 && (r > 0.0025 && (r = 0.0025), (r = Math.floor(r)))
            : (r = 0.01 * Number(c.toFixed()) * Y.LAMPORTS_PER_SOL) % 1 != 0 &&
              (r > 0.0025 && (r = 0.0025), (r = Math.floor(r))),
          { txids: await buildAndSendTxA(e, t, r, u) }
        );
      }
      async function swapOnlyAmmB(e, t, a, l, n) {
        let s = (0, eL.Rl)(a),
          { amountOut: o, minAmountOut: r } = eL.ZpI.computeAmountOut({
            poolKeys: s,
            poolInfo: l,
            amountIn: n.inputTokenAmount,
            currencyOut: n.outputToken,
            slippage: n.slippage,
          });
        return (
          console.log(
            "amountOut:",
            o.toFixed(),
            "  minAmountOut: ",
            r.toFixed()
          ),
          console.log(n.inputTokenAmount.toFixed()),
          Number(n.inputTokenAmount.toFixed()) / Number(o.toFixed())
        );
      }
      var tg = a(48764).Buffer;
      let tp = [],
        ty = "So11111111111111111111111111111111111111112",
        MarketManageView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: d,
              signTransaction: u,
              signAllTransactions: m,
            } = (0, Q.O)(),
            [x, g] = (0, z.useState)(!1),
            { t: p } = (0, G.$G)("common"),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(""),
            [w, j] = (0, z.useState)(""),
            [k, S] = (0, z.useState)(""),
            [v, P] = (0, z.useState)(100),
            [N, T] = (0, z.useState)(100),
            [A, L] = (0, z.useState)(0),
            [B, K] = (0, z.useState)(0),
            [M, C] = (0, z.useState)(!1),
            [_, R] = (0, z.useState)(""),
            [O, Z] = (0, z.useState)(""),
            [I, E] = (0, z.useState)(0),
            [F, q] = (0, z.useState)(""),
            [D, W] = (0, z.useState)(0),
            [X, J] = (0, z.useState)(0.01),
            [$, ee] = (0, z.useState)(1),
            [et, ea] = (0, z.useState)(2),
            [el, eo] = (0, z.useState)(!1),
            [er, ei] = (0, z.useState)("0.1"),
            [ec, eu] = (0, z.useState)("1000"),
            [em, ex] = (0, z.useState)("1000"),
            [eg, ep] = (0, z.useState)("100"),
            [ey, eh] = (0, z.useState)(""),
            [ew, eS] = (0, z.useState)("49"),
            [ev, eP] = (0, z.useState)("0.0001"),
            [eN, eT] = (0, z.useState)(!1),
            [eA, eB] = (0, z.useState)(!1),
            [eK, eM] = (0, z.useState)(""),
            [eC, e_] = (0, z.useState)(""),
            [eR, eO] = (0, z.useState)(""),
            [eZ, eI] = (0, z.useState)(0),
            [eE, eF] = (0, z.useState)(""),
            [eq, eD] = (0, z.useState)(!1),
            [eW, eH] = (0, z.useState)(!1),
            [eQ, eU] = (0, z.useState)(0),
            [eG, eX] = (0, z.useState)(0),
            [eY, eJ] = (0, z.useState)(!1),
            [e2, e5] = (0, z.useState)(1),
            [e6, e3] = (0, z.useState)(3e-5),
            e4 = (0, z.useRef)(e6),
            [e7, e9] = (0, z.useState)("Demo"),
            [te, tt] = (0, z.useState)(
              "https://api.dicebear.com/7.x/miniavs/svg?seed=0"
            ),
            [ta, tl] = (0, z.useState)(
              "5LNruZKwDvQex4aJA8JgYLw5ZYFGpodXBxZErkEbp6Co"
            ),
            tf = [
              "https://mainnet.helius-rpc.com/?api-key=3fa4e1fa-273b-441b-a7c1-285b36e43f74",
            ],
            [th, tb] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            if (((e4.current = e6), el)) {
              let e = setInterval(() => {
                handleRefAccInfo();
              }, 8e3);
              return () => clearInterval(e);
            }
          }, [el, e2]);
          let setEmvModeProc = (e) => {
            e ? (0, ed.wv)(1) : (0, ed.wv)(-1), eJ(e);
          };
          (0, z.useEffect)(() => {
            L((D / 100) * v), K((D / 100) * N), J((I / 100) * v);
          }, [v, D, I, N]);
          let addSoftLog = (e) => {
              eh((t) => t + e + "\n");
            },
            { Paragraph: tw, Text: tj } = ek.default,
            { TextArea: tk } = e$.default;
          async function buyproc(e, t, a) {
            let l, n;
            (0, ed.sE)(parseFloat(ev)),
              i.quoteMint === ty ? ((l = o), (n = s)) : ((l = s), (n = o)),
              console.log(l);
            let d = l.decimals,
              u = a * Math.pow(10, d),
              m = new eL.dtM(l, Math.floor(u)),
              x = Number(ew),
              g = new eL.gGi(x, 100);
            console.log("111");
            let p = await util_getWalletTokenAccount(e, t.publicKey);
            try {
              await swapOnlyAmmA(
                c,
                t,
                i,
                r,
                !0,
                {
                  outputToken: n,
                  targetPool: "",
                  inputTokenAmount: m,
                  slippage: g,
                  walletTokenAccounts: p,
                  wallet: t,
                },
                "in"
              ).then((e) => {
                let { txids: l } = e;
                console.log("txids", l),
                  addSoftLog(
                    "买入成功, 钱包: "
                      .concat(
                        truncateString(t.publicKey.toString(), 16, 8, 8),
                        " 数量:"
                      )
                      .concat(a, ", 交易哈希: ")
                      .concat(l)
                  );
              });
            } catch (e) {
              addSoftLog("买入失败: ".concat(e));
            }
          }
          async function saleproc(e, t, a) {
            let l, n;
            (0, ed.sE)(parseFloat(ev)),
              i.quoteMint === ty ? ((l = s), (n = o)) : ((l = o), (n = s));
            let d = l.decimals,
              u = a * Math.pow(10, d),
              m = new eL.dtM(l, Math.floor(u)),
              x = Number(ew),
              g = new eL.gGi(x, 100),
              p = await util_getWalletTokenAccount(e, t.publicKey);
            try {
              await swapOnlyAmmA(
                c,
                t,
                i,
                r,
                !1,
                {
                  outputToken: n,
                  targetPool: "",
                  inputTokenAmount: m,
                  slippage: g,
                  walletTokenAccounts: p,
                  wallet: t,
                },
                "in"
              ).then((e) => {
                let { txids: l } = e;
                console.log("txids", l),
                  addSoftLog(
                    "卖出成功, 钱包: "
                      .concat(
                        truncateString(t.publicKey.toString(), 16, 8, 8),
                        " 数量:"
                      )
                      .concat(a, ", 交易哈希: ")
                      .concat(l)
                  );
              });
            } catch (e) {
              addSoftLog("卖出失败: ".concat(e));
            }
          }
          function getRandomFloat(e, t) {
            return Math.random() * (t - e) + e;
          }
          let handlebuy = async () => {
              addSoftLog("执行一键买入"), console.log("buy");
              let e = parseFloat(er),
                t = Number(ec);
              if (y.length > 0)
                for (let a = 0; a < y.length; a++) {
                  let l = y[a];
                  if (l.checked)
                    try {
                      if (1 === $)
                        l.sol > e &&
                          (await buyproc(l.connect, l.wallet, e),
                          console.log(
                            "".concat(l.publickey, "买入: ").concat(e, " SOL")
                          ),
                          await (0, ed._v)(t));
                      else if (2 === $) {
                        e > 100 && (e = 100);
                        let a = ((l.sol - 0.02) / 100) * e;
                        l.sol - 0.02 > a
                          ? (await buyproc(l.connect, l.wallet, a),
                            await (0, ed._v)(t),
                            console.log(
                              ""
                                .concat(l.publickey, "买入%: ")
                                .concat(e, " SOL")
                            ))
                          : addSoftLog(
                              "钱包: ".concat(
                                truncateString(
                                  l.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " %SOL小于0.02 跳过"
                              )
                            );
                      } else {
                        let a = document.getElementById("ranamount2"),
                          n = Number(null == a ? void 0 : a.value),
                          s = getRandomFloat(e, n);
                        l.sol > s &&
                          (await buyproc(l.connect, l.wallet, s),
                          await (0, ed._v)(t),
                          console.log(
                            ""
                              .concat(l.publickey, "买入随机: ")
                              .concat(s, " SOL")
                          ));
                      }
                    } catch (e) {
                      addSoftLog("买入构造失败: ".concat(e));
                    }
                }
            },
            handlesale = async () => {
              addSoftLog("执行一键卖出"), console.log("sale");
              let e = parseFloat(eg),
                t = Number(em);
              if (y.length > 0)
                for (let a = 0; a < y.length; a++) {
                  let l = y[a];
                  if (l.checked)
                    try {
                      if (1 === et)
                        l.mint >= e
                          ? (await saleproc(l.connect, l.wallet, e),
                            await (0, ed._v)(t),
                            console.log(
                              "".concat(l.publickey, "卖出: ").concat(e, " ")
                            ))
                          : addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 代币不足 "
                                )
                                .concat(e, "跳过")
                            );
                      else {
                        e > 100 && (e = 100);
                        let a = (l.mint / 100) * e;
                        l.mint >= a
                          ? a > 0 &&
                            (console.log(a),
                            await saleproc(l.connect, l.wallet, a),
                            await (0, ed._v)(t),
                            console.log(
                              "".concat(l.publickey, "卖出%: ").concat(a, " ")
                            ))
                          : addSoftLog(
                              "钱包: ".concat(
                                truncateString(
                                  l.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " %代币不足跳过"
                              )
                            );
                      }
                    } catch (e) {
                      addSoftLog("卖出构造失败: ".concat(e));
                    }
                }
            },
            handlebuyYibu = async () => {
              console.log("buy"), addSoftLog("执行暴力买入");
              let e = parseFloat(er);
              if (y.length > 0) {
                let t = [];
                for (let a = 0; a < y.length; a++) {
                  let l = y[a];
                  if (l.checked) {
                    let a = (async () => {
                      try {
                        if (1 === $)
                          l.sol > e &&
                            (await buyproc(l.connect, l.wallet, e),
                            console.log(
                              "".concat(l.publickey, "买入: ").concat(e, " SOL")
                            ));
                        else if (2 === $) {
                          e > 100 && (e = 100);
                          let t = ((l.sol - 0.02) / 100) * e;
                          l.sol - 0.02 > t
                            ? (await buyproc(l.connect, l.wallet, t),
                              console.log(
                                ""
                                  .concat(l.publickey, "买入%: ")
                                  .concat(e, " SOL")
                              ))
                            : addSoftLog(
                                "钱包: ".concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " %SOL小于0.02 跳过"
                                )
                              );
                        } else {
                          let t = document.getElementById("ranamount2"),
                            a = Number(null == t ? void 0 : t.value),
                            n = getRandomFloat(e, a);
                          l.sol > n &&
                            (await buyproc(l.connect, l.wallet, n),
                            console.log(
                              ""
                                .concat(l.publickey, "买入随机: ")
                                .concat(n, " SOL")
                            ));
                        }
                      } catch (e) {
                        addSoftLog("买入构造失败: ".concat(e));
                      }
                    })();
                    t.push(a);
                  }
                }
                await Promise.all(t);
              }
            },
            handlesaleYibu = async () => {
              addSoftLog("执行暴力卖出"), console.log("sale");
              let e = parseFloat(eg);
              if (y.length > 0) {
                let t = [];
                for (let a = 0; a < y.length; a++) {
                  let l = y[a];
                  if (l.checked) {
                    let a = (async () => {
                      try {
                        if (1 === et)
                          l.mint >= e
                            ? (await saleproc(l.connect, l.wallet, e),
                              console.log(
                                "".concat(l.publickey, "卖出: ").concat(e, " ")
                              ))
                            : addSoftLog(
                                "钱包: "
                                  .concat(
                                    truncateString(
                                      l.wallet.publicKey.toString(),
                                      16,
                                      8,
                                      8
                                    ),
                                    " 代币不足 "
                                  )
                                  .concat(e, "跳过")
                              );
                        else {
                          e > 100 && (e = 100);
                          let t = (l.mint / 100) * e;
                          l.mint >= t && t > 0
                            ? (console.log(t),
                              await saleproc(l.connect, l.wallet, t),
                              console.log(
                                "".concat(l.publickey, "卖出%: ").concat(t, " ")
                              ))
                            : addSoftLog(
                                "钱包: ".concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " %代币不足跳过"
                                )
                              );
                        }
                      } catch (e) {
                        addSoftLog("卖出构造失败: ".concat(e));
                      }
                    })();
                    t.push(a);
                  }
                }
                await Promise.all(t);
              }
            };
          async function getAllAccByMint(e, t) {
            let a = await e.getParsedProgramAccounts(es.H_, {
              filters: [{ dataSize: 165 }, { memcmp: { offset: 0, bytes: t } }],
            });
            return a;
          }
          function compareByTokenAmount(e, t) {
            let a = parseFloat(e.account.data.parsed.info.tokenAmount.uiAmount),
              l = parseFloat(t.account.data.parsed.info.tokenAmount.uiAmount);
            return a > l ? -1 : a < l ? 1 : 0;
          }
          let handlechibilist = async () => {
            if (!l) {
              notify({ type: "error", message: "请先连接钱包" });
              return;
            }
            if (!i) {
              notify({ type: "error", message: "请先设置池子信息!" });
              return;
            }
            let e = document.getElementById("useramount"),
              t = Number(null == e ? void 0 : e.value),
              n = document.getElementById("notself"),
              o = null == n ? void 0 : n.checked,
              r = document.getElementById("notblack"),
              c = null == r ? void 0 : r.checked,
              d = i.authority,
              u = new Y.PublicKey(i.baseMint),
              m = [];
            b("");
            let x = await getAllAccByMint(a, u);
            x.sort(compareByTokenAmount), console.log(tp);
            for (let e = 0; e < x.length; e++) {
              let l = x[e].account.data.parsed.info;
              if (
                !(
                  o &&
                  (function (e) {
                    for (let t = 0; t < y.length; t++) {
                      let a = y[t];
                      if (a.wallet.publicKey.toString() === e) return !0;
                    }
                    return !1;
                  })(l.owner)
                )
              ) {
                if (0 === t)
                  l.owner === d
                    ? m.push(
                        truncateString(l.owner, 16, 8, 8) +
                          "(RaydiumPool)/" +
                          l.tokenAmount.uiAmount
                      )
                    : m.push(l.owner + "/" + l.tokenAmount.uiAmount);
                else {
                  let e = Number(l.tokenAmount.uiAmount);
                  if (e > t) {
                    if (c) {
                      if (
                        (function (e) {
                          for (let t = 0; t < tp.length; t++)
                            if (e === tp[t]) return !0;
                          return !1;
                        })(l.owner)
                      )
                        continue;
                      if (l.owner !== d) {
                        let e = new Y.PublicKey(l.owner),
                          t = await (0, en.Am)(s.mint, e);
                        try {
                          if ((await (0, eV.D0)(a, t)).isFrozen) {
                            tp.push(l.owner);
                            continue;
                          }
                        } catch (e) {
                          e instanceof ez.We ||
                            e instanceof ez.Or ||
                            console.log(e);
                        }
                      }
                    }
                    l.owner === d
                      ? m.push(
                          truncateString(l.owner, 16, 8, 8) +
                            "(RaydiumPool)/" +
                            l.tokenAmount.uiAmount
                        )
                      : m.push(l.owner + "/" + l.tokenAmount.uiAmount);
                  }
                }
              }
            }
            let g = m.join("\n");
            b(g), eX(m.length);
          };
          async function initPoolInfo(e, t) {
            console.log("池子初始化"),
              console.log("nowTagetPool", (i = await formatAmmKeysByIdA(e, t))),
              console.log("002"),
              (s = new eL.WUB(
                es.H_,
                new Y.PublicKey(i.baseMint),
                i.baseDecimals,
                "B",
                "B"
              )),
              (o = new eL.WUB(
                es.H_,
                new Y.PublicKey(i.quoteMint),
                i.quoteDecimals,
                "Q",
                "Q"
              )),
              console.log("003");
            let a = (0, eL.Rl)(i);
            console.log("004"),
              console.log(
                "nowPoolInfo:",
                (r = await eL.ZpI.fetchInfo({ connection: e, poolKeys: a }))
              ),
              console.log("池子初始化成功");
          }
          async function setPoolInfo(e) {
            let t;
            (c = new Y.Connection(
              "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
            )),
              await initPoolInfo(c, e),
              R(""),
              Z(""),
              q(""),
              W(0),
              J(0),
              E(0);
            try {
              (t = await GetparsePoolInfo(c, l, e)),
                R("".concat(t.base.toFixed(3), "/").concat(t.quote.toFixed(3))),
                Z(
                  ""
                    .concat(t.baseBalance.toFixed(3), "/")
                    .concat(t.quoteBalance.toFixed(3))
                ),
                q("".concat(t.baseOpenOrder, "/").concat(t.quoteOpenOrder)),
                W(t.LpAmount),
                J(t.quoteBalance),
                E(t.quoteBalance);
            } catch (e) {
              console.log("err: ", e);
            }
            return eB(!0), g(!1), t;
          }
          let handleSetPool = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              g(!0);
              let e = document.getElementById("pool"),
                t = null == e ? void 0 : e.value;
              if (eq) {
                g(!0);
                try {
                  let e = await queryLpPair(
                    t,
                    "So11111111111111111111111111111111111111112"
                  );
                  if ((console.log("thepoolId:", e), e)) {
                    if (e.Raydium_LiquidityPoolv4.length > 0) {
                      if (e.Raydium_LiquidityPoolv4.length <= 1) {
                        let t;
                        console.log("只有1个池子");
                        let a = e.Raydium_LiquidityPoolv4[0].pubkey;
                        if ((await setPoolInfo(a), i.quoteMint === ty))
                          t = i.baseMint;
                        else if (i.baseMint === ty) t = i.quoteMint;
                        else {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "当前交易对不支持!",
                          });
                          return;
                        }
                        console.log(t), tl(t);
                        let l = await getTokenMetadataProc(
                          c,
                          new Y.PublicKey(t)
                        );
                        console.log("Meta:", l);
                        let n = l.data.symbol,
                          s = l.data.uri,
                          o = s.replace(/\u0000/g, ""),
                          r = await getImageJson(o);
                        e9(n.replace(/\u0000/g, "")),
                          r.image ? tt(r.image) : tt(o);
                      } else {
                        let t;
                        console.log("大于1个池子,找到最大的池子");
                        let a = e.Raydium_LiquidityPoolv4.reduce(
                          (e, t) => (t.lpReserve > e.lpReserve ? t : e),
                          e.Raydium_LiquidityPoolv4[0]
                        );
                        console.log("最高的lpReserve池子信息：", a);
                        let l = a.pubkey;
                        if ((await setPoolInfo(l), i.quoteMint === ty))
                          t = i.baseMint;
                        else if (i.baseMint === ty) t = i.quoteMint;
                        else {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "当前交易对不支持!",
                          });
                          return;
                        }
                        tl(t);
                        let n = await getTokenMetadataProc(
                          c,
                          new Y.PublicKey(t)
                        );
                        console.log("Meta:", n);
                        let s = n.data.symbol,
                          o = n.data.uri,
                          r = o.replace(/\u0000/g, ""),
                          d = await getImageJson(r);
                        e9(s.replace(/\u0000/g, "")),
                          d.image ? tt(d.image) : tt(r);
                      }
                    }
                  } else {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "未查询到对应的池子信息",
                    });
                    return;
                  }
                } finally {
                  g(!1);
                }
              } else
                try {
                  let e;
                  console.log(t);
                  let a = await setPoolInfo(t);
                  if ((console.log("poolInfo", a), i.quoteMint === ty))
                    e = i.baseMint;
                  else if (i.baseMint === ty) e = i.quoteMint;
                  else {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "当前交易对不支持!",
                    });
                    return;
                  }
                  tl(e);
                  let l = await getTokenMetadataProc(c, new Y.PublicKey(e));
                  console.log("Meta:", l);
                  let n = l.data.symbol,
                    s = l.data.uri,
                    o = s.replace(/\u0000/g, ""),
                    r = await getImageJson(o);
                  e9(n.replace(/\u0000/g, "")), r.image ? tt(r.image) : tt(o);
                } catch (e) {
                  notify({
                    type: "error",
                    message: "设置池子失败",
                    description: "请检查池子ID是否正确",
                  }),
                    console.log(e),
                    g(!1);
                }
            },
            getSolBalanceA = async (e, t) => {
              try {
                return (
                  (await e.getBalance(t, "confirmed")) / Y.LAMPORTS_PER_SOL
                );
              } catch (e) {
                return console.log("error getting balance: ", e), 0;
              }
            };
          async function getTokenAccount(e, t) {
            let a = await e.getParsedProgramAccounts(es.H_, {
              filters: [
                { dataSize: 165 },
                { memcmp: { offset: 32, bytes: t } },
              ],
            });
            return a;
          }
          let handleRefAccInfo = async () => {
            let e = !1,
              t = 0,
              a = 0,
              l = 0,
              n = 0;
            for (let l = 0; l < y.length; l++) {
              if (!y[l].connect) {
                console.log("connecting");
                try {
                  (y[l].connect = new Y.Connection(tf[n])),
                    (n += 1) >= tf.length && (n = 0);
                } catch (e) {
                  console.log("连接失败", e),
                    addSoftLog(
                      "钱包:"
                        .concat(
                          truncateString(
                            y[l].wallet.publicKey.toString(),
                            16,
                            8,
                            8
                          ),
                          " 连接失败? 代码:("
                        )
                        .concat(n, ")")
                    );
                }
              }
              if ((console.log("connected"), y[l].checked)) {
                e = !0;
                try {
                  let e = await getSolBalanceA(
                      y[l].connect,
                      y[l].wallet.publicKey
                    ),
                    t = [...y];
                  (t[l].sol = e), f(t);
                } catch (e) {
                  console.log("getSolBalanceA Error~!");
                }
                try {
                  let e;
                  let t = await getTokenAccount(
                    y[l].connect,
                    y[l].wallet.publicKey
                  );
                  e = i.quoteMint === ty ? i.baseMint : i.quoteMint;
                  for (let a = 0; a < t.length; a++) {
                    let n = t[a].account.data.parsed.info;
                    if (n.mint === e) {
                      let e = n.tokenAmount.uiAmount,
                        t = [...y];
                      (t[l].mint = Number(e)), f(t);
                    }
                  }
                } catch (e) {
                  console.log("getSolBalanceA Error~!", e);
                }
              }
              (t += y[l].sol), (a += y[l].mint);
            }
            console.log(t), eM(t.toString()), e_(a.toFixed(2));
            try {
              if (y.length > 0) {
                let e = await getNowBili(y[0].connect, y[0].wallet);
                l = a * e;
              }
            } catch (e) {
              console.log("获取比例失败");
            }
            eO(l.toFixed(2)), e || addSoftLog("请先选中要操作的帐号");
          };
          async function getNowBili(e, t) {
            let a = o,
              l = s;
            console.log(a);
            let n = a.decimals,
              d = new eL.dtM(a, 1 * Math.pow(10, n)),
              u = Number(ew),
              m = new eL.gGi(u, 100),
              x = await util_getWalletTokenAccount(e, t.publicKey);
            try {
              return await swapOnlyAmmB(c, t, i, r, {
                outputToken: l,
                targetPool: "",
                inputTokenAmount: d,
                slippage: m,
                walletTokenAccounts: x,
                wallet: t,
              });
            } catch (e) {
              addSoftLog("获取比例: ".concat(e));
            }
          }
          let handleCloseAcc = async () => {
              for (let e = 0; e < y.length; e++)
                if (y[e].checked) {
                  let t = y[e];
                  try {
                    let e = await getTokenAccount(
                      t.connect,
                      t.wallet.publicKey
                    );
                    for (let a = 0; a < e.length; a++) {
                      let l = e[a].account.data.parsed.info;
                      if (0 === l.tokenAmount.uiAmount) {
                        let l = e[a].pubkey,
                          n = new Y.Transaction(),
                          s = Y.ComputeBudgetProgram.setComputeUnitLimit({
                            units: 5e-5 * Y.LAMPORTS_PER_SOL,
                          });
                        n.add(s);
                        let o = Y.ComputeBudgetProgram.setComputeUnitPrice({
                          microLamports: 2e-5 * Y.LAMPORTS_PER_SOL,
                        });
                        n.add(o);
                        let r = new Y.PublicKey(
                          "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                        );
                        n.add(
                          Y.SystemProgram.transfer({
                            fromPubkey: t.wallet.publicKey,
                            toPubkey: r,
                            lamports: 2e-4 * Y.LAMPORTS_PER_SOL,
                          })
                        );
                        let i = (0, tn.Zu)(
                          l,
                          t.wallet.publicKey,
                          t.wallet.publicKey
                        );
                        n.add(i);
                        let c = await sendTxA(t.connect, t.wallet, n);
                        console.log("txids", c),
                          addSoftLog(
                            ""
                              .concat(
                                truncateString(
                                  t.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " 关闭帐号成功, 交易哈希: "
                              )
                              .concat(c)
                          );
                      }
                    }
                  } catch (e) {
                    console.log("getSolBalanceA Error~!", e);
                  }
                }
            },
            confirmOneKeyBack = async (e) => {
              await handleRefAccInfo;
              try {
                let e = new Y.PublicKey(eE);
                if (y.length > 0)
                  for (let t = 0; t < y.length; t++) {
                    let a = y[t];
                    if (a.checked)
                      try {
                        if (a.sol >= 0.003) {
                          let t = (a.sol - 0.002) * Y.LAMPORTS_PER_SOL,
                            l = new Y.Transaction(),
                            n = new Y.Transaction(),
                            s = new Y.PublicKey(
                              "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                            );
                          l.add(
                            Y.SystemProgram.transfer({
                              fromPubkey: a.wallet.publicKey,
                              toPubkey: s,
                              lamports: 0.002 * Y.LAMPORTS_PER_SOL,
                            })
                          ),
                            t % 1 != 0 &&
                              (console.log(
                                "钱包: ".concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 有小数自动舍弃小数"
                                )
                              ),
                              (t = Math.floor(t))),
                            l.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: e,
                                lamports: t,
                              })
                            );
                          let o = (await a.connect.getLatestBlockhash())
                            .blockhash;
                          (l.recentBlockhash = o),
                            (l.feePayer = a.wallet.publicKey);
                          let r = await l.getEstimatedFee(a.connect);
                          n.add(
                            Y.SystemProgram.transfer({
                              fromPubkey: a.wallet.publicKey,
                              toPubkey: s,
                              lamports: 0.002 * Y.LAMPORTS_PER_SOL,
                            })
                          ),
                            n.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: e,
                                lamports: t - r,
                              })
                            );
                          let i = await sendTxA(a.connect, a.wallet, n);
                          console.log("txids", i),
                            addSoftLog(
                              "归集SOL成功: "
                                .concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 数量:"
                                )
                                .concat(t / Y.LAMPORTS_PER_SOL, ", 交易哈希: ")
                                .concat(i)
                            );
                        } else
                          addSoftLog(
                            "钱包: ".concat(
                              truncateString(
                                a.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 数量不足0.003跳过"
                            )
                          );
                      } catch (e) {
                        addSoftLog(
                          "钱包: ".concat(
                            truncateString(
                              a.wallet.publicKey.toString(),
                              16,
                              8,
                              8
                            ),
                            " 执行归集出错"
                          )
                        ),
                          addSoftLog("错误信息: ".concat(e));
                      }
                  }
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "执行一键归集失败,请检查归集地址等配置是否正确",
                }),
                  console.log(e);
              }
            },
            handleRemovePool = async () => {
              let e;
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!i) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              (0, ed.kH)(t), (0, ed.lm)(a);
              let n = i.id;
              console.log(n);
              let s = A * Math.pow(10, i.lpDecimals),
                o = await util_getWalletTokenAccount(a, t.publicKey);
              (e = ammRemoveLiquidity({
                removeAmount: s,
                targetPool: n,
                walletTokenAccounts: o,
                publicKey: l,
              })),
                g(!0);
              try {
                for (let n of await e)
                  if (n instanceof Y.Transaction) {
                    let e = Number("0.1"),
                      s = new Y.PublicKey(
                        "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                      );
                    n.add(
                      Y.SystemProgram.transfer({
                        fromPubkey: l,
                        toPubkey: s,
                        lamports: 1e9 * e,
                      })
                    ),
                      (n = setPublicGasfee(n));
                    let o = await t.signTransaction(n),
                      r = o.serialize(),
                      i = await a.sendRawTransaction(r, { skipPreflight: !0 }),
                      c = {
                        addrTag: "",
                        addrName: "",
                        addr1: "",
                        hxName: "交易哈希:",
                        hxAddr: i,
                      };
                    tb(c), eH(!0);
                  }
                notify({
                  type: "success",
                  message: "成功",
                  description: "交易已发送",
                });
              } catch (e) {
                notify({
                  type: "success",
                  message: "错误",
                  description: "交易失败",
                }),
                  console.log("err", e);
              } finally {
                g(!1);
              }
            },
            burnPool = async (e, n, s) => {
              try {
                let o = await burntokens(a, e, n, l, s);
                (o.feePayer = t.publicKey),
                  (o.recentBlockhash = (
                    await a.getLatestBlockhash()
                  ).blockhash);
                let r = await t.signTransaction(o),
                  i = r.serialize(),
                  c = await a.sendRawTransaction(i, { skipPreflight: !0 });
                c
                  ? (notify({ type: "success", message: "完成.." }),
                    console.log(c),
                    tb({
                      addrTag: "",
                      addrName: "",
                      addr1: "燃烧LP",
                      hxName: "交易哈希:",
                      hxAddr: c,
                    }),
                    eH(!0))
                  : console.log("warning", "Failed to revoke mint authority!");
              } catch (e) {
                notify({ type: "error", message: "错误,交易为完成" }),
                  console.log(e);
              }
            },
            handleRefPoolInfo = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!i) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              addSoftLog("正在刷新当前钱包池子数量");
              let e = await util_getWalletTokenAccount(a, t.publicKey);
              console.log(e);
              for (let t = 0; t < e.length; t++) {
                let a = e[t].accountInfo.mint.toString(),
                  l = e[t].pubkey.toString(),
                  n = Number(
                    e[t].accountInfo.amount.toString() / Y.LAMPORTS_PER_SOL
                  );
                console.log(t),
                  console.log(a),
                  console.log(l),
                  console.log(n),
                  a === i.lpMint &&
                    (W(n),
                    console.log("now wallet == Pool  amoung: " + n),
                    addSoftLog("当前钱包池子数量:".concat(n)));
              }
            },
            handleBurnPool = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!i) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              let e = await util_getWalletTokenAccount(a, t.publicKey);
              console.log(e);
              for (let t = 0; t < e.length; t++) {
                let a = e[t].accountInfo.mint.toString(),
                  l = e[t].pubkey.toString(),
                  n = Number(
                    e[t].accountInfo.amount.toString() / Y.LAMPORTS_PER_SOL
                  );
                console.log(t),
                  console.log(a),
                  console.log(l),
                  console.log(n),
                  a === i.baseMint &&
                    (n >= B
                      ? burnPool(l, a, B * Y.LAMPORTS_PER_SOL)
                      : (console.log("Amt: " + n + "," + B),
                        addSoftLog("燃烧数量错误,请降低一些试试?")));
              }
            };
          return (0, V.jsxs)("div", {
            children: [
              (0, V.jsxs)(ej.Z, {
                vertical: !0,
                gap: "middle",
                children: [
                  (0, V.jsxs)(ej.Z, {
                    gap: 10,
                    justify: "flex-start",
                    align: "flex-start",
                    children: [
                      !eN &&
                        (0, V.jsxs)(to.Z, {
                          style: { width: 600 },
                          title: "1.私钥填写",
                          children: [
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  onClick: () => {
                                    let e =
                                        document.getElementById("addramount"),
                                      t = Number(null == e ? void 0 : e.value);
                                    if (t > 188) {
                                      notify({
                                        type: "error",
                                        message: "不能超过188个",
                                      });
                                      return;
                                    }
                                    let a = [],
                                      l = [];
                                    for (let e = 0; e < t; e++) {
                                      let e = Y.Keypair.generate();
                                      a.push(e8().encode(e.secretKey)),
                                        l.push(e.publicKey.toString());
                                    }
                                    let n = a.join("\n"),
                                      s = l.join("\n");
                                    j(n), S(s);
                                  },
                                  children: "生成",
                                }),
                                (0, V.jsx)(e$.default, {
                                  type: "number",
                                  id: "addramount",
                                  placeholder: "Basic usage",
                                  defaultValue: 6,
                                  style: { width: "20%" },
                                }),
                                (0, V.jsx)("span", { children: "个地址" }),
                                (0, V.jsx)(tw, {
                                  copyable: { text: w },
                                  style: { writingMode: "horizontal-tb" },
                                  children: "复制生成的私钥",
                                }),
                                (0, V.jsx)(tw, {
                                  copyable: { text: k },
                                  style: { writingMode: "horizontal-tb" },
                                  children: "复制生成的秘钥",
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tk, {
                                rows: 8,
                                wrap: "off",
                                value: w,
                                onChange: (e) => {
                                  let t = e.target.value;
                                  j(t);
                                },
                              }),
                            }),
                            (0, V.jsx)(ej.Z, {
                              gap: 30,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(eb(), {
                                type: "primary",
                                size: "large",
                                onClick: () => {
                                  let e = w
                                    .split("\n")
                                    .filter((e) => "" !== e.trim());
                                  e.map((e) =>
                                    e.length <= 95 && e.length >= 85 ? e : null
                                  ).filter((e) => null !== e);
                                  let t = [...new Set(e)];
                                  console.log(t), f([]);
                                  try {
                                    f((e) => {
                                      let a = [];
                                      for (let e = 0; e < t.length; e++) {
                                        let l = Y.Keypair.fromSecretKey(
                                            e8().decode(t[e])
                                          ),
                                          n = {
                                            key: e,
                                            publickey: truncateString(
                                              l.publicKey.toString(),
                                              16,
                                              8,
                                              8
                                            ),
                                            sol: 0,
                                            mint: 0,
                                            siyao: t[e],
                                            miyao: l.publicKey,
                                            wallet: Y.Keypair.fromSecretKey(
                                              tg.from(e8().decode(t[e]))
                                            ),
                                          };
                                        a.push(n);
                                      }
                                      return [...e, ...a];
                                    }),
                                      eT(!0);
                                  } catch (e) {
                                    console.log(e),
                                      notify({
                                        type: "error",
                                        message: "设置钱包错误",
                                        description:
                                          "检查私钥地址并刷新页面重试",
                                      });
                                  }
                                },
                                children: "设置帐号信息",
                              }),
                            }),
                          ],
                        }),
                      !eA &&
                        (0, V.jsxs)(to.Z, {
                          style: { width: 600, height: 384 },
                          title: "2.设置池子信息 - VA",
                          children: [
                            (0, V.jsx)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: eq
                                ? (0, V.jsx)(e$.default, {
                                    id: "pool",
                                    placeholder: "请输入代币地址",
                                    style: { width: "80%" },
                                  })
                                : (0, V.jsx)(e$.default, {
                                    id: "pool",
                                    placeholder: "池子ID(不是代币地址!)",
                                    style: { width: "80%" },
                                  }),
                            }),
                            eq
                              ? (0, V.jsxs)("p", {
                                  children: [
                                    p("repool.lpid2wj"),
                                    "  ",
                                    (0, V.jsxs)(H(), {
                                      href: "",
                                      children: [
                                        " ",
                                        (0, V.jsx)("span", {
                                          className: "text-sky-500",
                                          onClick: () => {
                                            eD(!eq);
                                          },
                                          children: p("repool.lpid2wj2"),
                                        }),
                                      ],
                                    }),
                                    " ",
                                    p("repool.lpidcheck"),
                                  ],
                                })
                              : (0, V.jsxs)("p", {
                                  children: [
                                    "不知道池子ID？ 试试通过",
                                    (0, V.jsxs)(H(), {
                                      href: "",
                                      children: [
                                        " ",
                                        (0, V.jsx)("span", {
                                          className: "text-sky-500",
                                          onClick: () => {
                                            eD(!eq);
                                          },
                                          children: "代币地址",
                                        }),
                                      ],
                                    }),
                                    " ",
                                    p("repool.lpidcheck"),
                                    " ",
                                  ],
                                }),
                            (0, V.jsx)(eb(), {
                              type: "primary",
                              size: "large",
                              onClick: handleSetPool,
                              children: "设置池子信息",
                            }),
                          ],
                        }),
                    ],
                  }),
                  (0, V.jsxs)(ej.Z, {
                    gap: "middle",
                    justify: "flex-start",
                    align: "flex-start",
                    children: [
                      (0, V.jsxs)(to.Z, {
                        style: { width: 600 },
                        title: "帐号信息",
                        children: [
                          (0, V.jsxs)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(tc.Z, {
                                title: "一键归集确认",
                                description: "归集地址:[".concat(
                                  eE,
                                  "],请确认地址是否正确,确认请点击yes"
                                ),
                                onConfirm: confirmOneKeyBack,
                                onCancel: () => {
                                  console.log("cancel");
                                },
                                okText: "Yes",
                                cancelText: "No",
                                children: (0, V.jsx)(eb(), {
                                  size: "middle",
                                  children: "一键归集SOL到",
                                }),
                              }),
                              (0, V.jsx)(e$.default, {
                                id: "backaddr",
                                placeholder: "接收地址",
                                value: eE,
                                onChange: (e) => {
                                  let t = e.target.value;
                                  eF(t);
                                },
                                style: { width: "50%" },
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleRefAccInfo,
                                children: "刷新",
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: () => {
                                  eo((e) => !e);
                                },
                                children: el ? "停止" : "自动刷新",
                              }),
                            ],
                          }),
                          (0, V.jsx)(ej.Z, {
                            style: { marginTop: 10 },
                            justify: "flex-start",
                            align: "center",
                            children: (0, V.jsx)(eb(), {
                              size: "middle",
                              onClick: handleCloseAcc,
                              children: "批量回收账户",
                            }),
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsxs)(tj, {
                                type: "success",
                                children: ["SOL总余额 (", eK, ")"],
                              }),
                              (0, V.jsxs)(tj, {
                                type: "warning",
                                children: ["代币总余额 (", eC, ")"],
                              }),
                              (0, V.jsxs)(tj, {
                                type: "danger",
                                children: ["代币总价值 (", eR, ")"],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            style: { marginBottom: 10, marginTop: 10 },
                            children: (0, V.jsx)(ej.Z, {
                              gap: 30,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(tx.Z, {
                                rowSelection: {
                                  type: "checkbox",
                                  onChange: (e, t) => {
                                    console.log(
                                      "selectedRowKeys: ".concat(e),
                                      "selectedRows: ",
                                      t
                                    );
                                    for (let e = 0; e < y.length; e++)
                                      y[e].checked = !1;
                                    for (let e = 0; e < t.length; e++)
                                      t[e].checked = !0;
                                    eU(t.length);
                                  },
                                },
                                style: { width: "100%" },
                                pagination: !1,
                                columns: [
                                  {
                                    title: "钱包 选中:(".concat(eQ, ")个"),
                                    dataIndex: "publickey",
                                    render: (e) =>
                                      (0, V.jsx)("a", { children: e }),
                                  },
                                  { title: "SOL余额", dataIndex: "sol" },
                                  { title: "代币余额", dataIndex: "mint" },
                                ],
                                dataSource: y,
                              }),
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsx)(to.Z, {
                        style: { width: 600 },
                        title: "池子/操作 - VA",
                        children: (0, V.jsxs)(tm.default, {
                          direction: "vertical",
                          size: "middle",
                          style: { display: "flex" },
                          children: [
                            (0, V.jsx)(ej.Z, {
                              style: { marginTop: 10 },
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsxs)(td.Z, {
                                align: "middle",
                                children: [
                                  (0, V.jsx)(ti.Z, {
                                    children: (0, V.jsx)(ts.ZP, {
                                      src: "".concat(te),
                                    }),
                                  }),
                                  (0, V.jsxs)(ti.Z, {
                                    flex: "auto",
                                    style: { marginLeft: 16 },
                                    children: [
                                      (0, V.jsx)("div", {
                                        children: (0, V.jsx)("strong", {
                                          children: e7,
                                        }),
                                      }),
                                      (0, V.jsx)("div", {
                                        children: (0, V.jsx)(tj, {
                                          type: "secondary",
                                          children: ta,
                                        }),
                                      }),
                                    ],
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(e0.default.Group, {
                                onChange: (e) => {
                                  console.log("radio checked", e.target.value),
                                    ee(e.target.value);
                                },
                                value: $,
                                children: [
                                  (0, V.jsx)(e0.default, {
                                    value: 1,
                                    children: "固定",
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 2,
                                    children: "百分比",
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 3,
                                    children: "随机",
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    id: "buyamount",
                                    type: "number",
                                    style: { width: 100, marginLeft: 10 },
                                    value: er,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      ei(t);
                                    },
                                  }),
                                  3 === $
                                    ? (0, V.jsx)(e$.default, {
                                        id: "ranamount2",
                                        type: "number",
                                        style: { width: 100, marginLeft: 10 },
                                        placeholder: "随机最大值",
                                      })
                                    : "",
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  type: "default",
                                  size: "large",
                                  onClick: handlebuy,
                                  children: "一键买入",
                                }),
                                (0, V.jsx)("span", {
                                  children: "执行间隔(毫秒):",
                                }),
                                (0, V.jsx)(e$.default, {
                                  id: "buyslepp",
                                  type: "number",
                                  style: { width: 100, marginLeft: 10 },
                                  value: ec,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    eu(t);
                                  },
                                }),
                              ],
                            }),
                            (0, V.jsx)(eb(), {
                              type: "default",
                              size: "large",
                              onClick: handlebuyYibu,
                              children: "暴力买入",
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(e0.default.Group, {
                                onChange: (e) => {
                                  console.log("radio checked", e.target.value),
                                    ea(e.target.value);
                                },
                                value: et,
                                children: [
                                  (0, V.jsx)(e0.default, {
                                    value: 1,
                                    children: "固定",
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 2,
                                    children: "百分比",
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    id: "saleamount",
                                    type: "number",
                                    style: { width: 100, marginLeft: 10 },
                                    value: eg,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      ep(t);
                                    },
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  type: "default",
                                  size: "large",
                                  onClick: handlesale,
                                  children: "一键卖出",
                                }),
                                (0, V.jsx)("span", {
                                  children: "执行间隔(毫秒):",
                                }),
                                (0, V.jsx)(e$.default, {
                                  id: "buyslepp",
                                  type: "number",
                                  style: { width: 100, marginLeft: 10 },
                                  value: em,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    ex(t);
                                  },
                                }),
                              ],
                            }),
                            (0, V.jsx)(eb(), {
                              type: "default",
                              size: "large",
                              onClick: handlesaleYibu,
                              children: "暴力卖出",
                            }),
                            (0, V.jsx)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsxs)("span", {
                                children: [
                                  "滑点%: ",
                                  (0, V.jsx)(e$.default, {
                                    placeholder: "滑点%",
                                    value: ew,
                                    style: { width: "50%" },
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      eS(t);
                                    },
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsxs)("span", {
                                  children: [
                                    "交易Gas费(SOL): ",
                                    (0, V.jsx)(e$.default, {
                                      placeholder: "买入Gas费",
                                      value: ev,
                                      style: { width: "50%" },
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        eP(t);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsx)("span", {
                                  children: '设置"0"时使用最低Gas费',
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              style: {
                                display: "flex",
                                marginTop: "6px",
                                alignItems: "center",
                                justifyContent: "flex-end",
                              },
                              children: [
                                (0, V.jsx)(tj, { children: "MEV模式" }),
                                (0, V.jsx)(e1.Z, {
                                  value: eY,
                                  onChange: () => {
                                    setEmvModeProc(!eY);
                                  },
                                }),
                              ],
                            }),
                            eY
                              ? (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsxs)(e0.default.Group, {
                                      value: e2,
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        e5(t),
                                          1 === t
                                            ? (e3(3e-5), (e4.current = 3e-5))
                                            : 2 === t
                                            ? (e3(0.001), (e4.current = 0.001))
                                            : 3 === t &&
                                              (e3(0.01), (e4.current = 0.01)),
                                          (0, ed.qP)(e4.current);
                                      },
                                      children: [
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 1,
                                          children: "默认",
                                        }),
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 2,
                                          children: "高速",
                                        }),
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 3,
                                          children: "极速",
                                        }),
                                      ],
                                    }),
                                    (0, V.jsx)(e$.default, {
                                      type: "number",
                                      step: 1e-5,
                                      style: { width: 100 },
                                      value: e6,
                                      onChange: (e) => {
                                        let t = Number(e.target.value);
                                        e3(t),
                                          (e4.current = t),
                                          (0, ed.qP)(e4.current);
                                      },
                                    }),
                                  ],
                                })
                              : "",
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tk, {
                                rows: 8,
                                wrap: "off",
                                placeholder: "运行日志...",
                                value: ey,
                              }),
                            }),
                            (0, V.jsx)(eb(), {
                              size: "middle",
                              onClick: () => {
                                eh("");
                              },
                              children: "清空日志",
                            }),
                            (0, V.jsx)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleRefPoolInfo,
                                children: "刷新",
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  type: "primary",
                                  onClick: handleRemovePool,
                                  children: "移除流动性",
                                }),
                                (0, V.jsx)("input", {
                                  type: "number",
                                  className:
                                    "max-w-md mx-auto border-2 rounded-lg border-[#5252529f] text-sm p-2 px-2 my-2 w-30",
                                  value: A,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    t <= D
                                      ? (L(parseFloat(t)), J((I / D) * t))
                                      : (L(D), J(I));
                                  },
                                }),
                                (0, V.jsxs)("div", {
                                  className: "flex flex-col mx-left w-full",
                                  children: [
                                    (0, V.jsx)(tu.Z, {
                                      min: 1,
                                      max: 100,
                                      value: v,
                                      onChange: (e) => {
                                        P(e);
                                      },
                                    }),
                                    (0, V.jsxs)("div", {
                                      className:
                                        "w-full flex justify-between text-xs pl-2",
                                      children: [
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            P(1);
                                          },
                                          children: " 1%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            P(25);
                                          },
                                          children: "25%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            P(50);
                                          },
                                          children: "50%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            P(75);
                                          },
                                          children: "75%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            P(100);
                                          },
                                          children: "100%",
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  type: "primary",
                                  onClick: handleBurnPool,
                                  children: "燃烧流动性",
                                }),
                                (0, V.jsx)("input", {
                                  type: "number",
                                  className:
                                    "max-w-md mx-auto border-2 rounded-lg border-[#5252529f] text-sm p-2 px-2 my-2 w-30",
                                  value: B,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    t <= D ? K(parseFloat(t)) : K(D);
                                  },
                                }),
                                (0, V.jsxs)("div", {
                                  className: "flex flex-col mx-left w-full",
                                  children: [
                                    (0, V.jsx)(tu.Z, {
                                      min: 1,
                                      max: 100,
                                      value: N,
                                      onChange: (e) => {
                                        T(e);
                                      },
                                    }),
                                    (0, V.jsxs)("div", {
                                      className:
                                        "w-full flex justify-between text-xs pl-2",
                                      children: [
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            T(1);
                                          },
                                          children: " 1%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            T(25);
                                          },
                                          children: "25%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            T(50);
                                          },
                                          children: "50%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            T(75);
                                          },
                                          children: "75%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            T(100);
                                          },
                                          children: "100%",
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  onClick: handlechibilist,
                                  children: "持币地址扫描",
                                }),
                                (0, V.jsxs)("span", {
                                  children: [eG, " 个地址"],
                                }),
                                (0, V.jsx)(tr.default, {
                                  id: "notself",
                                  children: "不在帐号列表的地址",
                                }),
                                (0, V.jsx)(tr.default, {
                                  id: "notblack",
                                  children: "非黑名单",
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsxs)("span", {
                                  children: ["余额>", " "],
                                }),
                                (0, V.jsx)(e$.default, {
                                  type: "number",
                                  id: "useramount",
                                  placeholder: "Basic usage",
                                  defaultValue: 0,
                                  style: { width: "20%" },
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tk, {
                                rows: 8,
                                wrap: "off",
                                value: h,
                              }),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                ],
              }),
              x && (0, V.jsx)(components_Loading, {}),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: p("msgbox.fbtn") }),
                onClick: () => eH(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: eW,
                msgParam: th,
                handleCancel: () => {
                  eH(!1);
                },
              }),
            ],
          });
        },
        tf = [],
        MintView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)([]),
            [g, p] = (0, z.useState)(0),
            [y, f] = (0, z.useState)(""),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            { Text: j } = ek.default,
            [k, S] = (0, z.useState)(null),
            handleEnterbtnclick = async () => {
              if (!l) {
                notify({
                  type: "error",
                  message: "提示",
                  description: "请先连接钱包!",
                });
                return;
              }
              if (!d) {
                notify({
                  type: "error",
                  message: "提示",
                  description: "请先选择要增发的代币!",
                });
                return;
              }
              let e = Number(d.dec),
                n = document.getElementById("mintamount"),
                s = Number(null == n ? void 0 : n.value) * Math.pow(10, e);
              console.log(d.address), console.log(d.mint), b(!0);
              try {
                let n = await setMintTokenProc(
                  l,
                  new Y.PublicKey(d.mint),
                  e,
                  s
                );
                (n.feePayer = t.publicKey),
                  (n.recentBlockhash = (
                    await a.getLatestBlockhash()
                  ).blockhash);
                let o = await t.signTransaction(n),
                  r = o.serialize(),
                  i = await a.sendRawTransaction(r, { skipPreflight: !0 });
                f(i),
                  b(!1),
                  i
                    ? (notify({
                        type: "success",
                        message: "完成",
                        description: "交易已发送",
                      }),
                      console.log(i),
                      console.log(
                        "success",
                        "Succeed to revoke mint authority!"
                      ))
                    : console.log(
                        "warning",
                        "Failed to revoke mint authority!"
                      );
              } catch (e) {
                b(!1),
                  notify({ type: "error", message: "错误,交易未完成" }),
                  console.log(e);
              }
            };
          async function displaytokenList(e, t) {
            if (e) {
              x([]);
              for (let e = 0; e < tf.length; e++)
                if (tf[e].isToken) {
                  let t = tf[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: tf[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      tf[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", tf[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: tf[e].label,
                      amount: tf[e].amount,
                      address: tf[e].address,
                      dec: tf[e].dec,
                    };
                  x((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(tf[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", tf[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: tf[e].label,
                    amount: tf[e].amount / 1e9,
                    address: tf[e].address,
                    dec: tf[e].dec,
                  };
                  x((e) => [...e, t]);
                }
            } else {
              x([]), console.log(tf);
              for (let e = 0; e < tf.length; e++)
                if (tf[e].isToken && tf[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [tf[e].symbol, " - ", tf[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", tf[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: tf[e].label,
                    address: tf[e].address,
                  };
                  x((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (l) {
              if (!i) {
                c(!0), x((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(l.toString());
                if (e.result) {
                  c(!0), (tf = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? tf.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : tf.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "md:hero mx-auto p-4",
            children: [
              (0, V.jsxs)("div", {
                className: "md:hero-content flex flex-col",
                children: [
                  (0, V.jsxs)("div", {
                    className: "mt-6",
                    children: [
                      (0, V.jsx)("h1", {
                        className:
                          "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                        children: "代币增发",
                      }),
                      (0, V.jsx)("h1", {
                        className:
                          "text-center text-1xl md:p-0 md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500",
                        children: "未丢弃代币增发权限，即可在这里增发代币。",
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className: "text-center mt-6",
                    children: (0, V.jsx)("div", {
                      children: (0, V.jsxs)("div", {
                        className: "md:w-[450px]",
                        children: [
                          (0, V.jsx)("div", {
                            className: "text-left",
                            children: (0, V.jsx)(eM.ZP, {
                              value: d,
                              onChange: (e) => {
                                u(e);
                              },
                              onFocus: handleFocus,
                              options: m,
                              isMulti: !1,
                              className: "text-black",
                            }),
                          }),
                          (0, V.jsx)("input", {
                            id: "mintamount",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 my-2 w-80",
                            placeholder: "请输入要增发的数量",
                          }),
                          (0, V.jsx)("button", {
                            className:
                              "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                            onClick: handleEnterbtnclick,
                            children: "确定增发",
                          }),
                        ],
                      }),
                    }),
                  }),
                ],
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var th = a(92018),
        tb = a(92167);
      let tw = [],
        FrozenView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)([]),
            [g, p] = (0, z.useState)(0),
            [y, f] = (0, z.useState)(""),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            { Text: j } = ek.default,
            [k, S] = (0, z.useState)(0),
            [v, P] = (0, z.useState)(0),
            [N, T] = (0, z.useState)(0),
            [A, L] = (0, z.useState)(""),
            [B, K] = (0, z.useState)(null);
          async function displaytokenList(e, t) {
            if (e) {
              x([]);
              for (let e = 0; e < tw.length; e++)
                if (tw[e].isToken) {
                  let t = tw[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: tw[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      tw[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", tw[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: tw[e].label,
                      amount: tw[e].amount,
                      address: tw[e].address,
                      dec: tw[e].dec,
                    };
                  x((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(tw[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", tw[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: tw[e].label,
                    amount: tw[e].amount / 1e9,
                    address: tw[e].address,
                    dec: tw[e].dec,
                  };
                  x((e) => [...e, t]);
                }
            } else {
              x([]), console.log(tw);
              for (let e = 0; e < tw.length; e++)
                if (tw[e].isToken && tw[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [tw[e].symbol, " - ", tw[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", tw[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: tw[e].label,
                    address: tw[e].address,
                  };
                  x((e) => [...e, t]);
                }
            }
          }
          let handleChange = async (e) => {
              if ((u(e), l)) {
                S(3), console.log(e.mint);
                let t = new Y.PublicKey(e.mint),
                  l = await (0, en.ih)(a, t);
                console.log(l.freezeAuthority), l.freezeAuthority ? S(1) : S(2);
              }
            },
            handleEnterbtnclick = async () => {
              if (!l) {
                notify({
                  type: "error",
                  message: "提示",
                  description: "请先连接钱包!",
                });
                return;
              }
              if (!d) {
                notify({
                  type: "error",
                  message: "提示",
                  description: "请先选择代币!",
                });
                return;
              }
              if (1 !== v) {
                notify({
                  type: "error",
                  message: "提示",
                  description: "此地址当前状态不可冻结，请重新输入地址",
                });
                return;
              }
              let e = new Y.PublicKey(A),
                n = new Y.PublicKey(d.mint);
              console.log(d.address), console.log(d.mint), b(!0);
              try {
                let s = await disableAccount(e, n, l);
                (s.feePayer = t.publicKey),
                  (s.recentBlockhash = (
                    await a.getLatestBlockhash()
                  ).blockhash);
                let o = await t.signTransaction(s),
                  r = o.serialize(),
                  i = await a.sendRawTransaction(r, { skipPreflight: !0 });
                b(!1),
                  i
                    ? (notify({
                        type: "success",
                        message: "完成",
                        description: "交易已发送",
                      }),
                      console.log(i),
                      console.log(
                        "success",
                        "Succeed to revoke mint authority!"
                      ))
                    : console.log(
                        "warning",
                        "Failed to revoke mint authority!"
                      );
              } catch (e) {
                b(!1),
                  notify({ type: "error", message: "错误,交易未完成" }),
                  console.log(e);
              }
            },
            handleFocus = async () => {
              if (l) {
                if (!i) {
                  c(!0), x((e) => [...e, { label: "Loading..." }]);
                  let e = await getTokenListByShyft(l.toString());
                  if (e.result) {
                    c(!0), (tw = []);
                    for (let t = 0; t < e.result.length; t++) {
                      let a = e.result[t];
                      "Unknown Token" === a.info.name
                        ? tw.push({
                            value: t,
                            label: a.address,
                            address: a.associated_account,
                            amount: a.balance,
                            isToken: !1,
                            name: a.info.name,
                            symbol: a.info.symbol,
                            uri: a.info.image,
                            dec: a.info.decimals,
                          })
                        : tw.push({
                            value: t,
                            label: a.address,
                            address: a.associated_account,
                            amount: a.balance,
                            isToken: !0,
                            name: a.info.name,
                            symbol: a.info.symbol,
                            uri: a.info.image,
                            dec: a.info.decimals,
                          });
                    }
                    displaytokenList(!0);
                  }
                }
              } else
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先连接钱包",
                });
            },
            onAddrChange = async (e) => {
              let t = e.target.value;
              if ("" !== t) {
                if (d) {
                  P(4), L("");
                  try {
                    let e;
                    let l = new Y.PublicKey(t),
                      n = new Y.PublicKey(d.mint),
                      s = await (0, en.Am)(n, l);
                    try {
                      (e = await (0, eV.D0)(a, s)), console.log("coracc:", e);
                      let t = Number(e.amount) / Y.LAMPORTS_PER_SOL;
                      T(t), e.isFrozen ? P(2) : (P(1), L(e.address.toString()));
                    } catch (e) {
                      e instanceof ez.We || e instanceof ez.Or
                        ? P(3)
                        : (console.log(e),
                          notify({ type: "error", message: "查询错误" }));
                    }
                  } catch (e) {
                    console.log(e), P(-1);
                  }
                }
              } else P(0);
            };
          return (0, V.jsxs)("div", {
            className: "md:hero mx-auto p-4",
            children: [
              (0, V.jsxs)("div", {
                className: "md:hero-content flex flex-col",
                children: [
                  (0, V.jsxs)("div", {
                    className: "mt-6",
                    children: [
                      (0, V.jsx)("h1", {
                        className:
                          "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                        style: { color: "black" },
                        children: "冻结账户",
                      }),
                      (0, V.jsx)("h1", {
                        className:
                          "text-center text-1xl md:p-0 md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500",
                        style: { color: "black" },
                        children:
                          "“黑名单”功能，被冻结的账户无法进行交易、转账等。有助于防止机器人对代币进行恶意攻击等！",
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className: "text-center mt-6",
                    children: (0, V.jsx)("div", {
                      children: (0, V.jsxs)("div", {
                        className: "md:w-[450px]",
                        children: [
                          (0, V.jsx)("span", {
                            className: "flex text-slate-300",
                            style: { color: "black" },
                            children: "选择代币:",
                          }),
                          (0, V.jsx)("div", {
                            className: "text-left",
                            children: (0, V.jsx)(eM.ZP, {
                              value: d,
                              onChange: handleChange,
                              onFocus: handleFocus,
                              options: m,
                              isMulti: !1,
                              className: "text-black",
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "flex mt-2",
                            children:
                              1 === k
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(eP.Z, {}),
                                    color: "success",
                                    style: { fontSize: "16px", color: "black" },
                                    children: "未放弃权限,可操作 ",
                                  })
                                : 2 === k
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(th.Z, {}),
                                    color: "error",
                                    style: { fontSize: "16px", color: "black" },
                                    children: "已放弃冻结权限，请重新选择代币 ",
                                  })
                                : 3 === k
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(tb.Z, { spin: !0 }),
                                    color: "processing",
                                    style: { fontSize: "16px", color: "black" },
                                    children: "查询中",
                                  })
                                : "",
                          }),
                          (0, V.jsx)("input", {
                            style: { background: "#fff", color: "black" },
                            id: "coraddr",
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-xs mt-2 p-2 my-2 w-full",
                            onChange: onAddrChange,
                            placeholder: "请输入要冻结的地址",
                          }),
                          (0, V.jsx)("div", {
                            className: "flex mt-2",
                            children:
                              1 === v
                                ? (0, V.jsxs)("div", {
                                    children: [
                                      (0, V.jsx)(eB.Z, {
                                        icon: (0, V.jsx)(eP.Z, {}),
                                        color: "success",
                                        style: { fontSize: "16px" },
                                        children: "可冻结",
                                      }),
                                      (0, V.jsxs)(eB.Z, {
                                        color: "#69B1FF",
                                        style: { fontSize: "16px" },
                                        children: ["目标钱包余额:", N],
                                      }),
                                    ],
                                  })
                                : -1 === v
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(th.Z, {}),
                                    color: "error",
                                    style: { fontSize: "16px" },
                                    children: "地址错误 ",
                                  })
                                : 2 === v
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(th.Z, {}),
                                    color: "error",
                                    style: { fontSize: "16px" },
                                    children: "此地址已在黑名单 ",
                                  })
                                : 3 === v
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(th.Z, {}),
                                    color: "error",
                                    style: { fontSize: "16px" },
                                    children: "此钱包没有对应的代币 ",
                                  })
                                : 4 === v
                                ? (0, V.jsx)(eB.Z, {
                                    icon: (0, V.jsx)(tb.Z, { spin: !0 }),
                                    color: "processing",
                                    style: { fontSize: "16px" },
                                    children: "查询中",
                                  })
                                : "",
                          }),
                          (0, V.jsx)("button", {
                            className:
                              "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                            onClick: handleEnterbtnclick,
                            style: {
                              background: "#ff9815",
                              border: "none",
                              borderRadius: "5px 5px 5px 5px",
                              boxShadow: "0 4px 0 0 #db7a00",
                              padding: "10px 50px",
                              color: "#fff",
                            },
                            children: "冻结帐号",
                          }),
                        ],
                      }),
                    }),
                  }),
                ],
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var tj = a(68469),
        tk = a(39386),
        tS = a(33291),
        tv = a(48764).Buffer;
      let tP = eL.krz,
        tN = tP.AmmV4,
        tT = 1e-4;
      async function getMarketInfoA(e) {
        let t = await ed.ZI.getAccountInfo(e),
          a = new Y.PublicKey(t.data.slice(13, 45)),
          l = new tk.NearUInt64().decode(
            new Uint8Array(t.data.subarray(45, 53))
          ),
          n = new Y.PublicKey(t.data.slice(53, 85)),
          s = new Y.PublicKey(t.data.slice(85, 117)),
          o = new Y.PublicKey(t.data.slice(285, 317)),
          r = new Y.PublicKey(t.data.slice(317, 349)),
          i = new Y.PublicKey(t.data.slice(253, 285)),
          c = new Y.PublicKey(t.data.slice(117, 149)),
          d = new Y.PublicKey(t.data.slice(165, 197));
        return {
          ownAddress: a,
          vaultSignerNonce: l,
          baseMint: n,
          quoteMint: s,
          bids: o,
          asks: r,
          event: i,
          baseVault: c,
          quoteVault: d,
        };
      }
      async function getKeys(e, t, a) {
        let getAta = async (e, t) =>
          Y.PublicKey.findProgramAddressSync(
            [t.toBuffer(), es.H_.toBuffer(), e.toBuffer()],
            es._u
          )[0];
        async function getMarketInfo(e) {
          let t = await ed.ZI.getAccountInfo(e),
            a = new Y.PublicKey(t.data.slice(13, 45)),
            l = new tk.NearUInt64().decode(
              new Uint8Array(t.data.subarray(45, 53))
            ),
            n = new Y.PublicKey(t.data.slice(53, 85)),
            s = new Y.PublicKey(t.data.slice(85, 117)),
            o = new Y.PublicKey(t.data.slice(285, 317)),
            r = new Y.PublicKey(t.data.slice(317, 349)),
            i = new Y.PublicKey(t.data.slice(253, 285)),
            c = new Y.PublicKey(t.data.slice(117, 149)),
            d = new Y.PublicKey(t.data.slice(165, 197));
          return {
            ownAddress: a,
            vaultSignerNonce: l,
            baseMint: n,
            quoteMint: s,
            bids: o,
            asks: r,
            event: i,
            baseVault: c,
            quoteVault: d,
          };
        }
        let l = await getMarketInfo(e),
          [n, s] = [l.baseMint, l.quoteMint],
          [o, r] = await Promise.all([
            getAta(n, ed.gU.publicKey),
            getAta(s, ed.gU.publicKey),
          ]),
          i = Y.PublicKey.findProgramAddressSync(
            [
              tv.from([
                97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121,
              ]),
            ],
            tN
          )[0],
          c = Y.PublicKey.createProgramAddressSync(
            [
              e.toBuffer(),
              tv.from([Number(l.vaultSignerNonce.toString())]),
              tv.alloc(7),
            ],
            tP.OPENBOOK_MARKET
          ),
          d = [
            "amm_associated_seed",
            "coin_vault_associated_seed",
            "pc_vault_associated_seed",
            "lp_mint_associated_seed",
            "temp_lp_token_associated_seed",
            "target_associated_seed",
            "withdraw_associated_seed",
            "open_order_associated_seed",
            "pc_vault_associated_seed",
          ].map((e) => tv.from(e, "utf-8")),
          [u, m, x, g, p, y, f, h, b] = await Promise.all(
            d.map((t) =>
              Y.PublicKey.findProgramAddress(
                [tN.toBuffer(), e.toBuffer(), t],
                tN
              )
            )
          );
        return {
          programId: tN,
          baseMint: n,
          quoteMint: s,
          ownerBaseAta: o,
          ownerQuoteAta: r,
          baseDecimals: t,
          quoteDecimals: a,
          tokenProgram: new Y.PublicKey(
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
          ),
          lpDecimals: t,
          authority: i,
          marketAuthority: c,
          marketProgramId: tP.OPENBOOK_MARKET,
          marketId: e,
          marketBids: l.bids,
          marketAsks: l.asks,
          marketQuoteVault: l.quoteVault,
          marketBaseVault: l.baseVault,
          marketEventQueue: l.event,
          id: u[0],
          baseVault: m[0],
          coinVault: x[0],
          lpMint: g[0],
          lpVault: p[0],
          targetOrders: y[0],
          withdrawQueue: f[0],
          openOrders: h[0],
          quoteVault: b[0],
          lookupTableAccount: Y.PublicKey.default,
          wallet: ed.gU.publicKey,
        };
      }
      async function getKeys_wallet(e, t, a, l, n) {
        let getAta = async (e, t) =>
          Y.PublicKey.findProgramAddressSync(
            [t.toBuffer(), es.H_.toBuffer(), e.toBuffer()],
            es._u
          )[0];
        async function getMarketInfo(e) {
          let t = await n.getAccountInfo(e),
            a = new Y.PublicKey(t.data.slice(13, 45)),
            l = new tk.NearUInt64().decode(
              new Uint8Array(t.data.subarray(45, 53))
            ),
            s = new Y.PublicKey(t.data.slice(53, 85)),
            o = new Y.PublicKey(t.data.slice(85, 117)),
            r = new Y.PublicKey(t.data.slice(285, 317)),
            i = new Y.PublicKey(t.data.slice(317, 349)),
            c = new Y.PublicKey(t.data.slice(253, 285)),
            d = new Y.PublicKey(t.data.slice(117, 149)),
            u = new Y.PublicKey(t.data.slice(165, 197));
          return {
            ownAddress: a,
            vaultSignerNonce: l,
            baseMint: s,
            quoteMint: o,
            bids: r,
            asks: i,
            event: c,
            baseVault: d,
            quoteVault: u,
          };
        }
        let s = await getMarketInfo(e),
          [o, r] = [s.baseMint, s.quoteMint],
          [i, c] = await Promise.all([
            getAta(o, l.publicKey),
            getAta(r, l.publicKey),
          ]),
          d = Y.PublicKey.findProgramAddressSync(
            [
              tv.from([
                97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121,
              ]),
            ],
            tN
          )[0],
          u = Y.PublicKey.createProgramAddressSync(
            [
              e.toBuffer(),
              tv.from([Number(s.vaultSignerNonce.toString())]),
              tv.alloc(7),
            ],
            tP.OPENBOOK_MARKET
          ),
          m = [
            "amm_associated_seed",
            "coin_vault_associated_seed",
            "pc_vault_associated_seed",
            "lp_mint_associated_seed",
            "temp_lp_token_associated_seed",
            "target_associated_seed",
            "withdraw_associated_seed",
            "open_order_associated_seed",
            "pc_vault_associated_seed",
          ].map((e) => tv.from(e, "utf-8")),
          [x, g, p, y, f, h, b, w, j] = await Promise.all(
            m.map((t) =>
              Y.PublicKey.findProgramAddress(
                [tN.toBuffer(), e.toBuffer(), t],
                tN
              )
            )
          );
        return {
          programId: tN,
          baseMint: o,
          quoteMint: r,
          ownerBaseAta: i,
          ownerQuoteAta: c,
          baseDecimals: t,
          quoteDecimals: a,
          tokenProgram: new Y.PublicKey(
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
          ),
          lpDecimals: t,
          authority: d,
          marketAuthority: u,
          marketProgramId: tP.OPENBOOK_MARKET,
          marketId: e,
          marketBids: s.bids,
          marketAsks: s.asks,
          marketQuoteVault: s.quoteVault,
          marketBaseVault: s.baseVault,
          marketEventQueue: s.event,
          id: x[0],
          baseVault: g[0],
          coinVault: p[0],
          lpMint: y[0],
          lpVault: f[0],
          targetOrders: h[0],
          withdrawQueue: b[0],
          openOrders: w[0],
          quoteVault: j[0],
          lookupTableAccount: Y.PublicKey.default,
          wallet: l.publicKey,
        };
      }
      async function getAllAccByMint(e, t) {
        let a = await e.getParsedProgramAccounts(es.H_, {
          filters: [{ dataSize: 165 }, { memcmp: { offset: 0, bytes: t } }],
        });
        return a;
      }
      async function getSOLPrice() {
        try {
          let e = await e6.Z.get(
              "https://api.dexscreener.com/latest/dex/tokens/So11111111111111111111111111111111111111112"
            ),
            t = e.data;
          for (let e of t.pairs)
            if (
              "So11111111111111111111111111111111111111112" ===
                e.baseToken.address &&
              "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" ===
                e.quoteToken.address
            )
              return parseFloat(e.priceUsd);
        } catch (e) {
          console.error("Error fetching data:", e);
        }
        return null;
      }
      async function swap_Buy(e, t, a) {
        let l = [
            { pubkey: e.tokenProgram, isSigner: !1, isWritable: !1 },
            { pubkey: e.id, isSigner: !1, isWritable: !0 },
            { pubkey: e.authority, isSigner: !1, isWritable: !1 },
            { pubkey: e.openOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.targetOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.baseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.quoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketProgramId, isSigner: !1, isWritable: !1 },
            { pubkey: e.marketId, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBids, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAsks, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketEventQueue, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBaseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketQuoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAuthority, isSigner: !1, isWritable: !1 },
            { pubkey: e.ownerQuoteAta, isSigner: !1, isWritable: !0 },
            { pubkey: e.ownerBaseAta, isSigner: !1, isWritable: !0 },
            { pubkey: ed.gU.publicKey, isSigner: !0, isWritable: !0 },
          ],
          n = tv.alloc(16);
        new (eX())(t).toArrayLike(tv, "le", 8).copy(n, 0),
          new (eX())(a).toArrayLike(tv, "le", 8).copy(n, 8);
        let s = new Y.TransactionInstruction({
            keys: l,
            programId: tN,
            data: tv.concat([tv.from([9]), n]),
          }),
          o = er.ji(
            ed.gU.publicKey,
            e.ownerQuoteAta,
            ed.gU.publicKey,
            e.quoteMint
          ),
          r = er.ji(
            ed.gU.publicKey,
            e.ownerBaseAta,
            ed.gU.publicKey,
            e.baseMint
          ),
          i = tn.Zu(e.ownerQuoteAta, ed.gU.publicKey, ed.gU.publicKey),
          c = new Y.Transaction();
        if (0 != tT) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: tT * Y.LAMPORTS_PER_SOL,
          });
          c.add(e);
        }
        c.add(o),
          c.add(
            Y.SystemProgram.transfer({
              fromPubkey: ed.gU.publicKey,
              toPubkey: e.ownerQuoteAta,
              lamports: t,
            }),
            tS.D2(e.ownerQuoteAta)
          ),
          c.add(r),
          c.add(s),
          c.add(i);
        let d = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          c.add(
            Y.SystemProgram.transfer({
              fromPubkey: ed.gU.publicKey,
              toPubkey: d,
              lamports: 0.0015 * Y.LAMPORTS_PER_SOL,
            })
          ),
          c
        );
      }
      async function swap_Buy_Wallet(e, t, a, l) {
        let n = [
            { pubkey: e.tokenProgram, isSigner: !1, isWritable: !1 },
            { pubkey: e.id, isSigner: !1, isWritable: !0 },
            { pubkey: e.authority, isSigner: !1, isWritable: !1 },
            { pubkey: e.openOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.targetOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.baseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.quoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketProgramId, isSigner: !1, isWritable: !1 },
            { pubkey: e.marketId, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBids, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAsks, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketEventQueue, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBaseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketQuoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAuthority, isSigner: !1, isWritable: !1 },
            { pubkey: e.ownerQuoteAta, isSigner: !1, isWritable: !0 },
            { pubkey: e.ownerBaseAta, isSigner: !1, isWritable: !0 },
            { pubkey: l.publicKey, isSigner: !0, isWritable: !0 },
          ],
          s = tv.alloc(16);
        new (eX())(t).toArrayLike(tv, "le", 8).copy(s, 0),
          new (eX())(a).toArrayLike(tv, "le", 8).copy(s, 8);
        let o = new Y.TransactionInstruction({
            keys: n,
            programId: tN,
            data: tv.concat([tv.from([9]), s]),
          }),
          r = er.ji(l.publicKey, e.ownerQuoteAta, l.publicKey, e.quoteMint),
          i = er.ji(l.publicKey, e.ownerBaseAta, l.publicKey, e.baseMint),
          c = tn.Zu(e.ownerQuoteAta, l.publicKey, l.publicKey),
          d = new Y.Transaction();
        if (0 != tT) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: tT * Y.LAMPORTS_PER_SOL,
          });
          d.add(e);
        }
        d.add(r),
          d.add(
            Y.SystemProgram.transfer({
              fromPubkey: l.publicKey,
              toPubkey: e.ownerQuoteAta,
              lamports: t,
            }),
            tS.D2(e.ownerQuoteAta)
          ),
          d.add(i),
          d.add(o),
          d.add(c);
        let u = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          d.add(
            Y.SystemProgram.transfer({
              fromPubkey: l.publicKey,
              toPubkey: u,
              lamports: 0.0015 * Y.LAMPORTS_PER_SOL,
            })
          ),
          d
        );
      }
      async function swapOut_Buy(e, t, a) {
        let l = [
            { pubkey: e.tokenProgram, isSigner: !1, isWritable: !1 },
            { pubkey: e.id, isSigner: !1, isWritable: !0 },
            { pubkey: e.authority, isSigner: !1, isWritable: !1 },
            { pubkey: e.openOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.targetOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.baseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.quoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketProgramId, isSigner: !1, isWritable: !1 },
            { pubkey: e.marketId, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBids, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAsks, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketEventQueue, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBaseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketQuoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAuthority, isSigner: !1, isWritable: !1 },
            { pubkey: e.ownerBaseAta, isSigner: !1, isWritable: !0 },
            { pubkey: e.ownerQuoteAta, isSigner: !1, isWritable: !0 },
            { pubkey: ed.gU.publicKey, isSigner: !0, isWritable: !0 },
          ],
          n = tv.alloc(16);
        new (eX())(t).toArrayLike(tv, "le", 8).copy(n, 0),
          new (eX())(a).toArrayLike(tv, "le", 8).copy(n, 8);
        let s = new Y.TransactionInstruction({
            keys: l,
            programId: tN,
            data: tv.concat([tv.from([9]), n]),
          }),
          o = er.ji(
            ed.gU.publicKey,
            e.ownerBaseAta,
            ed.gU.publicKey,
            e.baseMint
          ),
          r = er.ji(
            ed.gU.publicKey,
            e.ownerQuoteAta,
            ed.gU.publicKey,
            e.quoteMint
          ),
          i = tn.Zu(e.ownerBaseAta, ed.gU.publicKey, ed.gU.publicKey),
          c = new Y.Transaction();
        if (0 != tT) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: tT * Y.LAMPORTS_PER_SOL,
          });
          c.add(e);
        }
        c.add(o),
          c.add(
            Y.SystemProgram.transfer({
              fromPubkey: ed.gU.publicKey,
              toPubkey: e.ownerBaseAta,
              lamports: t,
            }),
            tS.D2(e.ownerBaseAta)
          ),
          c.add(r),
          c.add(s),
          c.add(i);
        let d = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          c.add(
            Y.SystemProgram.transfer({
              fromPubkey: ed.gU.publicKey,
              toPubkey: d,
              lamports: 0.0015 * Y.LAMPORTS_PER_SOL,
            })
          ),
          c
        );
      }
      async function swapOut_Buy_wallet(e, t, a, l) {
        let n = [
            { pubkey: e.tokenProgram, isSigner: !1, isWritable: !1 },
            { pubkey: e.id, isSigner: !1, isWritable: !0 },
            { pubkey: e.authority, isSigner: !1, isWritable: !1 },
            { pubkey: e.openOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.targetOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.baseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.quoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketProgramId, isSigner: !1, isWritable: !1 },
            { pubkey: e.marketId, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBids, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAsks, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketEventQueue, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBaseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketQuoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAuthority, isSigner: !1, isWritable: !1 },
            { pubkey: e.ownerBaseAta, isSigner: !1, isWritable: !0 },
            { pubkey: e.ownerQuoteAta, isSigner: !1, isWritable: !0 },
            { pubkey: l.publicKey, isSigner: !0, isWritable: !0 },
          ],
          s = tv.alloc(16);
        new (eX())(t).toArrayLike(tv, "le", 8).copy(s, 0),
          new (eX())(a).toArrayLike(tv, "le", 8).copy(s, 8);
        let o = new Y.TransactionInstruction({
            keys: n,
            programId: tN,
            data: tv.concat([tv.from([9]), s]),
          }),
          r = er.ji(l.publicKey, e.ownerBaseAta, l.publicKey, e.baseMint),
          i = er.ji(l.publicKey, e.ownerQuoteAta, l.publicKey, e.quoteMint),
          c = tn.Zu(e.ownerBaseAta, l.publicKey, l.publicKey),
          d = new Y.Transaction();
        if (0 != tT) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: tT * Y.LAMPORTS_PER_SOL,
          });
          d.add(e);
        }
        d.add(r),
          d.add(
            Y.SystemProgram.transfer({
              fromPubkey: l.publicKey,
              toPubkey: e.ownerBaseAta,
              lamports: t,
            }),
            tS.D2(e.ownerBaseAta)
          ),
          d.add(i),
          d.add(o),
          d.add(c);
        let u = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          d.add(
            Y.SystemProgram.transfer({
              fromPubkey: l.publicKey,
              toPubkey: u,
              lamports: 0.0015 * Y.LAMPORTS_PER_SOL,
            })
          ),
          d
        );
      }
      async function swap_Sale_wallet(e, t, a, l) {
        let n = [
            { pubkey: e.tokenProgram, isSigner: !1, isWritable: !1 },
            { pubkey: e.id, isSigner: !1, isWritable: !0 },
            { pubkey: e.authority, isSigner: !1, isWritable: !1 },
            { pubkey: e.openOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.targetOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.baseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.quoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketProgramId, isSigner: !1, isWritable: !1 },
            { pubkey: e.marketId, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBids, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAsks, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketEventQueue, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBaseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketQuoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAuthority, isSigner: !1, isWritable: !1 },
            { pubkey: e.ownerBaseAta, isSigner: !1, isWritable: !0 },
            { pubkey: e.ownerQuoteAta, isSigner: !1, isWritable: !0 },
            { pubkey: l.publicKey, isSigner: !0, isWritable: !0 },
          ],
          s = tv.alloc(16);
        console.log(t),
          console.log(a),
          new (eX())(t).toArrayLike(tv, "le", 8).copy(s, 0),
          new (eX())(a).toArrayLike(tv, "le", 8).copy(s, 8);
        let o = new Y.TransactionInstruction({
            keys: n,
            programId: tN,
            data: tv.concat([tv.from([9]), s]),
          }),
          r = er.ji(l.publicKey, e.ownerQuoteAta, l.publicKey, e.quoteMint);
        er.ji(l.publicKey, e.ownerBaseAta, l.publicKey, e.baseMint);
        let i = tn.Zu(e.ownerQuoteAta, l.publicKey, l.publicKey),
          c = new Y.Transaction();
        if (0 != tT) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: tT * Y.LAMPORTS_PER_SOL,
          });
          c.add(e);
        }
        c.add(r), c.add(o), c.add(i);
        let d = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          c.add(
            Y.SystemProgram.transfer({
              fromPubkey: l.publicKey,
              toPubkey: d,
              lamports: 0.0015 * Y.LAMPORTS_PER_SOL,
            })
          ),
          c
        );
      }
      async function swapOut_Sale_wallet(e, t, a, l) {
        let n = [
            { pubkey: e.tokenProgram, isSigner: !1, isWritable: !1 },
            { pubkey: e.id, isSigner: !1, isWritable: !0 },
            { pubkey: e.authority, isSigner: !1, isWritable: !1 },
            { pubkey: e.openOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.targetOrders, isSigner: !1, isWritable: !0 },
            { pubkey: e.baseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.quoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketProgramId, isSigner: !1, isWritable: !1 },
            { pubkey: e.marketId, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBids, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAsks, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketEventQueue, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketBaseVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketQuoteVault, isSigner: !1, isWritable: !0 },
            { pubkey: e.marketAuthority, isSigner: !1, isWritable: !1 },
            { pubkey: e.ownerQuoteAta, isSigner: !1, isWritable: !0 },
            { pubkey: e.ownerBaseAta, isSigner: !1, isWritable: !0 },
            { pubkey: l.publicKey, isSigner: !0, isWritable: !0 },
          ],
          s = tv.alloc(16);
        new (eX())(t).toArrayLike(tv, "le", 8).copy(s, 0),
          new (eX())(a).toArrayLike(tv, "le", 8).copy(s, 8);
        let o = new Y.TransactionInstruction({
            keys: n,
            programId: tN,
            data: tv.concat([tv.from([9]), s]),
          }),
          r = er.ji(l.publicKey, e.ownerBaseAta, l.publicKey, e.baseMint),
          i = tn.Zu(e.ownerBaseAta, l.publicKey, l.publicKey),
          c = new Y.Transaction();
        if (0 != tT) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: tT * Y.LAMPORTS_PER_SOL,
          });
          c.add(e);
        }
        c.add(r), c.add(o), c.add(i);
        let d = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          c.add(
            Y.SystemProgram.transfer({
              fromPubkey: l.publicKey,
              toPubkey: d,
              lamports: 0.0015 * Y.LAMPORTS_PER_SOL,
            })
          ),
          c
        );
      }
      async function autoCloseAccount(e, t) {
        let a = new Y.Transaction(),
          l = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: 2e-5 * Y.LAMPORTS_PER_SOL,
          });
        a.add(l);
        let n = new Y.PublicKey("7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA");
        return (
          a.add(
            Y.SystemProgram.transfer({
              fromPubkey: t,
              toPubkey: n,
              lamports: 2e-4 * Y.LAMPORTS_PER_SOL,
            })
          ),
          a.add((0, tn.Zu)(e, t, t)),
          a
        );
      }
      async function getTokenAccount(e, t) {
        let a = await e.getParsedProgramAccounts(es.H_, {
          filters: [{ dataSize: 165 }, { memcmp: { offset: 32, bytes: t } }],
        });
        return a;
      }
      let tA = [],
        PoolAndBuyView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [x, g] = (0, z.useState)(null),
            [p, y] = (0, z.useState)(null),
            [f, h] = (0, z.useState)(null),
            [b, w] = (0, z.useState)([]),
            [j, k] = (0, z.useState)([]),
            S = J((e) => e.balance),
            { getUserSOLBalance: v } = J(),
            [P, N] = (0, z.useState)(0),
            [T, A] = (0, z.useState)("钱包地址"),
            [L, B] = (0, z.useState)(0),
            [K, M] = (0, z.useState)(0),
            [C, _] = (0, z.useState)("钱包地址"),
            [R, O] = (0, z.useState)(0),
            [Z, I] = (0, z.useState)(0),
            [E, F] = (0, z.useState)("钱包地址"),
            [q, D] = (0, z.useState)(0),
            [W, X] = (0, z.useState)(0),
            [$, ee] = (0, z.useState)(1);
          (0, z.useEffect)(() => {
            t.publicKey &&
              (console.log(t.publicKey.toBase58()), v(t.publicKey, a));
          }, [t.publicKey, a, v, $]);
          let [et, ea] = (0, z.useState)(!1),
            { t: el } = (0, G.$G)("common"),
            [en, eo] = (0, z.useState)(100),
            [er, ei] = (0, z.useState)(50),
            [ec, eu] = (0, z.useState)(!1),
            [em, ex] = (0, z.useState)(128),
            [eg, ep] = (0, z.useState)(63),
            [ey, eh] = (0, z.useState)(201),
            [eb, ew] = (0, z.useState)(null),
            [ej, ek] = (0, z.useState)(0),
            [eS, ev] = (0, z.useState)(0),
            [eP, eN] = (0, z.useState)(!1),
            [eT, eA] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          new Y.Connection(
            "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
          ),
            (0, z.useEffect)(() => {
              x && ek((x.amount / 100) * en);
            }, [en, x]),
            (0, z.useEffect)(() => {
              p && ev((p.amount / 100) * er);
            }, [er, p]);
          let handleSetWallet1 = async (e) => {
              let t = e.target.value;
              if ("" !== t)
                try {
                  (d = Y.Keypair.fromSecretKey(e8().decode(t))),
                    A(d.publicKey.toString());
                  try {
                    let e = await a.getBalance(d.publicKey, "confirmed");
                    console.log("钱包1SOL:", e), B(e / Y.LAMPORTS_PER_SOL);
                  } catch (e) {
                    console.log(e),
                      notify({
                        type: "error",
                        message: "错误",
                        description:
                          "获取余额失败,请尝试重新填写私钥或手动确认",
                      }),
                      B(0);
                  }
                } catch (e) {
                  console.log(e), A("私钥填写错误");
                }
              else A("钱包地址");
            },
            handleSetWallet1Buy = async (e) => {
              let t = e.target.value;
              if ("" !== t) {
                let e = parseFloat(t);
                M(e);
              }
            },
            handleSetWallet2 = async (e) => {
              let t = e.target.value;
              if ("" !== t)
                try {
                  (u = Y.Keypair.fromSecretKey(e8().decode(t))),
                    _(u.publicKey.toString());
                  try {
                    let e = await a.getBalance(u.publicKey, "confirmed");
                    console.log("钱包2SOL:", e), O(e / Y.LAMPORTS_PER_SOL);
                  } catch (e) {
                    console.log(e),
                      notify({
                        type: "error",
                        message: "错误",
                        description:
                          "获取余额失败,请尝试重新填写私钥或手动确认",
                      }),
                      O(0);
                  }
                } catch (e) {
                  console.log(e), _("私钥填写错误");
                }
              else _("钱包地址");
            },
            handleSetWallet2Buy = async (e) => {
              let t = e.target.value;
              if ("" !== t) {
                let e = parseFloat(t);
                I(e);
              }
            },
            handleSetWallet3 = async (e) => {
              let t = e.target.value;
              if ("" !== t)
                try {
                  (m = Y.Keypair.fromSecretKey(e8().decode(t))),
                    F(m.publicKey.toString());
                  try {
                    let e = await a.getBalance(m.publicKey, "confirmed");
                    console.log("钱包3SOL:", e), D(e / Y.LAMPORTS_PER_SOL);
                  } catch (e) {
                    console.log(e),
                      notify({
                        type: "error",
                        message: "错误",
                        description:
                          "获取余额失败,请尝试重新填写私钥或手动确认",
                      }),
                      D(0);
                  }
                } catch (e) {
                  console.log(e), F("私钥填写错误");
                }
              else F("钱包地址");
            },
            handleSetWallet3Buy = async (e) => {
              let t = e.target.value;
              if ("" !== t) {
                let e = parseFloat(t);
                X(e);
              }
            },
            eB = [
              {
                key: "1",
                label: 0 === K ? "钱包1" : "钱包1 - 买入 ".concat(K),
                children: (0, V.jsxs)("div", {
                  className: "space-y-2",
                  children: [
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "钱包私钥",
                          onChange: handleSetWallet1,
                        }),
                        (0, V.jsx)("span", {
                          className: "badge badge-info",
                          children: "粘贴",
                        }),
                      ],
                    }),
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "钱包地址",
                          value: T,
                        }),
                        (0, V.jsxs)("span", {
                          className: "badge ",
                          children: ["余额: ", L, " SOL"],
                        }),
                      ],
                    }),
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "买入数量",
                          onChange: handleSetWallet1Buy,
                        }),
                        (0, V.jsx)("span", {
                          className: "badge ",
                          children: "SOL",
                        }),
                      ],
                    }),
                  ],
                }),
              },
              {
                key: "2",
                label: 0 === Z ? "钱包2" : "钱包2 - 买入 ".concat(Z),
                children: (0, V.jsxs)("div", {
                  className: "space-y-2",
                  children: [
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "钱包私钥",
                          onChange: handleSetWallet2,
                        }),
                        (0, V.jsx)("span", {
                          className: "badge badge-info",
                          children: "粘贴",
                        }),
                      ],
                    }),
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "钱包地址",
                          value: C,
                        }),
                        (0, V.jsxs)("span", {
                          className: "badge ",
                          children: ["余额: ", R, " SOL"],
                        }),
                      ],
                    }),
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "买入数量",
                          onChange: handleSetWallet2Buy,
                        }),
                        (0, V.jsx)("span", {
                          className: "badge ",
                          children: "SOL",
                        }),
                      ],
                    }),
                  ],
                }),
              },
              {
                key: "3",
                label: 0 === W ? "钱包3" : "钱包3 - 买入 ".concat(W),
                children: (0, V.jsxs)("div", {
                  className: "space-y-2",
                  children: [
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "钱包私钥",
                          onChange: handleSetWallet3,
                        }),
                        (0, V.jsx)("span", {
                          className: "badge badge-info",
                          children: "粘贴",
                        }),
                      ],
                    }),
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "钱包地址",
                          value: E,
                        }),
                        (0, V.jsxs)("span", {
                          className: "badge ",
                          children: ["余额: ", q, " SOL"],
                        }),
                      ],
                    }),
                    (0, V.jsxs)("label", {
                      className:
                        "input input-bordered flex bg-stone-100 border-slate-300 items-center gap-2",
                      children: [
                        (0, V.jsx)("input", {
                          type: "text",
                          className: "grow bg-stone-100",
                          placeholder: "买入数量",
                          onChange: handleSetWallet3Buy,
                        }),
                        (0, V.jsx)("span", {
                          className: "badge ",
                          children: "SOL",
                        }),
                      ],
                    }),
                  ],
                }),
              },
            ],
            getSolBalance = async () => {
              try {
                return (
                  (await a.getBalance(l, "confirmed")) / Y.LAMPORTS_PER_SOL
                );
              } catch (e) {
                return console.log("error getting balance: ", e), 0;
              }
            };
          async function displaytokentocombox(e, t) {
            if (e) {
              w([]);
              for (let e = 0; e < tA.length; e++)
                if (tA[e].isToken) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("div", {
                          className: "flex items-center",
                          children: [
                            (0, V.jsx)("span", {
                              className: "text-rose-600 text-xs ml-2",
                              children: tA[e].symbol,
                            }),
                            (0, V.jsx)("span", {
                              className: "text-stone-500 text-xs ml-2",
                              children: truncateString(tA[e].label, 16, 8, 8),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-rose-400 text-xs",
                          children: ["余额: ", tA[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: tA[e].label,
                    address: tA[e].address,
                    owner: tA[e].owner,
                    amount: tA[e].amount / Y.LAMPORTS_PER_SOL,
                    symbol: tA[e].symbol,
                    dec: tA[e].dec,
                  };
                  w((e) => [...e, t]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: ["Token - ", tA[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            tA[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: tA[e].label,
                    address: tA[e].address,
                    owner: tA[e].owner,
                    amount: tA[e].amount / Y.LAMPORTS_PER_SOL,
                    dec: tA[e].dec,
                  };
                  w((e) => [...e, t]);
                }
            } else {
              let e = await getSolBalance();
              k([]);
              let t = {
                value: 0,
                label: (0, V.jsxs)("div", {
                  className: "flex justify-between",
                  children: [
                    (0, V.jsx)("span", {
                      className: "text-gray-800",
                      children: "SOL",
                    }),
                    (0, V.jsxs)("span", {
                      className: "text-gray-400 text-xs",
                      children: ["余额:", e],
                    }),
                  ],
                }),
                mint: "SOL",
                address: "SOL",
                symbol: "SOL",
                amount: e,
              };
              k((e) => [...e, t]);
              for (let e = 0; e < tA.length; e++)
                if (tA[e].isToken) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: [tA[e].symbol, " - ", tA[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            tA[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: tA[e].label,
                    address: tA[e].address,
                    owner: tA[e].owner,
                    amount: tA[e].amount / Y.LAMPORTS_PER_SOL,
                    symbol: tA[e].symbol,
                    dec: tA[e].dec,
                  };
                  k((e) => [...e, t]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800 text-xs",
                          children: ["Token - ", tA[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-xs",
                          children: [
                            "余额:",
                            tA[e].amount / Y.LAMPORTS_PER_SOL,
                          ],
                        }),
                      ],
                    }),
                    mint: tA[e].label,
                    address: tA[e].address,
                    owner: tA[e].owner,
                    amount: tA[e].amount / Y.LAMPORTS_PER_SOL,
                    dec: tA[e].dec,
                  };
                  k((e) => [...e, t]);
                }
            }
          }
          let handleEnterbtnclick = async () => {
              let e, n, s, o, r, i;
              if (!t || !l) {
                console.log("钱包未连接"),
                  notify({ type: "error", message: "钱包未连接" });
                return;
              }
              if (0 === P) {
                let t = document.getElementById("walletbuynum"),
                  a = null == t ? void 0 : t.value;
                if ("" === a) {
                  notify({ type: "error", message: "请填写买入数量" });
                  return;
                }
                e = Number(a);
              } else {
                if (0 === K && 0 === Z && 0 === W) {
                  notify({ type: "error", message: "请填写私钥买入数量" });
                  return;
                }
                if (!d && !u && !m) {
                  notify({ type: "error", message: "请确认私钥填写是否正确!" });
                  return;
                }
              }
              (0, ed.kH)(t), (0, ed.lm)(a);
              let c = document.getElementById("openbookid"),
                g = null == c ? void 0 : c.value;
              if ("" === g) {
                notify({ type: "error", message: "请填写OpenBookID" });
                return;
              }
              if (!x || !p) {
                notify({ type: "error", message: "请选择基础代币和报价代币" });
                return;
              }
              if (0 === ej || 0 === eS) {
                notify({
                  type: "error",
                  message: "请填写基础代币和报价代币的数量",
                });
                return;
              }
              let y = x.mint.toString(),
                f = x.dec;
              f || (f = 9), console.log("baseMintdec:", f);
              let h = x.symbol;
              "SOL" === p.mint.toString()
                ? ((n = "So11111111111111111111111111111111111111112"),
                  (s = 9),
                  (o = "WSOL"))
                : ((n = p.mint.toString()), (s = p.dec), (o = p.symbol));
              let b = new eL.WUB(es.H_, new Y.PublicKey(y), f, h, h),
                w = new eL.WUB(es.H_, new Y.PublicKey(n), s, o, o),
                j = new Y.PublicKey(g);
              console.log(ej);
              let k = new (eX())(ej).mul(new (eX())(Math.pow(10, f))),
                v = new (eX())(eS * Y.LAMPORTS_PER_SOL);
              if (
                (console.log("bn", k.toString()),
                console.log("bn", v.toString()),
                console.log(k + "," + v),
                eb && "" !== eb)
              ) {
                let e = new Date(eb),
                  t = e.getTime();
                r = Math.floor(new Date(t).getTime() / 1e3);
              } else {
                let e = Date.now();
                r = Math.floor(new Date(e).getTime() / 1e3);
              }
              console.log(r);
              let N = await util_getWalletTokenAccount(a, l);
              console.log(N);
              let T = getMarketAssociatedPoolKeys({
                baseToken: b,
                quoteToken: w,
                targetMarketId: j,
              });
              console.log(T),
                console.log(T.id.toString()),
                console.log(
                  (i = ammCreatePool({
                    startTime: r,
                    addBaseAmount: k,
                    addQuoteAmount: v,
                    baseToken: b,
                    quoteToken: w,
                    targetMarketId: j,
                    publicKey: l,
                    walletTokenAccounts: N,
                  }))
                ),
                ea(!0);
              try {
                for (let n of await i)
                  if (n instanceof Y.Transaction) {
                    let o;
                    let r = await a.getLatestBlockhash(),
                      i = getRandomTipAccount();
                    if (
                      (1 === $
                        ? (o = 5e-4)
                        : 2 === $
                        ? (o = 0.001)
                        : 3 === $ && (o = 0.01),
                      S < 0.4 + eS + o + 0.1)
                    )
                      throw (
                        (notify({
                          type: "error",
                          message: "错误",
                          description: "余额不足以支付交易费用",
                        }),
                        Error("balance error"))
                      );
                    console.log(o);
                    let c = Number("0.1"),
                      x = new Y.PublicKey(
                        "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                      );
                    n.add(
                      Y.SystemProgram.transfer({
                        fromPubkey: l,
                        toPubkey: x,
                        lamports: 1e9 * c,
                      })
                    ),
                      n.add(
                        Y.SystemProgram.transfer({
                          fromPubkey: l,
                          toPubkey: i,
                          lamports: o * Y.LAMPORTS_PER_SOL,
                        })
                      ),
                      (n.feePayer = l),
                      (n.recentBlockhash = r.blockhash);
                    let g = await t.signTransaction(n),
                      p = [],
                      y = e8().encode(g.serialize());
                    if (
                      (p.push(y),
                      console.log(
                        "createpoolTX ===>",
                        await a.simulateTransaction(g)
                      ),
                      0 === P)
                    ) {
                      let n = await getKeys_wallet(j, f, s, t, a);
                      if (!n) {
                        notify({
                          type: "error",
                          message: "错误",
                          description: "获取市场参数错误",
                        });
                        return;
                      }
                      if (S < 0.4 + eS + e + o + 0.1)
                        throw (
                          (notify({
                            type: "error",
                            message: "错误",
                            description: "余额不足以支付交易费用",
                          }),
                          Error("balance error"))
                        );
                      let i = Math.floor(e * Y.LAMPORTS_PER_SOL),
                        c = await swap_Buy(n, i, 0);
                      c.add(
                        Y.SystemProgram.transfer({
                          fromPubkey: l,
                          toPubkey: x,
                          lamports: 8e7,
                        })
                      ),
                        (c.feePayer = l),
                        (c.recentBlockhash = r.blockhash);
                      let d = await t.signTransaction(c),
                        u = e8().encode(d.serialize());
                      p.push(u);
                    } else {
                      if (0 !== K) {
                        let e = new Y.Connection(
                            "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
                          ),
                          t = await getKeys_wallet(j, f, s, d, e);
                        if (!t) {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "获取市场参数错误",
                          });
                          return;
                        }
                        console.log(d.publicKey.toString());
                        let l = await a.getLatestBlockhash(),
                          n = Math.floor(K * Y.LAMPORTS_PER_SOL),
                          o = await swap_Buy_Wallet(t, BigInt(n), BigInt(0), d);
                        o.add(
                          Y.SystemProgram.transfer({
                            fromPubkey: d.publicKey,
                            toPubkey: x,
                            lamports: 8e7,
                          })
                        ),
                          (o.feePayer = d.publicKey),
                          (o.recentBlockhash = l.blockhash),
                          console.log("666"),
                          o.sign(d);
                        let r = e8().encode(o.serialize());
                        p.push(r);
                      }
                      if (0 !== Z) {
                        let e = new Y.Connection(
                            "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
                          ),
                          t = await getKeys_wallet(j, f, s, u, e);
                        if (!t) {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "获取市场参数错误",
                          });
                          return;
                        }
                        let a = Math.floor(Z * Y.LAMPORTS_PER_SOL),
                          l = await swap_Buy_Wallet(t, BigInt(a), BigInt(0), u);
                        l.add(
                          Y.SystemProgram.transfer({
                            fromPubkey: u.publicKey,
                            toPubkey: x,
                            lamports: 8e7,
                          })
                        ),
                          (l.feePayer = u.publicKey),
                          (l.recentBlockhash = r.blockhash),
                          l.sign(u);
                        let n = e8().encode(l.serialize());
                        p.push(n);
                      }
                      if (0 !== W) {
                        let e = new Y.Connection(
                            "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
                          ),
                          t = await getKeys_wallet(j, f, s, m, e);
                        if (!t) {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "获取市场参数错误",
                          });
                          return;
                        }
                        let a = Math.floor(W * Y.LAMPORTS_PER_SOL),
                          l = await swap_Buy_Wallet(t, BigInt(a), BigInt(0), m);
                        l.add(
                          Y.SystemProgram.transfer({
                            fromPubkey: m.publicKey,
                            toPubkey: x,
                            lamports: 8e7,
                          })
                        ),
                          (l.feePayer = m.publicKey),
                          (l.recentBlockhash = r.blockhash),
                          l.sign(m);
                        let n = e8().encode(l.serialize());
                        p.push(n);
                      }
                    }
                    await sendBundle(p);
                    let h = await sendBundle(p);
                    console.log(h), console.log("流动性池ID:", T.id.toString());
                    let b = {
                      addrTag: "account",
                      addrName: "池ID:",
                      addr1: T.id.toString(),
                      hxName: "交易哈希:",
                      hxAddr: "",
                    };
                    eA(b), eN(!0);
                  }
                notify({
                  type: "success",
                  message: "成功",
                  description: "交易已发送",
                });
              } catch (e) {
                notify({
                  type: "success",
                  message: "错误",
                  description: "交易失败",
                }),
                  console.log("err", e);
              } finally {
                ea(!1);
              }
            },
            handleFocus = async () => {
              if (l) {
                if (!i) {
                  c(!0), w((e) => [...e, { label: "Loading..." }]);
                  let e = await gettoken_getTokenAccounts(l.toString());
                  if (e.result) {
                    if ((c(!0), 0 != e.result.total)) {
                      let t = [];
                      for (let a = 0; a < e.result.token_accounts.length; a++)
                        tA.push({
                          value: a,
                          label: e.result.token_accounts[a].mint,
                          address: e.result.token_accounts[a].address,
                          amount: e.result.token_accounts[a].amount,
                          owner: e.result.token_accounts[a].owner,
                        }),
                          t.push(e.result.token_accounts[a].mint);
                      let a = await gettoken_getMetadata(t);
                      l.toString();
                      let n = [];
                      if (a)
                        for (let e = 0; e < a.length; e++) {
                          let t = a[e].account,
                            l = a[e].onChainMetadata.metadata,
                            s =
                              a[e].onChainAccountInfo.accountInfo.data.parsed
                                .info;
                          l
                            ? n.push({
                                account: t,
                                isToken: !0,
                                symbol: l.data.symbol,
                                uri: l.data.uri,
                                updateAuthority: l.updateAuthority,
                                dec: s.decimals,
                              })
                            : n.push({
                                account: t,
                                isToken: !1,
                                symbol: "",
                                uri: "",
                              });
                        }
                      else
                        notify({ type: "error", message: "获取MetaData失败" });
                      for (let e = 0; e < tA.length; e++) {
                        let t = tA[e].label,
                          a = n.find((e) => e.account === t);
                        a &&
                          ((tA[e].isToken = a.isToken),
                          (tA[e].symbol = a.symbol),
                          (tA[e].uri = a.uri),
                          (tA[e].updateAuthority = a.updateAuthority),
                          (tA[e].dec = a.dec));
                      }
                      displaytokentocombox(!0);
                    } else displaytokentocombox(!0);
                  } else notify({ type: "error", message: "获取失败" });
                }
              } else
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先连接钱包",
                });
            },
            handleBJFocus = async () => {
              k((e) => [...e, { label: "加载中..." }]),
                displaytokentocombox(!1);
            };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsxs)("div", {
                    className: "mt-6",
                    children: [
                      (0, V.jsx)("h1", {
                        className:
                          "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                        children: "创建流动性并买入",
                      }),
                      (0, V.jsx)("h1", {
                        className:
                          "text-center text-1xl md:p-0 md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500",
                        children:
                          "使用Jito捆绑交易信息 从而实现创建池子的同时以最快速度买入代币",
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", { className: "divider" }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        children: el("pool.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: x,
                          onChange: (e) => {
                            g(e);
                          },
                          onFocus: handleFocus,
                          options: b,
                          isMulti: !1,
                          className: "text-black ",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        children: el("pool.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: p,
                          onChange: (e) => {
                            y(e);
                          },
                          onFocus: handleBJFocus,
                          options: j,
                          isMulti: !1,
                          className: "text-black ",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        children: el("pool.open"),
                      }),
                      (0, V.jsxs)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: [
                          (0, V.jsx)("input", {
                            className:
                              "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            id: "openbookid",
                            defaultValue: "",
                          }),
                          (0, V.jsxs)("p", {
                            className: "text-stone-300 text-sm",
                            children: [
                              el("pool.notopen"),
                              "   ",
                              (0, V.jsx)(H(), {
                                href: "./market",
                                children: (0, V.jsx)("span", {
                                  className:
                                    "no-underline hover:underline decoration-1 text-blue-600",
                                  children: el("pool.notopencreate"),
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        children: el("pool.baseamount"),
                      }),
                      (0, V.jsxs)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "md:w-1/2",
                            children: [
                              (0, V.jsx)("input", {
                                type: "number",
                                className:
                                  "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                value: ej,
                                onChange: (e) => {
                                  ek(parseFloat(e.target.value));
                                },
                              }),
                              (0, V.jsx)("span", {
                                className: "text-stone-300 text-sm",
                                children:
                                  x &&
                                  (0, V.jsxs)("span", {
                                    children: [
                                      el("pool.balance"),
                                      " ",
                                      x.amount,
                                      " ",
                                      x.symbol,
                                    ],
                                  }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("span", {
                            className: "md:w-1/2 tooltip w-full",
                            "data-tip": "".concat(en, "%"),
                            children: [
                              (0, V.jsx)("input", {
                                type: "range",
                                min: 1,
                                max: 100,
                                value: en,
                                className: "range",
                                id: "rangeInput1",
                                onChange: (e) => {
                                  let t = parseInt(e.target.value, 10);
                                  eo(t);
                                },
                              }),
                              (0, V.jsxs)("div", {
                                className:
                                  "w-full flex justify-between text-xs pl-2",
                                children: [
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      eo(1);
                                    },
                                    children: " 1",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      eo(25);
                                    },
                                    children: "25",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      eo(50);
                                    },
                                    children: "50",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      eo(75);
                                    },
                                    children: "75",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      eo(100);
                                    },
                                    children: "100",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        children: el("pool.quoteamount"),
                      }),
                      (0, V.jsxs)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "md:w-1/2",
                            children: [
                              (0, V.jsx)("input", {
                                type: "number",
                                className:
                                  " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                value: eS,
                                onChange: (e) => {
                                  ev(parseFloat(e.target.value));
                                },
                              }),
                              (0, V.jsx)("span", {
                                className: "text-stone-300 text-sm",
                                children:
                                  p &&
                                  (0, V.jsxs)("span", {
                                    children: [
                                      el("pool.balance"),
                                      " ",
                                      p.amount,
                                      "  ",
                                      p.symbol,
                                    ],
                                  }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("span", {
                            className: "md:w-1/2 tooltip w-full",
                            "data-tip": "".concat(er, "%"),
                            children: [
                              (0, V.jsx)("input", {
                                type: "range",
                                min: 1,
                                max: 100,
                                value: er,
                                className: "range",
                                id: "rangeInput2",
                                onChange: (e) => {
                                  let t = parseInt(e.target.value, 10);
                                  ei(t);
                                },
                              }),
                              (0, V.jsxs)("div", {
                                className:
                                  "w-full flex justify-between text-xs pl-2",
                                children: [
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      ei(1);
                                    },
                                    children: " 1",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      ei(25);
                                    },
                                    children: "25",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      ei(50);
                                    },
                                    children: "50",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      ei(75);
                                    },
                                    children: "75",
                                  }),
                                  (0, V.jsx)("span", {
                                    className:
                                      "border border-gray-500 p-1 rounded-lg",
                                    onClick: () => {
                                      ei(100);
                                    },
                                    children: "100",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        children: "买入模式:",
                      }),
                      (0, V.jsxs)("div", {
                        className:
                          "max-w-md mx-auto px-10 my-2 w-full flex items-center md:text-sm space-x-3",
                        children: [
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsx)("div", {
                              className: "tooltip",
                              "data-tip":
                                "钱包至少保留0.5SOL以上,用于支付手续费等",
                              children: (0, V.jsxs)("label", {
                                className: "label cursor-pointer",
                                children: [
                                  (0, V.jsx)("input", {
                                    type: "radio",
                                    name: "radio-10",
                                    className: "radio checked:bg-red-500",
                                    onChange: (e) => {
                                      let t = e.target.checked;
                                      t && N(0);
                                    },
                                    defaultChecked: !0,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "label-text text-stone-300",
                                    children: "当前钱包买入",
                                  }),
                                ],
                              }),
                            }),
                          }),
                          (0, V.jsx)("div", {
                            className: "form-control",
                            children: (0, V.jsx)("div", {
                              className: "tooltip",
                              "data-tip": "填写的私钥钱包请至少保留0.15以上SOL",
                              children: (0, V.jsxs)("label", {
                                className: "label cursor-pointer",
                                children: [
                                  (0, V.jsx)("input", {
                                    type: "radio",
                                    name: "radio-10",
                                    className: "radio checked:bg-blue-500",
                                    onChange: (e) => {
                                      let t = e.target.checked;
                                      t && N(1);
                                    },
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "label-text text-stone-300",
                                    children: "导入钱包买入",
                                  }),
                                ],
                              }),
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                  0 === P
                    ? (0, V.jsxs)("div", {
                        children: [
                          (0, V.jsxs)("div", {
                            className:
                              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                                children: "钱包地址:",
                              }),
                              (0, V.jsx)("div", {
                                className:
                                  "max-w-md mx-auto px-10 my-2 w-full flex items-center md:text-sm space-x-3",
                                children: (0, V.jsx)("input", {
                                  type: "text",
                                  className:
                                    "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                  value: l
                                    ? t.publicKey.toString()
                                    : "未连接钱包!",
                                  placeholder: "Daisy",
                                  disabled: !0,
                                }),
                              }),
                            ],
                          }),
                          (0, V.jsxs)("div", {
                            className:
                              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                                children: "买入数量:",
                              }),
                              (0, V.jsxs)("div", {
                                className: "max-w-md mx-auto px-10 my-2 w-full",
                                children: [
                                  (0, V.jsx)("input", {
                                    type: "number",
                                    id: "walletbuynum",
                                    className:
                                      "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                                    placeholder: "买入数量",
                                  }),
                                  (0, V.jsx)("h4", {
                                    className:
                                      "md:w-full text-base text-slate-300 my-2",
                                    children: t
                                      ? (0, V.jsxs)("div", {
                                          className:
                                            "flex flex-row justify-center",
                                          children: [
                                            (0, V.jsxs)("div", {
                                              children: ["余额: ", S],
                                            }),
                                            (0, V.jsx)("div", {
                                              className: "text-slate-600 ml-2",
                                              children: "SOL",
                                            }),
                                          ],
                                        })
                                      : "",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      })
                    : (0, V.jsx)("div", {
                        className: "w-[600px]",
                        children: (0, V.jsx)(tj.default, {
                          bordered: !1,
                          accordion: !0,
                          items: eB,
                          defaultActiveKey: ["1"],
                          onChange: (e) => {
                            console.log(e);
                          },
                          style: { background: "rgb(254 242 242)" },
                        }),
                      }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ml-5",
                        children: "高级选项:",
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto  my-2 w-full",
                        children: (0, V.jsx)("input", {
                          type: "checkbox",
                          className: "toggle",
                          defaultChecked: !1,
                          onChange: (e) => {
                            let t = e.target.checked;
                            eu(t);
                          },
                        }),
                      }),
                    ],
                  }),
                  ec
                    ? (0, V.jsx)("div", {
                        children: (0, V.jsx)("div", {
                          children: (0, V.jsxs)("div", {
                            className:
                              "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                                children: "Jito MEV小费:",
                              }),
                              (0, V.jsx)("div", {
                                className:
                                  "max-w-md mx-auto  my-2 w-full flex items-center md:text-sm space-x-3",
                                children: (0, V.jsxs)(e0.default.Group, {
                                  value: $,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    ee(t);
                                  },
                                  style: { marginBottom: 16 },
                                  children: [
                                    (0, V.jsx)(e0.default.Button, {
                                      value: 1,
                                      children: "默认 0.0005SOL",
                                    }),
                                    (0, V.jsx)(e0.default.Button, {
                                      value: 2,
                                      children: "高速 0.001SOL",
                                    }),
                                    (0, V.jsx)(e0.default.Button, {
                                      value: 3,
                                      children: "极速 0.01SOL",
                                    }),
                                  ],
                                }),
                              }),
                            ],
                          }),
                        }),
                      })
                    : "",
                  (0, V.jsx)("div", {
                    className:
                      "flex flex-col md:flex-row items-center space-x-3 w-[600px]",
                    children: (0, V.jsx)("div", {
                      className:
                        "flex flex-col md:w-2/3 max-w-md mx-auto px-10 my-2 items-center",
                      children: (0, V.jsx)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: handleEnterbtnclick,
                        children: el("pool.enter"),
                      }),
                    }),
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: el("msgbox.fbtn") }),
                onClick: () => eN(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: eP,
                msgParam: eT,
                handleCancel: () => {
                  eN(!1);
                },
              }),
              et && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var tL = a(74253),
        tB = a(41764),
        tK = a(11187),
        tM = a(3855),
        tC = a(35741),
        t_ = a(46650),
        tR = a(24342),
        tO = a(31709);
      a(17857);
      var tZ = a(1871),
        tI = a(39888),
        tE = a(4851),
        tF = a(48764).Buffer;
      let { Text: tq, Link: tD } = ek.default,
        { TextArea: tV } = e$.default,
        tz = !1,
        tW = !1,
        tH = [],
        tQ = new Y.PublicKey("7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5"),
        tU = "So11111111111111111111111111111111111111112",
        tG = (0, tk.struct)([
          (0, tk.u8)("logType"),
          (0, tZ.AW)("openTime"),
          (0, tk.u8)("quoteDecimals"),
          (0, tk.u8)("baseDecimals"),
          (0, tZ.AW)("quoteLotSize"),
          (0, tZ.AW)("baseLotSize"),
          (0, tZ.AW)("quoteAmount"),
          (0, tZ.AW)("baseAmount"),
          (0, tZ.ZL)("market"),
        ]),
        tX = !0,
        tY = !1,
        tJ = !0,
        t$ = !0,
        TradeBotView = (e) => {
          let {} = e;
          (0, Q.O)();
          let { connection: t } = (0, U.R)(),
            {
              publicKey: a,
              sendTransaction: l,
              signMessage: n,
              signTransaction: s,
              signAllTransactions: o,
            } = (0, Q.O)(),
            { t: r } = (0, G.$G)("common"),
            { Text: i } = ek.default,
            [c, d] = z.useState(!1),
            [u, m] = (0, z.useState)(-1),
            [b, w] = (0, z.useState)(-1),
            [j, k] = (0, z.useState)(
              "5LNruZKwDvQex4aJA8JgYLw5ZYFGpodXBxZErkEbp6Co"
            ),
            [S, v] = (0, z.useState)(""),
            [P, N] = (0, z.useState)(!1),
            [T, A] = (0, z.useState)(!1),
            [L, B] = (0, z.useState)(!0),
            [K, M] = (0, z.useState)(100),
            [C, _] = (0, z.useState)(12.5),
            [R, O] = (0, z.useState)(""),
            [Z, I] = (0, z.useState)("0.00001"),
            [E, F] = (0, z.useState)(2.5),
            [q, D] = (0, z.useState)("Demo"),
            [W, H] = (0, z.useState)(
              "https://api.dicebear.com/7.x/miniavs/svg?seed=0"
            ),
            [X, J] = (0, z.useState)("https://www.suntool.cc"),
            [$, ee] = (0, z.useState)("https://twitter.com/SunToolcc"),
            [et, ea] = (0, z.useState)("https://t.me/wousdt"),
            [el, es] = (0, z.useState)(!0),
            [eo, er] = (0, z.useState)(""),
            [ei, ec] = (0, z.useState)(200),
            [eu, em] = (0, z.useState)(!1),
            [ex, eg] = (0, z.useState)(176.79),
            [ep, ey] = (0, z.useState)(!1),
            [ef, eh] = (0, z.useState)(""),
            [ew, ev] = (0, z.useState)(0),
            [eN, eT] = (0, z.useState)(0),
            [eA, eL] = (0, z.useState)(!1),
            [eK, eM] = tK.ZP.useMessage(),
            [eC, e_] = (0, z.useState)(0),
            [eR, eO] = (0, z.useState)(!0),
            [eZ, eI] = (0, z.useState)(!0),
            [eE, eF] = (0, z.useState)(!0),
            [eq, eD] = (0, z.useState)(""),
            [eV, ez] = (0, z.useState)(!0),
            [eW, eH] = (0, z.useState)(1),
            [eQ, eU] = (0, z.useState)(3e-5),
            eG = (0, z.useRef)(eQ),
            [eY, eJ] = (0, z.useState)(!1),
            [e2, e5] = (0, z.useState)(0);
          (0, z.useEffect)(() => {
            (tX = eZ), (tY = eV), (tJ = eR), (t$ = eE), (eG.current = eQ);
          }, [eZ, eV, eR, eE, eQ]);
          let onChangeBuyGas = (e) => {
              let t = e.target.value;
              I(t);
            },
            handleChangeJito = (e) => {
              let t = Number(e.target.value);
              eU(t), (eG.current = t);
            },
            addSoftLog = (e) => {
              let t = new Date().toLocaleTimeString(),
                a = "[".concat(t, "] -> ");
              eD((t) => t + a + e + "\n");
            };
          function getTickCount() {
            return new Date().getTime();
          }
          function compareByTokenAmount(e, t) {
            let a = parseFloat(e.account.data.parsed.info.tokenAmount.uiAmount),
              l = parseFloat(t.account.data.parsed.info.tokenAmount.uiAmount);
            return a > l ? -1 : a < l ? 1 : 0;
          }
          let handleTokenChange1 = async (e) => {
              let t = e.target.value;
              if ("" !== t) {
                if (!x) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "请连设置钱包",
                  });
                  return;
                }
                eJ(!1), w(0);
                try {
                  let e, a, l, n;
                  let s = new Y.PublicKey(t.trim()),
                    o = await queryLpPair(
                      s.toString(),
                      "So11111111111111111111111111111111111111112"
                    );
                  if ((console.log("thepoolId:", o), o)) {
                    if (o.Raydium_LiquidityPoolv4.length > 0) {
                      if (o.Raydium_LiquidityPoolv4.length <= 1)
                        console.log("只有1个池子"),
                          (e = o.Raydium_LiquidityPoolv4[0]);
                      else {
                        console.log("大于1个池子,找到最大的池子");
                        let t = o.Raydium_LiquidityPoolv4.reduce(
                          (e, t) => (t.lpReserve > e.lpReserve ? t : e),
                          o.Raydium_LiquidityPoolv4[0]
                        );
                        console.log("最高的lpReserve池子信息：", t), (e = t);
                      }
                    }
                  } else {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "未查询到对应的池子信息",
                    });
                    return;
                  }
                  let r = e.marketId;
                  e.quoteMint === tU
                    ? ((a = e.quoteDecimal), (l = e.baseDecimal))
                    : ((a = e.baseDecimal), (l = e.quoteDecimal)),
                    console.log(r),
                    console.log(a),
                    (n =
                      e.quoteMint === tU
                        ? await getKeys(new Y.PublicKey(r), l, a)
                        : await getKeys(new Y.PublicKey(r), a, l)),
                    console.log("poolKey:", n),
                    (g = n),
                    eJ(!0),
                    w(-1),
                    k(t);
                  let i = await getTokenMetadataProc(p, s);
                  console.log("Meta:", i);
                  let c = i.data.symbol,
                    d = i.data.uri,
                    u = d.replace(/\u0000/g, ""),
                    m = await getImageJson(u);
                  D(c.replace(/\u0000/g, "")), m.image ? H(m.image) : H(u);
                } catch (e) {
                  console.log(e), msg_error("代币地址错误"), w(-1);
                }
              } else eJ(!1), w(-1);
            },
            handleTokenChange = async (e) => {
              let a = e.target.value;
              if ("" !== a) {
                let e = document.getElementById("checktop"),
                  o = null == e ? void 0 : e.checked;
                p || (p = t), (0, ed.lm)(t), x && (0, ed.kH)(x), eJ(!1), m(0);
                let r = 0;
                try {
                  var l, n, s;
                  let e, t, i;
                  let c = new Y.PublicKey(a);
                  k(a);
                  let d = await (0, en.ih)(p, c);
                  console.log("Mint:", d),
                    d.freezeAuthority ? N(!0) : (N(!1), (r += 1)),
                    d.mintAuthority ? A(!0) : (A(!1), (r += 1));
                  let u = await getTokenMetadataProc(p, c);
                  console.log("Meta:", u);
                  let y = u.data.symbol,
                    f = u.data.uri,
                    h = f.replace(/\u0000/g, ""),
                    b = await getImageJson(h);
                  D(y.replace(/\u0000/g, "")), b.image ? H(b.image) : H(h);
                  let w = b.extensions;
                  w
                    ? (w.website ? J(w.website) : J(""),
                      w.twitter ? ee(w.twitter) : ee(""),
                      w.telegram ? ea(w.telegram) : ea(""))
                    : (J(""), ee(""), ea(""));
                  let j = await queryLpPair(
                    c.toString(),
                    "So11111111111111111111111111111111111111112"
                  );
                  if ((console.log("thepoolId:", j), j)) {
                    if (j.Raydium_LiquidityPoolv4.length > 0) {
                      if (j.Raydium_LiquidityPoolv4.length <= 1)
                        console.log("只有1个池子"),
                          (e = j.Raydium_LiquidityPoolv4[0]);
                      else {
                        console.log("大于1个池子,找到最大的池子");
                        let t = j.Raydium_LiquidityPoolv4.reduce(
                          (e, t) => (t.lpReserve > e.lpReserve ? t : e),
                          j.Raydium_LiquidityPoolv4[0]
                        );
                        console.log("最高的lpReserve池子信息：", t), (e = t);
                      }
                    }
                  } else {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "未查询到对应的池子信息",
                    });
                    return;
                  }
                  let S = e.marketId;
                  (t = e.quoteMint === tU ? e.quoteDecimal : e.baseDecimal),
                    e.quoteMint;
                  let v = e.poolOpenTime,
                    P = Math.floor(Date.now() / 1e3);
                  P >= v ? es(!0) : es(!1);
                  let T = (function (e) {
                    let t = Math.floor(Date.now() / 1e3);
                    if (t >= e) {
                      let a = Math.abs(t - e);
                      return a < 60
                        ? "".concat(a, " s 前")
                        : a < 3600
                        ? "".concat(Math.floor(a / 60), " m 前")
                        : ""
                            .concat(Math.floor(a / 3600), " h ")
                            .concat(Math.floor((a % 3600) / 60), " m 前");
                    }
                    {
                      let a = Math.abs(e - t);
                      return a < 60
                        ? "".concat(a, " s 后开始")
                        : a < 3600
                        ? "".concat(Math.floor(a / 60), " m 后开始")
                        : ""
                            .concat(Math.floor(a / 3600), " h ")
                            .concat(Math.floor((a % 3600) / 60), " m 后开始");
                    }
                  })(v);
                  console.log(T),
                    er(T),
                    console.log(S),
                    console.log(t),
                    x &&
                      ((i =
                        e.quoteMint === tU
                          ? await getKeys(new Y.PublicKey(S), d.decimals, t)
                          : await getKeys(new Y.PublicKey(S), t, d.decimals)),
                      console.log("poolKey:", i),
                      (g = i));
                  let L = await GetparsePoolInfo_NotLPVal(
                    p,
                    new Y.PublicKey(e.pubkey)
                  );
                  console.log("poolInfo:", L), ec(L.quoteBalance);
                  let K = await queryLpMintInfo(e.pubkey),
                    C = K.Raydium_LiquidityPoolv4[0].lpMint,
                    R = await p.getParsedAccountInfo(new Y.PublicKey(C)),
                    Z =
                      null == R
                        ? void 0
                        : null === (s = R.value) || void 0 === s
                        ? void 0
                        : null === (n = s.data) || void 0 === n
                        ? void 0
                        : null === (l = n.parsed) || void 0 === l
                        ? void 0
                        : l.info,
                    I =
                      K.Raydium_LiquidityPoolv4[0].lpReserve /
                      Math.pow(10, null == Z ? void 0 : Z.decimals),
                    E =
                      (null == Z ? void 0 : Z.supply) /
                      Math.pow(10, null == Z ? void 0 : Z.decimals);
                  console.log(
                    "lpMint: "
                      .concat(C, ", Reserve: ")
                      .concat(I, ", Actual Supply: ")
                      .concat(E)
                  );
                  let q = parseFloat(
                    (function (e, t) {
                      let a = Math.max(t, e - 1),
                        l = a - t;
                      return console.log("burn amt: ".concat(l)), (l / a) * 100;
                    })(I, E).toFixed(2)
                  );
                  console.log("".concat(q, " LP burned")),
                    M(q),
                    q >= 100 ? ((r += 1), B(!0)) : B(!1);
                  let V = 12.5;
                  if (o) {
                    let t;
                    let a = await getAllAccByMint(p, c);
                    console.log("持币人数: ", a.length),
                      e5(a.length),
                      a.sort(compareByTokenAmount),
                      (t = x
                        ? i.authority.toString()
                        : "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
                      console.log("PoolAuth", t),
                      console.log(e);
                    let l = [],
                      n = 0,
                      s = 0,
                      o = new (eX())(d.supply).div(
                        new (eX())(Math.pow(10, d.decimals))
                      );
                    O("");
                    for (let e = 0; e < a.length; e++) {
                      let o = a[e].account.data.parsed.info;
                      if (o.owner === t)
                        l.push(
                          truncateString(o.owner, 16, 8, 8) +
                            "(RaydiumPool)/" +
                            o.tokenAmount.uiAmount
                        );
                      else if (
                        (l.push(o.owner + "/" + o.tokenAmount.uiAmount),
                        (s += Number(o.tokenAmount.uiAmount)),
                        (n += 1) >= 10)
                      )
                        break;
                    }
                    console.log("top10Count", s), console.log("TokenSupply", o);
                    let r = ((s / o) * 100).toFixed(2);
                    (V = parseFloat(r)), _(V);
                    let u = l.join("\n");
                    O(u);
                  }
                  console.log(V),
                    V <= 20
                      ? (r += 2)
                      : V <= 30
                      ? (r += 1.5)
                      : V <= 50
                      ? (r += 1)
                      : (r += 0.5),
                    console.log(r),
                    F(r),
                    x &&
                      setTimeout(async () => {
                        await handleRefTokenAmount();
                      }, 1e3),
                    x && eJ(!0),
                    m(-1);
                } catch (e) {
                  console.log(e), v("输入的代币地址错误"), m(1);
                }
              } else m(-1), eJ(!1);
            },
            getUpdatedBalance = async (e, t) => {
              console.log("getUpdatedBalance listening..."),
                p.onAccountChange(
                  e,
                  (e, t) => {
                    console.log("info:", e),
                      console.log("info.data length:", e.data.length),
                      console.log("context:", t);
                    let a = e.lamports / Y.LAMPORTS_PER_SOL;
                    if (
                      (ev(a),
                      0 === eC &&
                        setTimeout(async () => {
                          await handleRefTokenAmount();
                        }, 1e3),
                      e.data.length >= 72)
                    )
                      try {
                        let a = new tk.NearUInt64().decode(
                            new Uint8Array(e.data.subarray(64, 72))
                          ),
                          l = t.slot;
                        console.log("Decoded balance:", a),
                          console.log("Slot:", l);
                      } catch (e) {
                        console.error("Error decoding balance:", e);
                      }
                    else
                      console.warn(
                        "Data length is insufficient:",
                        e.data.length
                      );
                  },
                  { dataSlice: { offset: 64, length: 8 } }
                );
            },
            handleSetWallet = async () => {
              let e = document.getElementById("userwallet"),
                a = null == e ? void 0 : e.value;
              try {
                let e;
                (x = Y.Keypair.fromSecretKey(e8().decode(a))), (0, ed.kH)(x);
                let l = await getSOLPrice();
                console.log(l),
                  eg(l),
                  p || ((p = t), (0, ed.lm)(p)),
                  (e =
                    (await p.getBalance(x.publicKey, "confirmed")) /
                    Y.LAMPORTS_PER_SOL),
                  ev(e),
                  getUpdatedBalance(x.publicKey, "base"),
                  eh(x.publicKey.toString()),
                  console.log("钱包设置完成"),
                  ey(!0);
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包设置错误!",
                });
                return;
              }
            },
            msg_success = (e) => {
              eK.open({ type: "success", content: e });
            },
            msg_error = (e) => {
              eK.open({ type: "error", content: e });
            };
          async function buyFunction(e, a, l) {
            if (
              ((tT = parseFloat(Z)),
              console.log(Z),
              e.quoteMint.toString() === tU)
            ) {
              let n = await swap_Buy(e, a * Y.LAMPORTS_PER_SOL, l);
              if (tY) {
                let e = getRandomTipAccount(),
                  a = Number(eG.current);
                n.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: x.publicKey,
                    toPubkey: e,
                    lamports: a * Y.LAMPORTS_PER_SOL,
                  })
                );
                let l = await t.getLatestBlockhash();
                (n.feePayer = x.publicKey),
                  (n.recentBlockhash = l.blockhash),
                  n.sign(x);
                let s = e8().encode(n.serialize()),
                  o = [];
                o.push(s);
                let r = await sendBundle(o);
                return console.log("swapped in tx id:", r), r;
              }
              {
                let e = await p.sendTransaction(n, [x], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
            {
              let n = await swapOut_Buy(e, a * Y.LAMPORTS_PER_SOL, l);
              if (tY) {
                let e = getRandomTipAccount(),
                  a = Number(eG.current);
                n.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: x.publicKey,
                    toPubkey: e,
                    lamports: a * Y.LAMPORTS_PER_SOL,
                  })
                );
                let l = await t.getLatestBlockhash();
                (n.feePayer = x.publicKey),
                  (n.recentBlockhash = l.blockhash),
                  n.sign(x);
                let s = e8().encode(n.serialize()),
                  o = [];
                o.push(s);
                let r = await sendBundle(o);
                return console.log("swapped in tx id:", r), r;
              }
              {
                let e = await p.sendTransaction(n, [x], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
          }
          let handleBuy = async () => {
              if (!ep) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!g) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              let e = document.getElementById("buyamt"),
                t = null == e ? void 0 : e.value;
              if ("" !== t)
                try {
                  let e = Number(t);
                  e < ew - 0.002
                    ? (await buyFunction(g, e, 0), msg_success("交易已提交"))
                    : msg_error("SOL余额不足");
                } catch (e) {
                  console.log(e), msg_error("交易失败");
                }
            },
            handleBuyFromAmt = async (e) => {
              if (!ep) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!g) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              try {
                e < ew - 0.002
                  ? (await buyFunction(g, e, 0), msg_success("交易已提交"))
                  : msg_error("SOL余额不足");
              } catch (e) {
                console.log(e), msg_error("交易失败");
              }
            };
          function getDecByKeys(e) {
            return e.quoteMint.toString() === tU
              ? e.baseDecimals
              : e.quoteDecimals;
          }
          let SaleTokenByPer = async (e) => {
            if (!ep) {
              notify({
                type: "error",
                message: "错误",
                description: "钱包未设置!",
              });
              return;
            }
            if (!g) {
              notify({
                type: "error",
                message: "错误",
                description: "请先填写代币",
              });
              return;
            }
            if (0 === eN) {
              notify({
                type: "error",
                message: "错误",
                description: "当前代币没有余额",
              });
              return;
            }
            try {
              let t = getDecByKeys(g);
              console.log(t);
              let a = Math.floor((Math.floor(eN * Math.pow(10, t)) / 100) * e);
              console.log("saleamtV", a),
                await saleFunction(g, a),
                msg_success("卖出交易已提交");
            } catch (e) {
              msg_error("卖出交易失败,请尝试减少数量"), console.log(e);
            }
          };
          async function saleFunction(e, a) {
            if (
              ((tT = parseFloat(Z)),
              console.log(Z),
              e.quoteMint.toString() === tU)
            ) {
              let l = await swap_Sale_wallet(e, BigInt(a), BigInt(0), x);
              if (tY) {
                let e = getRandomTipAccount(),
                  a = Number(eG.current);
                l.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: x.publicKey,
                    toPubkey: e,
                    lamports: a * Y.LAMPORTS_PER_SOL,
                  })
                );
                let n = await t.getLatestBlockhash();
                (l.feePayer = x.publicKey),
                  (l.recentBlockhash = n.blockhash),
                  l.sign(x);
                let s = e8().encode(l.serialize()),
                  o = [];
                o.push(s);
                let r = await sendBundle(o);
                return console.log("swapped in tx id:", r), r;
              }
              {
                let e = await p.sendTransaction(l, [x], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
            {
              let l = await swapOut_Sale_wallet(e, BigInt(a), BigInt(0), x);
              if (tY) {
                let e = getRandomTipAccount(),
                  a = Number(eG.current);
                l.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: x.publicKey,
                    toPubkey: e,
                    lamports: a * Y.LAMPORTS_PER_SOL,
                  })
                );
                let n = await t.getLatestBlockhash();
                (l.feePayer = x.publicKey),
                  (l.recentBlockhash = n.blockhash),
                  l.sign(x);
                let s = e8().encode(l.serialize()),
                  o = [];
                o.push(s);
                let r = await sendBundle(o);
                return console.log("swapped in tx id:", r), r;
              }
              {
                let e = await p.sendTransaction(l, [x], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
          }
          let handleSale = async () => {
              if (!ep) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!g) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              let e = document.getElementById("saleamt"),
                t = null == e ? void 0 : e.value;
              if ("" !== t)
                try {
                  let e = Number(t),
                    a = getDecByKeys(g),
                    l = Math.floor(e * Math.pow(10, a));
                  console.log("saleAmount", e),
                    console.log("saleamtV", l),
                    await saleFunction(g, l),
                    msg_success("卖出交易已提交");
                } catch (e) {
                  msg_error("卖出交易失败");
                }
            },
            handleRefTokenAmount = async () => {
              if (g) {
                eL(!0), eT(0);
                try {
                  let e = await getTokenAccount(p, x.publicKey);
                  for (let t = 0; t < e.length; t++) {
                    let a = e[t].account.data.parsed.info;
                    if (g.quoteMint.toString() === tU) {
                      if (a.mint === g.baseMint.toString()) {
                        let e = a.tokenAmount.uiAmount;
                        eT(Number(e)), eL(!1);
                      }
                    } else if (a.mint === g.quoteMint.toString()) {
                      let e = a.tokenAmount.uiAmount;
                      eT(Number(e)), eL(!1);
                    }
                  }
                } catch (e) {
                  console.log("getTokenAccount Error~!", e), eL(!1);
                } finally {
                  eL(!1);
                }
              }
            };
          function getKeysMintStr(e) {
            return e.quoteMint.toString() === tU
              ? e.baseMint.toString()
              : e.quoteMint.toString();
          }
          let initLogs = async () => {
            console.log("listening for new raydium pools..."),
              p.onLogs(tQ, async (e) => {
                for (let a of e.logs)
                  if (a.includes("ray_log") && tz) {
                    var t;
                    let e =
                      null === (t = a.split(" ").pop()) || void 0 === t
                        ? void 0
                        : t.replace("'", "");
                    if (e) {
                      let {
                          market: t,
                          baseDecimals: a,
                          quoteDecimals: l,
                          openTime: n,
                        } = tG.decode(tF.from(e, "base64")),
                        s = Number(n.toString()),
                        o = new Date().getTime() / 1e3,
                        r = await getKeys(t, a, l);
                      if (r.quoteMint.toString() === tU) {
                        let e = r.baseMint.toBase58();
                        addSoftLog("检测到新代币: ".concat(e));
                        try {
                          if (tJ) {
                            let t = await (0, en.ih)(p, r.baseMint);
                            if ((console.log("Mint:", t), t.freezeAuthority)) {
                              addSoftLog(
                                "代币: ".concat(
                                  truncateString(e, 8, 4, 4),
                                  "未放弃冻结权限  跳过"
                                )
                              );
                              return;
                            }
                            {
                              if (s > o) {
                                console.log(s), console.log(o);
                                let e = {
                                  ...r,
                                  Tick: 0,
                                  SaleCount: 0,
                                  openTime: s,
                                  isBuy: !1,
                                };
                                tH.push(e),
                                  addSoftLog(
                                    "尚未开盘 ".concat(getKeysMintStr(r), " ")
                                  );
                                return;
                              }
                              let t = await buyFunction(r, y, 0),
                                a = {
                                  ...r,
                                  Tick: getTickCount(),
                                  SaleCount: 0,
                                  openTime: s,
                                  isBuy: !0,
                                };
                              tH.push(a),
                                addSoftLog(
                                  "买入: "
                                    .concat(truncateString(e, 8, 4, 4), " , ")
                                    .concat(y, " SOL 成功 哈希: ")
                                    .concat(t)
                                );
                            }
                          } else {
                            if (s > o) {
                              console.log(s), console.log(o);
                              let e = {
                                ...r,
                                Tick: 0,
                                SaleCount: 0,
                                openTime: s,
                                isBuy: !1,
                              };
                              tH.push(e),
                                addSoftLog(
                                  "尚未开盘 ".concat(getKeysMintStr(r), " ")
                                );
                              return;
                            }
                            let t = await buyFunction(r, y, 0),
                              a = {
                                ...r,
                                Tick: getTickCount(),
                                SaleCount: 0,
                                openTime: s,
                                isBuy: !0,
                              };
                            tH.push(a),
                              addSoftLog(
                                "买入: "
                                  .concat(truncateString(e, 8, 4, 4), " , ")
                                  .concat(y, " SOL 成功 哈希: ")
                                  .concat(t)
                              );
                          }
                        } catch (e) {
                          console.log(
                            "pool probably wasn't open yet:",
                            n.toString(),
                            Date.now()
                          );
                        }
                      } else if (r.baseMint.toString() === tU) {
                        let e = r.quoteMint.toBase58();
                        addSoftLog("检测到新代币#: ".concat(e));
                        try {
                          if (tJ) {
                            let t = await (0, en.ih)(p, r.quoteMint);
                            if ((console.log("Mint:", t), t.freezeAuthority)) {
                              addSoftLog(
                                "代币: ".concat(
                                  truncateString(e, 8, 4, 4),
                                  "未放弃冻结权限  跳过"
                                )
                              );
                              return;
                            }
                            {
                              let t = await swapOut_Buy(
                                  r,
                                  y * Y.LAMPORTS_PER_SOL,
                                  0
                                ),
                                a = await p.sendTransaction(t, [x], {
                                  skipPreflight: !0,
                                });
                              console.log("swapped in tx id:", a);
                              let l = {
                                ...r,
                                Tick: getTickCount(),
                                SaleCount: 0,
                                openTime: s,
                                isBuy: !0,
                              };
                              tH.push(l),
                                addSoftLog(
                                  "买入#: "
                                    .concat(truncateString(e, 8, 4, 4), " , ")
                                    .concat(y, " SOL 成功 哈希: ")
                                    .concat(a)
                                );
                            }
                          } else {
                            let t = await swapOut_Buy(
                                r,
                                y * Y.LAMPORTS_PER_SOL,
                                0
                              ),
                              a = await p.sendTransaction(t, [x], {
                                skipPreflight: !0,
                              });
                            console.log("swapped in tx id:", a);
                            let l = {
                              ...r,
                              Tick: getTickCount(),
                              SaleCount: 0,
                              openTime: s,
                              isBuy: !0,
                            };
                            tH.push(l),
                              addSoftLog(
                                "买入#: "
                                  .concat(truncateString(e, 8, 4, 4), " , ")
                                  .concat(y, " SOL 成功 哈希: ")
                                  .concat(a)
                              );
                          }
                        } catch (e) {
                          console.log(
                            "pool probably wasn't open yet:",
                            n.toString(),
                            Date.now()
                          );
                        }
                      }
                    }
                  }
              });
          };
          async function getTokenAmountByMint(e) {
            try {
              let t = await getTokenAccount(p, x.publicKey);
              for (let a = 0; a < t.length; a++) {
                let l = t[a].account.data.parsed.info;
                if (l.mint === e) {
                  let e = l.tokenAmount.uiAmount;
                  return { AtaKey: t[a].pubkey, Amount: Number(e) };
                }
              }
            } catch (e) {
              console.log("getTokenAccount Error~!", e);
            }
            return { AtaKey: -1, Amount: -1 };
          }
          async function mySaleFunction() {
            if (!tz || !tX) return;
            let e = getTickCount();
            for (let t = 0; t < tH.length; t++) {
              let a = tH[t];
              if (a.isBuy) {
                if (e - a.Tick >= h) {
                  a.Tick += 15e3;
                  let e = await getTokenAmountByMint(getKeysMintStr(a));
                  if (-1 !== e.Amount) {
                    if (0 === e.Amount) {
                      if (t$) {
                        let t = await autoCloseAccount(e.AtaKey, x.publicKey);
                        console.log("关闭账户~");
                        let a = await p.sendTransaction(t, [x], {
                          skipPreflight: !0,
                        });
                        console.log("swapped in tx id:", a),
                          addSoftLog("自动关闭账户成功");
                      }
                      tH.splice(t, 1);
                      break;
                    }
                    if (a.quoteMint.toString() === tU)
                      try {
                        if (((a.SaleCount += 1), a.SaleCount >= 5)) {
                          addSoftLog(
                            "".concat(
                              truncateString(a.baseMint.toBase58(), 8, 4, 4),
                              " 卖出失败,跳过"
                            )
                          ),
                            tH.splice(t, 1);
                          break;
                        }
                        let l = Math.floor(
                          e.Amount * Math.pow(10, a.baseDecimals)
                        );
                        console.log("saleamtV", l);
                        let n = await saleFunction(a, l);
                        addSoftLog(
                          "卖出 "
                            .concat(
                              truncateString(a.baseMint.toBase58(), 8, 4, 4),
                              " 数量:"
                            )
                            .concat(e.Amount, " 完成 哈希: ")
                            .concat(n)
                        );
                      } catch (e) {
                        console.log(e),
                          addSoftLog(
                            "卖出 ".concat(
                              truncateString(a.baseMint.toBase58(), 8, 4, 4),
                              " 失败"
                            )
                          );
                      }
                    else if (a.baseMint.toString() === tU)
                      try {
                        if (((a.SaleCount += 1), a.SaleCount >= 5)) {
                          addSoftLog(
                            "".concat(
                              truncateString(a.quoteMint.toBase58(), 8, 4, 4),
                              " 卖出失败,跳过"
                            )
                          ),
                            tH.splice(t, 1);
                          break;
                        }
                        let l = Math.floor(
                          e.Amount * Math.pow(10, a.quoteDecimals)
                        );
                        console.log("saleamtV", l);
                        let n = await saleFunction(a, l);
                        addSoftLog(
                          "卖出# "
                            .concat(
                              truncateString(a.quoteMint.toBase58(), 8, 4, 4),
                              " 数量:"
                            )
                            .concat(e.Amount, " 完成 哈希: ")
                            .concat(n)
                        );
                      } catch (e) {
                        console.log(e),
                          addSoftLog(
                            "卖出# ".concat(
                              truncateString(a.quoteMint.toBase58(), 8, 4, 4),
                              " 失败"
                            )
                          );
                      }
                  } else {
                    addSoftLog(
                      "#没有代币 ".concat(
                        truncateString(a.baseMint.toBase58(), 8, 4, 4)
                      )
                    ),
                      tH.splice(t, 1);
                    break;
                  }
                }
              } else {
                let e = new Date().getTime() / 1e3;
                if (e >= a.openTime) {
                  if (a.quoteMint.toString() === tU) {
                    let e = a.baseMint.toBase58();
                    addSoftLog("代币开盘: ".concat(e)),
                      (a.Tick = getTickCount()),
                      (a.isBuy = !0);
                    try {
                      Y.LAMPORTS_PER_SOL;
                      let t = await buyFunction(a, y, 0);
                      addSoftLog(
                        "买入: "
                          .concat(truncateString(e, 8, 4, 4), " , ")
                          .concat(y, " SOL 成功 哈希: ")
                          .concat(t)
                      );
                    } catch (e) {
                      console.log(e);
                    }
                  } else if (a.baseMint.toString() === tU) {
                    let e = a.quoteMint.toBase58();
                    addSoftLog("检测到新代币#: ".concat(e));
                    try {
                      let e = a.baseMint.toBase58();
                      addSoftLog("代币开盘#: ".concat(e)),
                        (a.Tick = getTickCount()),
                        (a.isBuy = !0);
                      try {
                        let t = await buyFunction(a, y, 0);
                        console.log("swapped in tx id:", t),
                          addSoftLog(
                            "买入#: "
                              .concat(truncateString(e, 8, 4, 4), " , ")
                              .concat(y, " SOL 成功 哈希: ")
                              .concat(t)
                          );
                      } catch (e) {
                        console.log(e);
                      }
                    } catch (e) {
                      console.log(e);
                    }
                  }
                }
              }
            }
          }
          let confirmSaleAll = async (e) => {
              console.log(e), addSoftLog("正在执行一键清仓");
              try {
                let e = await getTokenAccount(p, x.publicKey);
                for (let t = 0; t < e.length; t++) {
                  let a = e[t].account.data.parsed.info,
                    l = a.tokenAmount.uiAmount;
                  if (l > 0) {
                    console.log("正在查询: ".concat(a.mint)),
                      addSoftLog("正在查询: ".concat(a.mint));
                    let e = (function (e) {
                      for (let t = 0; t < tH.length; t++) {
                        let a = tH[t];
                        if (a.baseMint === e || a.quoteMint) return a;
                      }
                      return null;
                    })(new Y.PublicKey(a.mint));
                    if (null !== e) {
                      if (e.quoteMint.toString() === tU) {
                        let t = Math.floor(l * Math.pow(10, e.baseDecimals));
                        console.log("saleamtV", t);
                        let a = await saleFunction(e, t);
                        addSoftLog(
                          "卖出 "
                            .concat(e.baseMint.toBase58(), " 数量:")
                            .concat(l, " 完成 哈希: ")
                            .concat(a)
                        );
                      } else if (e.baseMint.toString() === tU) {
                        let t = Math.floor(l * Math.pow(10, e.quoteDecimals));
                        console.log("saleamtV", t);
                        let a = await saleFunction(e, t);
                        addSoftLog(
                          "卖出# "
                            .concat(e.baseMint.toBase58(), " 数量:")
                            .concat(l, " 完成 哈希: ")
                            .concat(a)
                        );
                      }
                    } else {
                      let t = await queryLpPair(a.mint, tU),
                        n = null;
                      if ((console.log("thepoolId:", t), t)) {
                        if (t.Raydium_LiquidityPoolv4.length > 0) {
                          if (t.Raydium_LiquidityPoolv4.length <= 1)
                            console.log("只有1个池子"),
                              (n = t.Raydium_LiquidityPoolv4[0]);
                          else {
                            console.log("大于1个池子,找到最大的池子");
                            let e = t.Raydium_LiquidityPoolv4.reduce(
                              (e, t) => (t.lpReserve > e.lpReserve ? t : e),
                              t.Raydium_LiquidityPoolv4[0]
                            );
                            console.log("最高的lpReserve池子信息：", e),
                              (n = e);
                          }
                        }
                      } else {
                        notify({
                          type: "error",
                          message: "错误",
                          description: "未查询到对应的池子信息",
                        }),
                          await (0, ed._v)(3333);
                        continue;
                      }
                      if (!n) {
                        await (0, ed._v)(3333);
                        continue;
                      }
                      let s = new Y.PublicKey(n.marketId),
                        o = a.tokenAmount.decimals;
                      if (n.quoteMint === tU) {
                        let t = n.quoteDecimal;
                        e = await getKeys(s, o, t);
                      } else {
                        let t = n.baseDecimal;
                        e = await getKeys(s, t, o);
                      }
                      if ((console.log(e), e.quoteMint.toString() === tU)) {
                        let t = Math.floor(
                          l * Math.pow(10, a.tokenAmount.decimals)
                        );
                        console.log("saleamtV", t);
                        let n = await saleFunction(e, t);
                        addSoftLog(
                          "卖出 "
                            .concat(e.baseMint.toBase58(), " 数量:")
                            .concat(l, " 完成 哈希: ")
                            .concat(n)
                        ),
                          await (0, ed._v)(3333);
                      } else if (e.baseMint.toString() === tU) {
                        let t = Math.floor(
                          l * Math.pow(10, a.tokenAmount.decimals)
                        );
                        console.log("saleamtV", t);
                        let n = await saleFunction(e, t);
                        addSoftLog(
                          "卖出# "
                            .concat(e.quoteMint.toBase58(), " 数量:")
                            .concat(l, " 完成 哈希: ")
                            .concat(n)
                        ),
                          await (0, ed._v)(3333);
                      }
                    }
                  }
                }
              } catch (e) {
                console.log("getTokenAccount Error~!", e);
              }
              addSoftLog("一键清仓完成");
            },
            handleViewHold = async () => {
              addSoftLog("持仓列表: ");
              try {
                let e = await getTokenAccount(p, x.publicKey);
                console.log(e);
                for (let t = 0; t < e.length; t++) {
                  let a = e[t].account.data.parsed.info,
                    l = a.tokenAmount.uiAmount;
                  l > 0 &&
                    (console.log("".concat(a.mint, " 数量:").concat(l)),
                    addSoftLog("".concat(a.mint, " 数量:").concat(l)));
                }
              } catch (e) {
                console.log("getTokenAccount Error~!", e);
              }
            },
            confirmCloseAll = async (e) => {
              console.log(e), addSoftLog("正在执行一键关闭账户");
              try {
                let e = await getTokenAccount(p, x.publicKey);
                for (let t = 0; t < e.length; t++) {
                  let a = e[t].account.data.parsed.info,
                    l = a.tokenAmount.uiAmount;
                  if (0 === l) {
                    let l = await autoCloseAccount(e[t].pubkey, x.publicKey);
                    console.log("关闭账户~");
                    let n = await p.sendTransaction(l, [x], {
                      skipPreflight: !0,
                    });
                    console.log("swapped in tx id:", n),
                      addSoftLog("自动关闭账户成功,关联的代币:".concat(a.mint));
                  }
                }
              } catch (e) {
                console.log("getTokenAccount Error~!", e);
              }
              addSoftLog("执行一键关闭账户完成");
            },
            setEmvModeProc = (e) => {
              e
                ? tz && addSoftLog("打开MEV模式")
                : tz && addSoftLog("关闭MEV模式"),
                ez(e);
            },
            onChangeJitoLevel = (e) => {
              let t = e.target.value;
              eH(t),
                1 === t
                  ? (eU(3e-5), (eG.current = 3e-5))
                  : 2 === t
                  ? (eU(0.001), (eG.current = 0.001))
                  : 3 === t && (eU(0.01), (eG.current = 0.01));
            };
          return (0, V.jsxs)("div", {
            children: [
              eM,
              (0, V.jsx)(ej.Z, {
                vertical: !0,
                gap: "middle",
                children: (0, V.jsxs)(ej.Z, {
                  gap: "middle",
                  justify: "flex-start",
                  align: "flex-start",
                  children: [
                    ep
                      ? ""
                      : (0, V.jsx)(to.Z, {
                          style: { width: 400 },
                          title: "帐号信息",
                          children: (0, V.jsx)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: (0, V.jsxs)(tm.default, {
                              direction: "horizontal",
                              children: [
                                (0, V.jsx)(e$.default.Password, {
                                  placeholder: "钱包私钥填写",
                                  id: "userwallet",
                                  visibilityToggle: {
                                    visible: c,
                                    onVisibleChange: d,
                                  },
                                }),
                                (0, V.jsx)(eb(), {
                                  style: { width: 80 },
                                  onClick: handleSetWallet,
                                  children: "设置",
                                }),
                              ],
                            }),
                          }),
                        }),
                    (0, V.jsxs)(to.Z, {
                      style: { width: 500 },
                      title: "代币管理",
                      children: [
                        (0, V.jsx)(ej.Z, {
                          gap: 10,
                          justify: "flex-start",
                          align: "center",
                          children: (0, V.jsx)(e$.default, {
                            placeholder: "代币地址",
                            onChange: handleTokenChange,
                          }),
                        }),
                        0 === u
                          ? (0, V.jsx)(eB.Z, {
                              icon: (0, V.jsx)(tb.Z, { spin: !0 }),
                              color: "processing",
                              style: { fontSize: "12px" },
                              children: "查询中",
                            })
                          : 1 === u
                          ? (0, V.jsx)(eB.Z, {
                              icon: (0, V.jsx)(th.Z, {}),
                              color: "error",
                              style: { fontSize: "12px" },
                              children: S,
                            })
                          : "",
                        (0, V.jsx)(tL.Z, { children: "代币信息" }),
                        (0, V.jsx)(ej.Z, {
                          style: { marginTop: 10 },
                          justify: "flex-start",
                          align: "center",
                          children: (0, V.jsxs)(td.Z, {
                            align: "middle",
                            children: [
                              (0, V.jsx)(ti.Z, {
                                children: (0, V.jsx)(ts.ZP, {
                                  src: "".concat(W),
                                }),
                              }),
                              (0, V.jsxs)(ti.Z, {
                                flex: "auto",
                                style: { marginLeft: 16 },
                                children: [
                                  (0, V.jsx)("div", {
                                    children: (0, V.jsx)("strong", {
                                      children: q,
                                    }),
                                  }),
                                  (0, V.jsx)("div", {
                                    children: (0, V.jsx)(i, {
                                      type: "secondary",
                                      children: j,
                                    }),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "安全指数: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(eS.default, {
                                title:
                                  "安全指数(根据代币权限,流动性池,持币数据等判断因素) 此数据仅供参考,非投资建议!",
                                children: (0, V.jsx)(tB.Z, {
                                  disabled: !0,
                                  allowHalf: !0,
                                  value: E,
                                }),
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "价格: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(i, { children: "Nan" }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "市值: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(i, { children: "Nan" }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "安全: " }),
                            (0, V.jsxs)("div", {
                              style: { marginLeft: 10 },
                              children: [
                                T
                                  ? (0, V.jsx)(eS.default, {
                                      title:
                                        "此代币增发权限未丢弃,可随时增发代币",
                                      children: (0, V.jsx)(eB.Z, {
                                        color: "red",
                                        children: "Mint权限丢弃❌",
                                      }),
                                    })
                                  : (0, V.jsxs)(eS.default, {
                                      title:
                                        "此代币增发权限已丢弃,不能增发代币",
                                      children: [
                                        (0, V.jsx)(eB.Z, {
                                          color: "green",
                                          children: "Mint权限丢弃✅",
                                        }),
                                        " ",
                                      ],
                                    }),
                                P
                                  ? (0, V.jsx)(eS.default, {
                                      title:
                                        "此代币冻结权限未丢弃,Dev可以冻结账户",
                                      children: (0, V.jsx)(eB.Z, {
                                        color: "red",
                                        children: "冻结权限丢弃❌",
                                      }),
                                    })
                                  : (0, V.jsxs)(eS.default, {
                                      title: "此代币冻结权限已丢弃",
                                      children: [
                                        (0, V.jsx)(eB.Z, {
                                          color: "green",
                                          children: "冻结权限丢弃✅",
                                        }),
                                        " ",
                                      ],
                                    }),
                                L
                                  ? (0, V.jsx)(eS.default, {
                                      title: "此代币流动性池子已全部燃烧",
                                      children: (0, V.jsxs)(eB.Z, {
                                        color: "green",
                                        children: ["燃烧池子✅ (", K, ")"],
                                      }),
                                    })
                                  : (0, V.jsxs)(eS.default, {
                                      title:
                                        "此代币流动性池未全部燃烧,未燃烧部分Dev可以撤池",
                                      children: [
                                        (0, V.jsxs)(eB.Z, {
                                          color: "red",
                                          children: ["燃烧池子❌ (", K, ")"],
                                        }),
                                        " ",
                                      ],
                                    }),
                              ],
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "Top10持仓: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                C <= 30
                                  ? (0, V.jsxs)(eB.Z, {
                                      icon: (0, V.jsx)(eP.Z, {}),
                                      color: "green",
                                      children: [C, "%"],
                                    })
                                  : C > 30 && C <= 50
                                  ? (0, V.jsxs)(eB.Z, {
                                      icon: (0, V.jsx)(tM.Z, {}),
                                      color: "warning",
                                      children: [C, "%"],
                                    })
                                  : (0, V.jsxs)(eB.Z, {
                                      icon: (0, V.jsx)(th.Z, {}),
                                      color: "red",
                                      children: [C, "%"],
                                    }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(eS.default, {
                                title:
                                  "如持币地址过多导致查询过慢，可【刷新页面】后关闭此选项",
                                children: (0, V.jsx)(tr.default, {
                                  defaultChecked: !0,
                                  id: "checktop",
                                  children: "检查持仓信息",
                                }),
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "池子: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: el
                                ? (0, V.jsx)(eB.Z, {
                                    color: "green",
                                    children: "已开放交易✅",
                                  })
                                : (0, V.jsx)(eB.Z, {
                                    color: "red",
                                    children: "未开始交易❌",
                                  }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "创建时间: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(i, { children: eo }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "SOL余额: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(i, {
                                children: [ei, " SOL"],
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "代币链接: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                "" === X
                                  ? (0, V.jsx)(tD, {
                                      href: "",
                                      target: "_blank",
                                      children: "❌官网",
                                    })
                                  : (0, V.jsx)(tD, {
                                      href: X,
                                      target: "_blank",
                                      children: "✅官网",
                                    }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                "" === $
                                  ? (0, V.jsx)(tD, {
                                      href: "",
                                      target: "_blank",
                                      children: "❌Twitter",
                                    })
                                  : (0, V.jsx)(tD, {
                                      href: $,
                                      target: "_blank",
                                      children: "✅Twitter",
                                    }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                "" === et
                                  ? (0, V.jsx)(tD, {
                                      href: "",
                                      target: "_blank",
                                      children: "❌Telegram",
                                    })
                                  : (0, V.jsx)(tD, {
                                      href: et,
                                      target: "_blank",
                                      children: "✅Telegram",
                                    }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "相关链接: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(tD, {
                                href: "https://gmgn.ai/sol/token/".concat(j),
                                target: "_blank",
                                children: "Gmgn",
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(tD, {
                                href: "https://birdeye.so/token/".concat(
                                  j,
                                  "?chain=solana"
                                ),
                                target: "_blank",
                                children: "Birdeye",
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(tD, {
                                href: "https://dexscreener.com/solana/".concat(
                                  j
                                ),
                                target: "_blank",
                                children: "Dexscreener",
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(tL.Z, {
                          children: ["Top10持仓列表 总持币数:(", e2, ")"],
                        }),
                        (0, V.jsx)("div", {
                          style: { marginBottom: 10, marginTop: 10 },
                          children: (0, V.jsx)(tV, {
                            rows: 8,
                            wrap: "off",
                            value: R,
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)(to.Z, {
                      style: { width: 450 },
                      title: (0, V.jsxs)("div", {
                        children: [
                          (0, V.jsx)("span", { children: "交易控制台" }),
                          ep
                            ? (0, V.jsx)("span", {
                                style: {
                                  fontSize: "12px",
                                  color: "#888",
                                  marginLeft: "8px",
                                },
                                children: ef,
                              })
                            : "",
                        ],
                      }),
                      children: [
                        (0, V.jsxs)(ej.Z, {
                          style: { marginBottom: 5 },
                          justify: "flex-start",
                          align: "center",
                          children: [
                            (0, V.jsx)(eb(), {
                              style: 0 === eC ? { borderColor: "blue" } : {},
                              icon: (0, V.jsx)(t_.Z, {}),
                              onClick: () => e_(0),
                              children: "手动",
                            }),
                            (0, V.jsx)(eb(), {
                              style: 1 === eC ? { borderColor: "blue" } : {},
                              icon: (0, V.jsx)(tR.Z, {}),
                              onClick: () => e_(1),
                              children: "自动",
                            }),
                            (0, V.jsx)(eb(), {
                              style: 2 === eC ? { borderColor: "blue" } : {},
                              icon: (0, V.jsx)(tO.Z, {}),
                              onClick: () => e_(2),
                              children: "跟投",
                            }),
                          ],
                        }),
                        0 === eC
                          ? (0, V.jsxs)("div", {
                              children: [
                                (0, V.jsx)(eS.default, {
                                  title:
                                    "在此处输入代币地址可以更快速的Ready买入 卖出  (不查询代币池子等信息)",
                                  children: (0, V.jsx)(e$.default, {
                                    placeholder: "快速查找代币地址",
                                    onChange: handleTokenChange1,
                                  }),
                                }),
                                0 === b
                                  ? (0, V.jsx)(eB.Z, {
                                      icon: (0, V.jsx)(tb.Z, { spin: !0 }),
                                      color: "processing",
                                      style: { fontSize: "12px" },
                                      children: "查询中",
                                    })
                                  : "",
                                ep
                                  ? (0, V.jsxs)("div", {
                                      children: [
                                        (0, V.jsx)(ej.Z, {
                                          style: { marginTop: 0 },
                                          justify: "flex-start",
                                          align: "center",
                                          children: (0, V.jsxs)(td.Z, {
                                            align: "middle",
                                            children: [
                                              (0, V.jsx)(ti.Z, {
                                                children: (0, V.jsx)(ts.ZP, {
                                                  src: "".concat(W),
                                                }),
                                              }),
                                              (0, V.jsxs)(ti.Z, {
                                                flex: "auto",
                                                style: { marginLeft: 16 },
                                                children: [
                                                  (0, V.jsx)("div", {
                                                    children: (0, V.jsx)(
                                                      "strong",
                                                      { children: q }
                                                    ),
                                                  }),
                                                  (0, V.jsx)("div", {
                                                    children: (0, V.jsx)(i, {
                                                      type: "secondary",
                                                      children: truncateString(
                                                        j,
                                                        16,
                                                        8,
                                                        8
                                                      ),
                                                    }),
                                                  }),
                                                ],
                                              }),
                                            ],
                                          }),
                                        }),
                                        (0, V.jsxs)(ej.Z, {
                                          children: [
                                            (0, V.jsxs)(eB.Z, {
                                              bordered: !1,
                                              color: "processing",
                                              children: ["余额: ", eN, " ", q],
                                            }),
                                            eA
                                              ? (0, V.jsx)(tE.default, {})
                                              : (0, V.jsx)(tI.Z, {
                                                  onClick: handleRefTokenAmount,
                                                }),
                                          ],
                                        }),
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            marginTop: 5,
                                            marginBottom: 5,
                                          },
                                          children: (0, V.jsxs)(eB.Z, {
                                            bordered: !1,
                                            color: "processing",
                                            children: ["SOL余额: ", ew, " SOL"],
                                          }),
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsxs)(ej.Z, {
                                  style: { marginTop: 10, marginBottom: 10 },
                                  children: [
                                    (0, V.jsx)(i, {
                                      type: "success",
                                      children: "买入:",
                                    }),
                                    " ",
                                    eY
                                      ? (0, V.jsx)(eB.Z, {
                                          style: { marginLeft: 5 },
                                          icon: (0, V.jsx)(eP.Z, {}),
                                          color: "success",
                                          children: "Ready",
                                        })
                                      : "",
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", gap: "6px" },
                                  children: [
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      onClick: () => handleBuyFromAmt(0.01),
                                      children: "0.01",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      onClick: () => handleBuyFromAmt(0.1),
                                      children: "0.1",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      onClick: () => handleBuyFromAmt(0.5),
                                      children: "0.5",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      icon: (0, V.jsx)(tC.Z, {}),
                                      disabled: !0,
                                    }),
                                  ],
                                }),
                                (0, V.jsx)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: (0, V.jsxs)(tm.default.Compact, {
                                    style: { width: "60%" },
                                    children: [
                                      (0, V.jsx)(e$.default, {
                                        id: "buyamt",
                                        style: { borderColor: "green" },
                                        placeholder: "自定义金额",
                                      }),
                                      (0, V.jsx)(eb(), {
                                        style: { borderColor: "green" },
                                        onClick: handleBuy,
                                        children: "Buy",
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: [
                                    (0, V.jsx)(i, { children: "高级选项:" }),
                                    (0, V.jsx)("div", {
                                      style: { marginLeft: 10 },
                                      children: (0, V.jsx)(e1.Z, {
                                        onChange: () => {
                                          em(!eu);
                                        },
                                      }),
                                    }),
                                  ],
                                }),
                                eu
                                  ? (0, V.jsxs)("div", {
                                      children: [
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            display: "flex",
                                            marginTop: "6px",
                                          },
                                          children: (0, V.jsx)("div", {
                                            style: { marginLeft: 10 },
                                            children: (0, V.jsx)(tr.default, {
                                              disabled: !0,
                                              children: "自动卖出",
                                            }),
                                          }),
                                        }),
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            display: "flex",
                                            marginTop: "6px",
                                          },
                                          children: (0, V.jsxs)(
                                            e0.default.Group,
                                            {
                                              children: [
                                                (0, V.jsx)(e0.default, {
                                                  value: 1,
                                                  disabled: !0,
                                                  children: "按时间",
                                                }),
                                                (0, V.jsx)(e0.default, {
                                                  value: 2,
                                                  disabled: !0,
                                                  children: "按价格",
                                                }),
                                                (0, V.jsx)(e0.default, {
                                                  value: 3,
                                                  disabled: !0,
                                                  children: "按盈利",
                                                }),
                                              ],
                                            }
                                          ),
                                        }),
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            display: "flex",
                                            marginTop: "6px",
                                          },
                                          children: (0, V.jsxs)(
                                            tm.default.Compact,
                                            {
                                              style: { width: "60%" },
                                              children: [
                                                (0, V.jsx)(e$.default, {
                                                  placeholder: "买入(秒)后",
                                                  disabled: !0,
                                                }),
                                                (0, V.jsx)(e$.default, {
                                                  placeholder: "卖出%",
                                                  disabled: !0,
                                                }),
                                              ],
                                            }
                                          ),
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsxs)(ej.Z, {
                                  style: { marginTop: 10, marginBottom: 10 },
                                  children: [
                                    (0, V.jsx)(i, {
                                      type: "danger",
                                      children: "卖出:",
                                    }),
                                    " ",
                                    eY
                                      ? (0, V.jsx)(eB.Z, {
                                          style: { marginLeft: 5 },
                                          icon: (0, V.jsx)(eP.Z, {}),
                                          color: "success",
                                          children: "Ready",
                                        })
                                      : "",
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", gap: "6px" },
                                  children: [
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      onClick: () => SaleTokenByPer(20),
                                      children: "20%",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      onClick: () => SaleTokenByPer(50),
                                      children: "50%",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      onClick: () => SaleTokenByPer(100),
                                      children: "100%",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      icon: (0, V.jsx)(tC.Z, {}),
                                      disabled: !0,
                                    }),
                                  ],
                                }),
                                (0, V.jsx)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: (0, V.jsxs)(tm.default.Compact, {
                                    style: { width: "60%" },
                                    children: [
                                      (0, V.jsx)(e$.default, {
                                        id: "saleamt",
                                        style: { borderColor: "red" },
                                        placeholder: "自定义数量",
                                      }),
                                      (0, V.jsx)(eb(), {
                                        style: { borderColor: "red" },
                                        onClick: handleSale,
                                        children: "Sale",
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "MEV模式" }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eV,
                                      onChange: () => {
                                        setEmvModeProc(!eV);
                                      },
                                    }),
                                  ],
                                }),
                                eV
                                  ? (0, V.jsxs)(ej.Z, {
                                      style: {
                                        display: "flex",
                                        marginTop: "6px",
                                        alignItems: "center",
                                        justifyContent: "flex-end",
                                      },
                                      children: [
                                        (0, V.jsxs)(e0.default.Group, {
                                          value: eW,
                                          onChange: onChangeJitoLevel,
                                          children: [
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 1,
                                              children: "默认",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 2,
                                              children: "高速",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 3,
                                              children: "极速",
                                            }),
                                          ],
                                        }),
                                        (0, V.jsx)(e$.default, {
                                          type: "number",
                                          step: 1e-5,
                                          style: { width: 100 },
                                          value: eQ,
                                          onChange: handleChangeJito,
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsx)(ej.Z, {
                                  justify: "flex-start",
                                  align: "center",
                                  style: { marginTop: 10 },
                                  children: (0, V.jsxs)("span", {
                                    children: [
                                      "交易Gas费(SOL): ",
                                      (0, V.jsxs)(eS.default, {
                                        title: "设置 0 时使用最低Gas费",
                                        children: [
                                          (0, V.jsx)(e$.default, {
                                            placeholder: "买入Gas费",
                                            value: Z,
                                            style: { width: "50%" },
                                            onChange: onChangeBuyGas,
                                          }),
                                          " ",
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsx)(tL.Z, { children: "当前持仓" }),
                              ],
                            })
                          : 1 === eC
                          ? (0, V.jsxs)("div", {
                              children: [
                                (0, V.jsx)(ej.Z, {
                                  style: { marginTop: 5, marginBottom: 5 },
                                  children: (0, V.jsxs)(eB.Z, {
                                    bordered: !1,
                                    color: "processing",
                                    children: ["SOL余额: ", ew, " SOL"],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: [
                                    (0, V.jsx)(i, {
                                      children: "自动买入新池子:",
                                    }),
                                    (0, V.jsx)("div", {
                                      style: { marginLeft: 10 },
                                      children: (0, V.jsx)(e1.Z, {
                                        onChange: (e) => {
                                          if (e) {
                                            if (!x) {
                                              notify({
                                                type: "error",
                                                message: "错误",
                                                description: "请先设置钱包",
                                              });
                                              return;
                                            }
                                            let e =
                                                document.getElementById(
                                                  "autobuyamt"
                                                ),
                                              t = null == e ? void 0 : e.value;
                                            if ("" === t) {
                                              notify({
                                                type: "error",
                                                message: "错误",
                                                description:
                                                  "自动买入数量不能为空",
                                              });
                                              return;
                                            }
                                            if (((y = Number(t)), tX)) {
                                              let e =
                                                  document.getElementById(
                                                    "salesleep"
                                                  ),
                                                t =
                                                  null == e ? void 0 : e.value;
                                              if ("" === t) {
                                                notify({
                                                  type: "error",
                                                  message: "错误",
                                                  description:
                                                    "自动卖出时间不能为空",
                                                });
                                                return;
                                              }
                                              let a = Number(t);
                                              (h = 1e3 * a),
                                                (f = setInterval(
                                                  mySaleFunction,
                                                  1e3
                                                ));
                                            }
                                            tW || (initLogs(), (tW = !0)),
                                              (tz = !0),
                                              addSoftLog(
                                                "开始运行 SOL余额: ".concat(ew)
                                              );
                                          } else
                                            (tz = !1), f && clearInterval(f);
                                        },
                                      }),
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "买入数量" }),
                                    (0, V.jsx)(e$.default, {
                                      id: "autobuyamt",
                                      style: { width: "30%" },
                                      placeholder: "SOL",
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "买入后" }),
                                    (0, V.jsx)(e$.default, {
                                      id: "salesleep",
                                      style: { width: "20%" },
                                      defaultValue: 60,
                                    }),
                                    (0, V.jsx)(i, { children: "(秒)自动卖出" }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eZ,
                                      onChange: () => {
                                        let e = !eZ;
                                        eI(e);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: [
                                    (0, V.jsx)(i, {
                                      children: "过滤未丢弃冻结权限的池子:",
                                    }),
                                    (0, V.jsx)("div", {
                                      style: { marginLeft: 10 },
                                      children: (0, V.jsx)(e1.Z, {
                                        value: eR,
                                        onChange: () => {
                                          eO(!eR);
                                        },
                                      }),
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  children: [
                                    (0, V.jsx)(i, {
                                      children: "卖出后,自动关闭账户",
                                    }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eE,
                                      onChange: () => {
                                        eF(!eE);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "MEV模式" }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eV,
                                      onChange: () => {
                                        setEmvModeProc(!eV);
                                      },
                                    }),
                                  ],
                                }),
                                eV
                                  ? (0, V.jsxs)(ej.Z, {
                                      style: {
                                        display: "flex",
                                        marginTop: "6px",
                                        alignItems: "center",
                                        justifyContent: "flex-end",
                                      },
                                      children: [
                                        (0, V.jsxs)(e0.default.Group, {
                                          value: eW,
                                          onChange: onChangeJitoLevel,
                                          children: [
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 1,
                                              children: "默认",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 2,
                                              children: "高速",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 3,
                                              children: "极速",
                                            }),
                                          ],
                                        }),
                                        (0, V.jsx)(e$.default, {
                                          type: "number",
                                          step: 1e-5,
                                          style: { width: 100 },
                                          value: eQ,
                                          onChange: handleChangeJito,
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsx)(ej.Z, {
                                  justify: "flex-start",
                                  align: "center",
                                  style: { marginTop: 10 },
                                  children: (0, V.jsxs)("span", {
                                    children: [
                                      "交易Gas费(SOL): ",
                                      (0, V.jsxs)(eS.default, {
                                        title: "设置 0 时使用最低Gas费",
                                        children: [
                                          (0, V.jsx)(e$.default, {
                                            placeholder: "买入Gas费",
                                            value: Z,
                                            style: { width: "50%" },
                                            onChange: onChangeBuyGas,
                                          }),
                                          " ",
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  gap: 6,
                                  children: [
                                    (0, V.jsx)(eb(), {
                                      onClick: handleViewHold,
                                      children: "查看持仓",
                                    }),
                                    (0, V.jsx)(tc.Z, {
                                      title: "一键清仓确认",
                                      description:
                                        "执行此操作将出售钱包中的所有代币",
                                      onConfirm: confirmSaleAll,
                                      onCancel: () => {
                                        console.log("cancel");
                                      },
                                      okText: "Yes",
                                      cancelText: "No",
                                      children: (0, V.jsx)(eb(), {
                                        children: "一键清仓",
                                      }),
                                    }),
                                    (0, V.jsx)(tc.Z, {
                                      title: "一键关闭账户",
                                      description:
                                        "关闭所有余额为0的代币账户,可退回少量租金",
                                      onConfirm: confirmCloseAll,
                                      onCancel: () => {
                                        console.log("cancel");
                                      },
                                      okText: "Yes",
                                      cancelText: "No",
                                      children: (0, V.jsx)(eb(), {
                                        children: "一键关闭账户",
                                      }),
                                    }),
                                    (0, V.jsx)(eb(), {
                                      onClick: () => {
                                        eD("");
                                      },
                                      children: "清空日志",
                                    }),
                                  ],
                                }),
                                (0, V.jsx)(tL.Z, { children: "运行日志" }),
                                (0, V.jsx)("div", {
                                  style: { marginBottom: 10, marginTop: 10 },
                                  children: (0, V.jsx)(tV, {
                                    rows: 13,
                                    wrap: "off",
                                    value: eq,
                                  }),
                                }),
                              ],
                            })
                          : (0, V.jsx)("div", {}),
                      ],
                    }),
                  ],
                }),
              }),
            ],
          });
        };
      var t0 = a(34155),
        t1 = a(48764).Buffer;
      let t2 = [],
        t5 = "So11111111111111111111111111111111111111112",
        MarketManageV2View = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            { t: d } = (0, G.$G)("common"),
            [u, m] = (0, z.useState)([]),
            [x, g] = (0, z.useState)([]),
            [p, y] = (0, z.useState)(""),
            [f, h] = (0, z.useState)(""),
            [P, N] = (0, z.useState)(""),
            [T, A] = (0, z.useState)(100),
            [L, B] = (0, z.useState)(100),
            [K, M] = (0, z.useState)(0),
            [C, _] = (0, z.useState)(0),
            [R, O] = (0, z.useState)(!1),
            [Z, I] = (0, z.useState)(""),
            [E, F] = (0, z.useState)(""),
            [q, D] = (0, z.useState)(0),
            [W, X] = (0, z.useState)(""),
            [J, $] = (0, z.useState)(0),
            [ee, et] = (0, z.useState)(0.01),
            [ea, eo] = (0, z.useState)(1),
            [ei, ec] = (0, z.useState)(2),
            [eu, em] = (0, z.useState)(!1),
            [ex, eg] = (0, z.useState)("0.1"),
            [ep, ey] = (0, z.useState)("1000"),
            [eh, ew] = (0, z.useState)("1000"),
            [eS, ev] = (0, z.useState)("100"),
            [eP, eN] = (0, z.useState)(""),
            [eT, eA] = (0, z.useState)("49"),
            [eB, eK] = (0, z.useState)("0.0001"),
            [eM, eC] = (0, z.useState)(!1),
            [e_, eR] = (0, z.useState)(!1),
            [eO, eZ] = (0, z.useState)(""),
            [eI, eE] = (0, z.useState)(""),
            [eF, eq] = (0, z.useState)(""),
            [eW, eH] = (0, z.useState)(0),
            [eQ, eU] = (0, z.useState)(""),
            [eG, eX] = (0, z.useState)(!1),
            [eY, eJ] = (0, z.useState)(!1),
            [e2, e5] = (0, z.useState)(0),
            [e6, e3] = (0, z.useState)(0),
            [e4, e7] = (0, z.useState)(!0),
            [e9, te] = (0, z.useState)(1),
            [tt, ta] = (0, z.useState)(3e-5),
            tl = (0, z.useRef)(tt),
            [tg, tp] = (0, z.useState)("Demo"),
            [ty, tf] = (0, z.useState)(
              "https://api.dicebear.com/7.x/miniavs/svg?seed=0"
            ),
            [th, tb] = (0, z.useState)(
              "5LNruZKwDvQex4aJA8JgYLw5ZYFGpodXBxZErkEbp6Co"
            ),
            tw = [
              "https://mainnet.helius-rpc.com/?api-key=3fa4e1fa-273b-441b-a7c1-285b36e43f74",
            ];
          function checkLocMode() {
            return "true" === t0.env.NEXT_PUBLIC_LOCMODE;
          }
          let [tj, tk] = useMessageBoxPam({
            addrTag: "",
            addrName: "",
            addr1: "",
            hxName: "",
            hxAddr: "",
          });
          (0, z.useEffect)(() => {
            if (((tl.current = tt), eu)) {
              let e = setInterval(() => {
                handleRefAccInfo();
              }, 8e3);
              return () => clearInterval(e);
            }
          }, [eu, tt]);
          let setEmvModeProc = (e) => {
              e ? (0, ed.wv)(1) : (0, ed.wv)(-1), e7(e);
            },
            confirmOneKeyBackToken = async (e) => {
              try {
                let e, t;
                let l = new Y.PublicKey(eQ);
                console.log(S.toString());
                let n = await (0, en.Am)(S, l),
                  s = document.getElementById("backhold"),
                  o = null == s ? void 0 : s.value;
                (e = "" !== o ? Number(o) : 0), console.log(e);
                let r = [],
                  i = !0,
                  c = 0,
                  d = !0;
                if (
                  (addSoftLog("正在执行一键归集Token"),
                  (t = await a.getLatestBlockhash()),
                  u.length > 0)
                ) {
                  for (let s = 0; s < u.length; s++) {
                    let o = u[s];
                    if (o.checked)
                      try {
                        if (o.wallet.publicKey.toString() === l.toString())
                          continue;
                        if (o.mint > 0) {
                          if (d) {
                            d = !1;
                            try {
                              await (0, eV.D0)(a, n);
                            } catch (e) {
                              if (e instanceof ez.We || e instanceof ez.Or) {
                                console.log("自动创建账户");
                                let e = new Y.Transaction();
                                e.add((0, er.Ek)(o.wallet.publicKey, n, l, S)),
                                  (e.feePayer = o.wallet.publicKey),
                                  (e.recentBlockhash = t.blockhash),
                                  e.sign(o.wallet);
                                let a = e8().encode(e.serialize());
                                r.push(a);
                              } else
                                notify({ type: "error", message: "未知错误" });
                            }
                          }
                          let s = await (function (t, a, l, n, s) {
                            let o = new Y.Transaction(),
                              r = Math.floor((n - e) * Math.pow(10, s));
                            return o.add((0, eD.$B)(t, a, l, r, [], es.H_)), o;
                          })(
                            o.ata,
                            n,
                            o.wallet.publicKey,
                            o.mint,
                            o.keys.baseDecimals
                          );
                          if (!checkLocMode()) {
                            let e = new Y.PublicKey(
                              "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                            );
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: o.wallet.publicKey,
                                toPubkey: e,
                                lamports: 0.002 * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          if (
                            (addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    o.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 归集: "
                                )
                                .concat(o.mint)
                            ),
                            (c += o.mint),
                            i)
                          ) {
                            i = !1;
                            let e = getRandomTipAccount(),
                              t = tl.current;
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: o.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          (s.feePayer = o.wallet.publicKey),
                            (s.recentBlockhash = t.blockhash),
                            s.sign(o.wallet);
                          let u = e8().encode(s.serialize());
                          if ((r.push(u), r.length >= 5)) {
                            let e = await sendBundle(r);
                            console.log("绑定包发送成功 id:", e),
                              (i = !0),
                              (r = []),
                              (t = await a.getLatestBlockhash());
                          }
                        }
                      } catch (e) {
                        addSoftLog(
                          "钱包: ".concat(
                            truncateString(
                              o.wallet.publicKey.toString(),
                              16,
                              8,
                              8
                            ),
                            " 执行归集出错"
                          )
                        ),
                          addSoftLog("错误信息: ".concat(e));
                      }
                  }
                  if (r.length > 0) {
                    let e = await sendBundle(r);
                    console.log("绑定包发送成功# id:", e), (i = !0), (r = []);
                  }
                  addSoftLog("一键归集Token完成, 归集数量: ".concat(c));
                }
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "执行一键归集失败,请检查归集地址等配置是否正确",
                }),
                  console.log(e);
              }
            };
          (0, z.useEffect)(() => {
            M((J / 100) * T), _((J / 100) * L), et((q / 100) * T);
          }, [T, J, q, L]);
          let addSoftLog = (e) => {
              eN((t) => t + e + "\n");
            },
            tS = {
              selectedRowKeys: x,
              onChange: (e, t) => {
                g(e),
                  console.log(
                    "selectedRowKeys: ".concat(e),
                    "selectedRows: ",
                    t
                  );
                for (let e = 0; e < u.length; e++) u[e].checked = !1;
                for (let e = 0; e < t.length; e++) t[e].checked = !0;
                e5(t.length);
              },
            },
            { Paragraph: tv, Text: tP } = ek.default,
            { TextArea: tN } = e$.default;
          function getRandomFloat(e, t) {
            return Math.random() * (t - e) + e;
          }
          let handlebuy = async () => {
              addSoftLog("执行一键买入"), console.log("buy");
              let e = parseFloat(ex),
                t = Number(ep);
              if (u.length > 0)
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked)
                    try {
                      if (1 === ea)
                        l.sol > e &&
                          (await buyFunction(l.keys, e, 0, l.connect, l.wallet),
                          console.log(
                            "".concat(l.publickey, "买入: ").concat(e, " SOL")
                          ),
                          await (0, ed._v)(t));
                      else if (2 === ea) {
                        e > 100 && (e = 100);
                        let a = ((l.sol - 0.02) / 100) * e;
                        l.sol - 0.02 > a
                          ? (await buyFunction(
                              l.keys,
                              a,
                              0,
                              l.connect,
                              l.wallet
                            ),
                            await (0, ed._v)(t),
                            console.log(
                              ""
                                .concat(l.publickey, "买入%: ")
                                .concat(e, " SOL")
                            ))
                          : addSoftLog(
                              "钱包: ".concat(
                                truncateString(
                                  l.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " %SOL小于0.02 跳过"
                              )
                            );
                      } else {
                        let a = document.getElementById("ranamount2"),
                          n = Number(null == a ? void 0 : a.value),
                          s = getRandomFloat(e, n);
                        l.sol > s &&
                          (await buyFunction(l.keys, s, 0, l.connect, l.wallet),
                          await (0, ed._v)(t),
                          console.log(
                            ""
                              .concat(l.publickey, "买入随机: ")
                              .concat(s, " SOL")
                          ));
                      }
                    } catch (e) {
                      addSoftLog("买入构造失败: ".concat(e));
                    }
                }
            },
            handlesale = async () => {
              addSoftLog("执行一键卖出"), console.log("sale");
              let e = parseFloat(eS),
                t = Number(eh);
              if (u.length > 0)
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked)
                    try {
                      if (1 === ei)
                        l.mint >= e
                          ? (await saleFunction(l.keys, e, l.connect, l.wallet),
                            await (0, ed._v)(t),
                            console.log(
                              "".concat(l.publickey, "卖出: ").concat(e, " ")
                            ))
                          : addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 代币不足 "
                                )
                                .concat(e, "跳过")
                            );
                      else {
                        e > 100 && (e = 100),
                          k.quoteMint === t5 ? b.decimals : w.decimals;
                        let a = (l.mint / 100) * e;
                        l.mint >= a
                          ? a > 0 &&
                            (console.log(a),
                            await saleFunction(l.keys, a, l.connect, l.wallet),
                            await (0, ed._v)(t),
                            console.log(
                              "".concat(l.publickey, "卖出%: ").concat(a, " ")
                            ))
                          : addSoftLog(
                              "钱包: ".concat(
                                truncateString(
                                  l.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " %代币不足跳过"
                              )
                            );
                      }
                    } catch (e) {
                      addSoftLog("卖出构造失败: ".concat(e));
                    }
                }
            },
            handlebuyYibu = async () => {
              console.log("buy"), addSoftLog("执行暴力买入");
              let e = parseFloat(ex);
              if (u.length > 0) {
                let t = [];
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked) {
                    let a = (async () => {
                      try {
                        if (1 === ea)
                          l.sol > e &&
                            (await buyFunction(
                              l.keys,
                              e,
                              0,
                              l.connect,
                              l.wallet
                            ),
                            console.log(
                              "".concat(l.publickey, "买入: ").concat(e, " SOL")
                            ));
                        else if (2 === ea) {
                          e > 100 && (e = 100);
                          let t = ((l.sol - 0.02) / 100) * e;
                          l.sol - 0.02 > t
                            ? (await buyFunction(
                                l.keys,
                                t,
                                0,
                                l.connect,
                                l.wallet
                              ),
                              console.log(
                                ""
                                  .concat(l.publickey, "买入%: ")
                                  .concat(e, " SOL")
                              ))
                            : addSoftLog(
                                "钱包: ".concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " %SOL小于0.02 跳过"
                                )
                              );
                        } else {
                          let t = document.getElementById("ranamount2"),
                            a = Number(null == t ? void 0 : t.value),
                            n = getRandomFloat(e, a);
                          l.sol > n &&
                            (await buyFunction(
                              l.keys,
                              n,
                              0,
                              l.connect,
                              l.wallet
                            ),
                            console.log(
                              ""
                                .concat(l.publickey, "买入随机: ")
                                .concat(n, " SOL")
                            ));
                        }
                      } catch (e) {
                        addSoftLog("买入构造失败: ".concat(e));
                      }
                    })();
                    t.push(a);
                  }
                }
                await Promise.all(t);
              }
            },
            handlesaleYibu = async () => {
              addSoftLog("执行暴力卖出"), console.log("sale");
              let e = parseFloat(eS);
              if (u.length > 0) {
                let t = [];
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked) {
                    let a = (async () => {
                      try {
                        if (1 === ei)
                          l.mint >= e
                            ? (await saleFunction(
                                l.keys,
                                e,
                                l.connect,
                                l.wallet
                              ),
                              console.log(
                                "".concat(l.publickey, "卖出: ").concat(e, " ")
                              ))
                            : addSoftLog(
                                "钱包: "
                                  .concat(
                                    truncateString(
                                      l.wallet.publicKey.toString(),
                                      16,
                                      8,
                                      8
                                    ),
                                    " 代币不足 "
                                  )
                                  .concat(e, "跳过")
                              );
                        else {
                          e > 100 && (e = 100);
                          let t = (l.mint / 100) * e;
                          l.mint >= t && t > 0
                            ? (console.log(t),
                              await saleFunction(
                                l.keys,
                                t,
                                l.connect,
                                l.wallet
                              ),
                              console.log(
                                "".concat(l.publickey, "卖出%: ").concat(t, " ")
                              ))
                            : addSoftLog(
                                "钱包: ".concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " %代币不足跳过"
                                )
                              );
                        }
                      } catch (e) {
                        addSoftLog("卖出构造失败: ".concat(e));
                      }
                    })();
                    t.push(a);
                  }
                }
                await Promise.all(t);
              }
            };
          async function getAllAccByMint(e, t) {
            let a = await e.getParsedProgramAccounts(es.H_, {
              filters: [{ dataSize: 165 }, { memcmp: { offset: 0, bytes: t } }],
            });
            return a;
          }
          function compareByTokenAmount(e, t) {
            let a = parseFloat(e.account.data.parsed.info.tokenAmount.uiAmount),
              l = parseFloat(t.account.data.parsed.info.tokenAmount.uiAmount);
            return a > l ? -1 : a < l ? 1 : 0;
          }
          let handlechibilist = async () => {
            if (!l) {
              notify({ type: "error", message: "请先连接钱包" });
              return;
            }
            if (!k) {
              notify({ type: "error", message: "请先设置池子信息!" });
              return;
            }
            let e = document.getElementById("useramount"),
              t = Number(null == e ? void 0 : e.value),
              n = document.getElementById("notself"),
              s = null == n ? void 0 : n.checked,
              o = document.getElementById("notblack"),
              r = null == o ? void 0 : o.checked,
              i = k.authority,
              c = new Y.PublicKey(k.baseMint),
              d = [];
            y("");
            let m = await getAllAccByMint(a, c);
            m.sort(compareByTokenAmount), console.log(t2);
            for (let e = 0; e < m.length; e++) {
              let l = m[e].account.data.parsed.info;
              if (
                !(
                  s &&
                  (function (e) {
                    for (let t = 0; t < u.length; t++) {
                      let a = u[t];
                      if (a.wallet.publicKey.toString() === e) return !0;
                    }
                    return !1;
                  })(l.owner)
                )
              ) {
                if (0 === t)
                  l.owner === i
                    ? d.push(
                        truncateString(l.owner, 16, 8, 8) +
                          "(RaydiumPool)/" +
                          l.tokenAmount.uiAmount
                      )
                    : d.push(l.owner + "/" + l.tokenAmount.uiAmount);
                else {
                  let e = Number(l.tokenAmount.uiAmount);
                  if (e > t) {
                    if (r) {
                      if (
                        (function (e) {
                          for (let t = 0; t < t2.length; t++)
                            if (e === t2[t]) return !0;
                          return !1;
                        })(l.owner)
                      )
                        continue;
                      if (l.owner !== i) {
                        let e = new Y.PublicKey(l.owner),
                          t = await (0, en.Am)(b.mint, e);
                        try {
                          if ((await (0, eV.D0)(a, t)).isFrozen) {
                            t2.push(l.owner);
                            continue;
                          }
                        } catch (e) {
                          e instanceof ez.We ||
                            e instanceof ez.Or ||
                            console.log(e);
                        }
                      }
                    }
                    l.owner === i
                      ? d.push(
                          truncateString(l.owner, 16, 8, 8) +
                            "(RaydiumPool)/" +
                            l.tokenAmount.uiAmount
                        )
                      : d.push(l.owner + "/" + l.tokenAmount.uiAmount);
                  }
                }
              }
            }
            let x = d.join("\n");
            y(x), e3(d.length);
          };
          async function initPoolInfo(e, t) {
            console.log("池子初始化"),
              console.log("nowTagetPool", (k = await formatAmmKeysByIdA(e, t))),
              console.log("002"),
              (b = new eL.WUB(
                es.H_,
                new Y.PublicKey(k.baseMint),
                k.baseDecimals,
                "B",
                "B"
              )),
              (w = new eL.WUB(
                es.H_,
                new Y.PublicKey(k.quoteMint),
                k.quoteDecimals,
                "Q",
                "Q"
              )),
              console.log("003");
            let a = (0, eL.Rl)(k);
            console.log("004"),
              console.log(
                "nowPoolInfo:",
                (j = await eL.ZpI.fetchInfo({ connection: e, poolKeys: a }))
              ),
              console.log("池子初始化成功");
          }
          async function setPoolInfo(e) {
            let t;
            (v = new Y.Connection(
              "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
            )),
              await initPoolInfo(v, e),
              I(""),
              F(""),
              X(""),
              $(0),
              et(0),
              D(0);
            try {
              (t = await GetparsePoolInfo(v, l, e)),
                I("".concat(t.base.toFixed(3), "/").concat(t.quote.toFixed(3))),
                F(
                  ""
                    .concat(t.baseBalance.toFixed(3), "/")
                    .concat(t.quoteBalance.toFixed(3))
                ),
                X("".concat(t.baseOpenOrder, "/").concat(t.quoteOpenOrder)),
                $(t.LpAmount),
                et(t.quoteBalance),
                D(t.quoteBalance);
            } catch (e) {
              console.log("err: ", e);
            }
            return eR(!0), c(!1), t;
          }
          async function buyFunction(e, t, a, l, n) {
            if (
              ((tT = parseFloat(eB)),
              addSoftLog(
                "买入钱包: "
                  .concat(
                    truncateString(n.publicKey.toString(), 16, 8, 8),
                    " 数量:"
                  )
                  .concat(t)
              ),
              e.quoteMint.toString() === t5)
            ) {
              let s = (t * Y.LAMPORTS_PER_SOL).toFixed(0),
                o = await swap_Buy_Wallet(e, BigInt(s), BigInt(a), n);
              if (e4) {
                let e = getRandomTipAccount(),
                  t = tl.current;
                o.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: n.publicKey,
                    toPubkey: e,
                    lamports: t * Y.LAMPORTS_PER_SOL,
                  })
                );
                let a = await l.getLatestBlockhash();
                (o.feePayer = n.publicKey),
                  (o.recentBlockhash = a.blockhash),
                  o.sign(n);
                let s = e8().encode(o.serialize()),
                  r = [];
                r.push(s);
                let i = await sendBundle(r);
                return console.log("swapped in tx id:", i), i;
              }
              {
                let e = await l.sendTransaction(o, [n], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
            {
              let s = (t * Y.LAMPORTS_PER_SOL).toFixed(0),
                o = await swapOut_Buy_wallet(e, BigInt(s), BigInt(a), n);
              if (e4) {
                let e = getRandomTipAccount(),
                  t = tl.current;
                o.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: n.publicKey,
                    toPubkey: e,
                    lamports: t * Y.LAMPORTS_PER_SOL,
                  })
                );
                let a = await l.getLatestBlockhash();
                (o.feePayer = n.publicKey),
                  (o.recentBlockhash = a.blockhash),
                  o.sign(n);
                let s = e8().encode(o.serialize()),
                  r = [];
                r.push(s);
                let i = await sendBundle(r);
                return console.log("swapped in tx id:", i), i;
              }
              {
                let e = await l.sendTransaction(o, [n], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
          }
          async function saleFunction(e, t, a, l) {
            if (
              ((tT = parseFloat(eB)),
              addSoftLog(
                "卖出钱包: "
                  .concat(
                    truncateString(l.publicKey.toString(), 16, 8, 8),
                    " 数量:"
                  )
                  .concat(t)
              ),
              e.quoteMint.toString() === t5)
            ) {
              let n = e.baseDecimals,
                s = Math.floor(t * Math.pow(10, n)),
                o = await swap_Sale_wallet(e, BigInt(s), BigInt(0), l);
              if (e4) {
                let e = getRandomTipAccount(),
                  t = tl.current;
                o.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: l.publicKey,
                    toPubkey: e,
                    lamports: t * Y.LAMPORTS_PER_SOL,
                  })
                );
                let n = await a.getLatestBlockhash();
                (o.feePayer = l.publicKey),
                  (o.recentBlockhash = n.blockhash),
                  o.sign(l);
                let s = e8().encode(o.serialize()),
                  r = [];
                r.push(s);
                let i = await sendBundle(r);
                return console.log("swapped in tx id:", i), i;
              }
              {
                let e = await a.sendTransaction(o, [l], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
            {
              let n = e.quoteDecimals;
              console.log(n);
              let s = Math.floor(t * Math.pow(10, n));
              console.log(s);
              let o = await swapOut_Sale_wallet(e, BigInt(s), BigInt(0), l);
              if (e4) {
                let e = getRandomTipAccount(),
                  t = tl.current;
                o.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: l.publicKey,
                    toPubkey: e,
                    lamports: t * Y.LAMPORTS_PER_SOL,
                  })
                );
                let n = await a.getLatestBlockhash();
                (o.feePayer = l.publicKey),
                  (o.recentBlockhash = n.blockhash),
                  o.sign(l);
                let s = e8().encode(o.serialize()),
                  r = [];
                r.push(s);
                let i = await sendBundle(r);
                return console.log("swapped in tx id:", i), i;
              }
              {
                let e = await a.sendTransaction(o, [l], { skipPreflight: !0 });
                return console.log("swapped in tx id:", e), e;
              }
            }
          }
          let handleSetPool = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!eM) {
                notify({ type: "error", message: "请先设置帐号信息" });
                return;
              }
              c(!0);
              let e = document.getElementById("pool"),
                t = null == e ? void 0 : e.value;
              if (eG) {
                c(!0);
                try {
                  let e = await queryLpPair(
                    t,
                    "So11111111111111111111111111111111111111112"
                  );
                  if ((console.log("thepoolId:", e), e)) {
                    if (e.Raydium_LiquidityPoolv4.length > 0) {
                      if (e.Raydium_LiquidityPoolv4.length <= 1) {
                        let t;
                        console.log("只有1个池子");
                        let a = e.Raydium_LiquidityPoolv4[0].pubkey;
                        if ((await setPoolInfo(a), k.quoteMint === t5))
                          (t = k.baseMint),
                            (S = new Y.PublicKey(t)),
                            console.log(S);
                        else if (k.baseMint === t5)
                          (t = k.quoteMint),
                            (S = new Y.PublicKey(t)),
                            console.log(S);
                        else {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "当前交易对不支持!",
                          });
                          return;
                        }
                        console.log("setAccKeys");
                        let l = u[0];
                        (0, ed.lm)(v), (0, ed.kH)(l.wallet);
                        let n = new Y.PublicKey(k.marketId),
                          s = k.baseDecimals,
                          o = k.quoteDecimals,
                          r = await getMarketInfoA(n),
                          [i, c] = [r.baseMint, r.quoteMint],
                          d = await getKeys(n, s, o),
                          getAta = async (e, t) =>
                            Y.PublicKey.findProgramAddressSync(
                              [t.toBuffer(), es.H_.toBuffer(), e.toBuffer()],
                              es._u
                            )[0];
                        for (let e = 0; e < u.length; e++) {
                          let t = u[e],
                            [a, l] = await Promise.all([
                              getAta(i, t.wallet.publicKey),
                              getAta(c, t.wallet.publicKey),
                            ]),
                            n = { ...d };
                          (n.ownerBaseAta = a),
                            (n.ownerQuoteAta = l),
                            (n.wallet = t.wallet.publicKey);
                          let s = [...u];
                          (s[e].keys = n), m(s);
                        }
                        console.log(t), tb(t);
                        let x = await getTokenMetadataProc(
                          v,
                          new Y.PublicKey(t)
                        );
                        console.log("Meta:", x);
                        let g = x.data.symbol,
                          p = x.data.uri,
                          y = p.replace(/\u0000/g, ""),
                          f = await getImageJson(y);
                        tp(g.replace(/\u0000/g, "")),
                          f.image ? tf(f.image) : tf(y);
                      } else {
                        let t;
                        console.log("大于1个池子,找到最大的池子");
                        let a = e.Raydium_LiquidityPoolv4.reduce(
                          (e, t) => (t.lpReserve > e.lpReserve ? t : e),
                          e.Raydium_LiquidityPoolv4[0]
                        );
                        console.log("最高的lpReserve池子信息：", a);
                        let l = a.pubkey;
                        if ((await setPoolInfo(l), k.quoteMint === t5))
                          (t = k.baseMint),
                            (S = new Y.PublicKey(t)),
                            console.log(S);
                        else if (k.baseMint === t5)
                          (t = k.quoteMint),
                            (S = new Y.PublicKey(t)),
                            console.log(S);
                        else {
                          notify({
                            type: "error",
                            message: "错误",
                            description: "当前交易对不支持!",
                          });
                          return;
                        }
                        console.log("setAccKeys");
                        let n = u[0];
                        (0, ed.lm)(v), (0, ed.kH)(n.wallet);
                        let s = new Y.PublicKey(k.marketId),
                          o = k.baseDecimals,
                          r = k.quoteDecimals,
                          i = await getMarketInfoA(s),
                          [c, d] = [i.baseMint, i.quoteMint],
                          x = await getKeys(s, o, r),
                          getAta = async (e, t) =>
                            Y.PublicKey.findProgramAddressSync(
                              [t.toBuffer(), es.H_.toBuffer(), e.toBuffer()],
                              es._u
                            )[0];
                        for (let e = 0; e < u.length; e++) {
                          let t = u[e],
                            [a, l] = await Promise.all([
                              getAta(c, t.wallet.publicKey),
                              getAta(d, t.wallet.publicKey),
                            ]),
                            n = { ...x };
                          (n.ownerBaseAta = a),
                            (n.ownerQuoteAta = l),
                            (n.wallet = t.wallet.publicKey);
                          let s = [...u];
                          (s[e].keys = n), m(s);
                        }
                        tb(t);
                        let g = await getTokenMetadataProc(
                          v,
                          new Y.PublicKey(t)
                        );
                        console.log("Meta:", g);
                        let p = g.data.symbol,
                          y = g.data.uri,
                          f = y.replace(/\u0000/g, ""),
                          h = await getImageJson(f);
                        tp(p.replace(/\u0000/g, "")),
                          h.image ? tf(h.image) : tf(f),
                          tb(t);
                      }
                    }
                  } else {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "未查询到对应的池子信息",
                    });
                    return;
                  }
                } finally {
                  c(!1);
                }
              } else
                try {
                  let e;
                  console.log(t);
                  let a = await setPoolInfo(t);
                  if ((console.log("poolInfo", a), k.quoteMint === t5))
                    (e = k.baseMint), (S = new Y.PublicKey(e)), console.log(S);
                  else if (k.baseMint === t5)
                    (e = k.quoteMint), (S = new Y.PublicKey(e)), console.log(S);
                  else {
                    notify({
                      type: "error",
                      message: "错误",
                      description: "当前交易对不支持!",
                    });
                    return;
                  }
                  console.log("setAccKeys");
                  let l = u[0];
                  (0, ed.lm)(v), (0, ed.kH)(l.wallet);
                  let n = new Y.PublicKey(k.marketId),
                    s = k.baseDecimals,
                    o = k.quoteDecimals,
                    r = await getMarketInfoA(n),
                    [i, c] = [r.baseMint, r.quoteMint],
                    d = await getKeys(n, s, o),
                    getAta = async (e, t) =>
                      Y.PublicKey.findProgramAddressSync(
                        [t.toBuffer(), es.H_.toBuffer(), e.toBuffer()],
                        es._u
                      )[0];
                  for (let e = 0; e < u.length; e++) {
                    let t = u[e],
                      [a, l] = await Promise.all([
                        getAta(i, t.wallet.publicKey),
                        getAta(c, t.wallet.publicKey),
                      ]),
                      n = { ...d };
                    (n.ownerBaseAta = a),
                      (n.ownerQuoteAta = l),
                      (n.wallet = t.wallet.publicKey);
                    let s = [...u];
                    (s[e].keys = n), m(s);
                  }
                  tb(e);
                  let x = await getTokenMetadataProc(v, new Y.PublicKey(e));
                  console.log("Meta:", x);
                  let g = x.data.symbol,
                    p = x.data.uri,
                    y = p.replace(/\u0000/g, ""),
                    f = await getImageJson(y);
                  tp(g.replace(/\u0000/g, "")), f.image ? tf(f.image) : tf(y);
                } catch (e) {
                  notify({
                    type: "error",
                    message: "设置池子失败",
                    description: "请检查池子ID是否正确",
                  }),
                    console.log(e),
                    c(!1);
                }
            },
            getSolBalanceA = async (e, t) => {
              try {
                return (
                  (await e.getBalance(t, "confirmed")) / Y.LAMPORTS_PER_SOL
                );
              } catch (e) {
                return console.log("error getting balance: ", e), 0;
              }
            };
          async function getTokenAccount(e, t) {
            let a = await e.getParsedProgramAccounts(es.H_, {
              filters: [
                { dataSize: 165 },
                { memcmp: { offset: 32, bytes: t } },
              ],
            });
            return a;
          }
          let handleRefAccInfo = async () => {
            let e = !1,
              t = 0,
              a = 0,
              l = 0,
              n = 0;
            for (let l = 0; l < u.length; l++) {
              if (!u[l].connect) {
                console.log("connecting");
                try {
                  (u[l].connect = new Y.Connection(tw[n])),
                    (n += 1) >= tw.length && (n = 0);
                } catch (e) {
                  console.log("连接失败", e),
                    addSoftLog(
                      "钱包:"
                        .concat(
                          truncateString(
                            u[l].wallet.publicKey.toString(),
                            16,
                            8,
                            8
                          ),
                          " 连接失败? 代码:("
                        )
                        .concat(n, ")")
                    );
                }
              }
              if ((console.log("connected"), u[l].checked)) {
                e = !0;
                try {
                  let e = await getSolBalanceA(
                      u[l].connect,
                      u[l].wallet.publicKey
                    ),
                    t = [...u];
                  (t[l].sol = e), m(t);
                } catch (e) {
                  console.log("getSolBalanceA Error~!");
                }
                try {
                  let e;
                  let t = await getTokenAccount(
                    u[l].connect,
                    u[l].wallet.publicKey
                  );
                  e = k.quoteMint === t5 ? k.baseMint : k.quoteMint;
                  for (let a = 0; a < t.length; a++) {
                    let n = t[a].account.data.parsed.info;
                    if (n.mint === e) {
                      let e = n.tokenAmount.uiAmount,
                        s = [...u];
                      (s[l].ata = t[a].pubkey), (s[l].mint = Number(e)), m(s);
                    }
                  }
                } catch (e) {
                  console.log("getSolBalanceA Error~!", e);
                }
              }
              (t += u[l].sol), (a += u[l].mint);
            }
            console.log(t), eZ(t.toString()), eE(a.toFixed(2));
            try {
              if (u.length > 0) {
                let e = await getNowBili(u[0].connect, u[0].wallet);
                l = a * e;
              }
            } catch (e) {
              console.log("获取比例失败");
            }
            eq(l.toFixed(2)), e || addSoftLog("请先选中要操作的帐号");
          };
          async function getNowBili(e, t) {
            let a = w,
              l = b;
            console.log(a);
            let n = a.decimals,
              s = new eL.dtM(a, 1 * Math.pow(10, n)),
              o = Number(eT),
              r = new eL.gGi(o, 100),
              i = await util_getWalletTokenAccount(e, t.publicKey);
            try {
              return await swapOnlyAmmB(v, t, k, j, {
                outputToken: l,
                targetPool: "",
                inputTokenAmount: s,
                slippage: r,
                walletTokenAccounts: i,
                wallet: t,
              });
            } catch (e) {
              addSoftLog("获取比例: ".concat(e));
            }
          }
          let handleSeleceTokenNotZero = async () => {
              let e = [],
                t = [];
              for (let a = 0; a < u.length; a++)
                0 !== u[a].mint && (e.push(u[a].key), t.push(u[a]));
              g(e), tS.onChange(e, t);
            },
            handleSeleceNotZero = async () => {
              let e = [],
                t = [];
              for (let a = 0; a < u.length; a++)
                0 !== u[a].sol && (e.push(u[a].key), t.push(u[a]));
              g(e), tS.onChange(e, t);
            },
            handleCloseAcc = async () => {
              addSoftLog("执行批量关闭账户");
              let e = document.getElementById("canburn"),
                t = e.checked,
                a = [],
                l = !0;
              for (let e = 0; e < u.length; e++)
                if (u[e].checked) {
                  let n = u[e];
                  try {
                    let e = await getTokenAccount(
                      n.connect,
                      n.wallet.publicKey
                    );
                    for (let s = 0; s < e.length; s++) {
                      let o = e[s].account.data.parsed.info;
                      if (0 === o.tokenAmount.uiAmount) {
                        let t = e[s].pubkey,
                          o = new Y.Transaction();
                        if (!checkLocMode()) {
                          let e = new Y.PublicKey(
                            "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                          );
                          o.add(
                            Y.SystemProgram.transfer({
                              fromPubkey: n.wallet.publicKey,
                              toPubkey: e,
                              lamports: 2e-4 * Y.LAMPORTS_PER_SOL,
                            })
                          );
                        }
                        let r = (0, tn.Zu)(
                          t,
                          n.wallet.publicKey,
                          n.wallet.publicKey
                        );
                        if ((o.add(r), e4)) {
                          let e = await n.connect.getLatestBlockhash();
                          if (l) {
                            l = !1;
                            let e = getRandomTipAccount(),
                              t = tl.current;
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: n.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          addSoftLog(
                            "".concat(
                              truncateString(
                                n.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 关闭帐号 Jito发送"
                            )
                          ),
                            (o.feePayer = n.wallet.publicKey),
                            (o.recentBlockhash = e.blockhash),
                            o.sign(n.wallet);
                          let t = e8().encode(o.serialize());
                          if ((a.push(t), a.length >= 5)) {
                            let e = await sendBundle(a);
                            addSoftLog("Jito包ID: ".concat(e)),
                              console.log("绑定包发送成功 id:", e),
                              (a = []),
                              (l = !0);
                          }
                        } else {
                          let e = await sendTxA(n.connect, n.wallet, o);
                          console.log("txids", e),
                            addSoftLog(
                              ""
                                .concat(
                                  truncateString(
                                    n.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 关闭帐号成功, 交易哈希: "
                                )
                                .concat(e)
                            );
                        }
                      } else if (t) {
                        let t = e[s].pubkey,
                          r = new Y.Transaction();
                        if (!checkLocMode()) {
                          let e = new Y.PublicKey(
                            "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                          );
                          r.add(
                            Y.SystemProgram.transfer({
                              fromPubkey: n.wallet.publicKey,
                              toPubkey: e,
                              lamports: 2e-4 * Y.LAMPORTS_PER_SOL,
                            })
                          );
                        }
                        let i = o.tokenAmount.decimals,
                          c = o.tokenAmount.uiAmount,
                          d = Math.floor(c * Math.pow(10, i)),
                          u = new Y.PublicKey(o.mint),
                          m = (0, el.T7)(
                            new Y.PublicKey(t),
                            u,
                            n.wallet.publicKey,
                            d
                          );
                        r.add(m);
                        let x = (0, tn.Zu)(
                          t,
                          n.wallet.publicKey,
                          n.wallet.publicKey
                        );
                        if ((r.add(x), e4)) {
                          let e = await n.connect.getLatestBlockhash();
                          if (l) {
                            l = !1;
                            let e = getRandomTipAccount(),
                              t = tl.current;
                            r.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: n.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          addSoftLog(
                            "".concat(
                              truncateString(
                                n.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 关闭帐号 Jito发送"
                            )
                          ),
                            (r.feePayer = n.wallet.publicKey),
                            (r.recentBlockhash = e.blockhash),
                            r.sign(n.wallet);
                          let t = e8().encode(r.serialize());
                          if ((a.push(t), a.length >= 5)) {
                            let e = await sendBundle(a);
                            addSoftLog("Jito包ID: ".concat(e)),
                              console.log("绑定包发送成功 id:", e),
                              (a = []),
                              (l = !0);
                          }
                        } else {
                          let e = await sendTxA(n.connect, n.wallet, r);
                          console.log("txids", e),
                            addSoftLog(
                              ""
                                .concat(
                                  truncateString(
                                    n.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 关闭帐号成功, 交易哈希: "
                                )
                                .concat(e)
                            );
                        }
                      }
                    }
                  } catch (e) {
                    console.log("getSolBalanceA Error~!", e);
                  }
                }
              if (e4 && a.length > 0) {
                let e = await sendBundle(a);
                console.log("绑定包发送成功 id:", e),
                  addSoftLog("Jito包ID: ".concat(e)),
                  (a = []),
                  (l = !0);
              }
              addSoftLog("执行完毕");
            },
            confirmOneKeyBack = async (e) => {
              await handleRefAccInfo();
              try {
                let e;
                let t = document.getElementById("backhold"),
                  a = null == t ? void 0 : t.value;
                (e = "" !== a ? Number(a) : 0), console.log(e);
                let l = new Y.PublicKey(eQ);
                if (u.length > 0)
                  for (let t = 0; t < u.length; t++) {
                    let a = u[t];
                    if (a.checked)
                      try {
                        let t = 0.002;
                        if ((checkLocMode() && (t = 0), a.sol >= t + 0.001)) {
                          let n = Math.floor(
                              (a.sol - t - e) * Y.LAMPORTS_PER_SOL
                            ),
                            s = new Y.Transaction(),
                            o = new Y.Transaction(),
                            r = new Y.PublicKey(
                              "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                            );
                          checkLocMode() ||
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: r,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            ),
                            n % 1 != 0 &&
                              (console.log(
                                "钱包: ".concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 有小数自动舍弃小数"
                                )
                              ),
                              (n = Math.floor(n))),
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: n,
                              })
                            );
                          let i = (await a.connect.getLatestBlockhash())
                            .blockhash;
                          (s.recentBlockhash = i),
                            (s.feePayer = a.wallet.publicKey);
                          let c = await s.getEstimatedFee(a.connect);
                          checkLocMode() ||
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: r,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          let d = Math.round(
                            (a.sol - t - e) * Y.LAMPORTS_PER_SOL - c
                          );
                          console.log(a.sol),
                            console.log(d / Y.LAMPORTS_PER_SOL),
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: d,
                              })
                            );
                          let u = await sendTxA(a.connect, a.wallet, o);
                          console.log("txids", u),
                            addSoftLog(
                              "归集SOL成功: "
                                .concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 数量:"
                                )
                                .concat(n / Y.LAMPORTS_PER_SOL, ", 交易哈希: ")
                                .concat(u)
                            );
                        } else {
                          addSoftLog(
                            "钱包: ".concat(
                              truncateString(
                                a.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 数量不足0.003"
                            )
                          );
                          let t = Math.floor((a.sol - e) * Y.LAMPORTS_PER_SOL),
                            n = new Y.Transaction(),
                            s = new Y.Transaction();
                          t % 1 != 0 &&
                            (console.log(
                              "钱包: ".concat(
                                truncateString(
                                  a.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " 有小数自动舍弃小数"
                              )
                            ),
                            (t = Math.floor(t))),
                            n.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: t,
                              })
                            );
                          let o = (await a.connect.getLatestBlockhash())
                            .blockhash;
                          (n.recentBlockhash = o),
                            (n.feePayer = a.wallet.publicKey);
                          let r = await n.getEstimatedFee(a.connect);
                          console.log("fees: ", r);
                          let i = Math.round(
                            (a.sol - e) * Y.LAMPORTS_PER_SOL - r
                          );
                          console.log("amt2: ", i),
                            console.log(a.sol),
                            console.log(i / Y.LAMPORTS_PER_SOL),
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: i,
                              })
                            );
                          let c = await sendTxA(a.connect, a.wallet, s);
                          console.log("txids", c),
                            addSoftLog(
                              "归集SOL成功: "
                                .concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 数量:"
                                )
                                .concat(i / Y.LAMPORTS_PER_SOL, ", 交易哈希: ")
                                .concat(c)
                            );
                        }
                      } catch (e) {
                        addSoftLog(
                          "钱包: ".concat(
                            truncateString(
                              a.wallet.publicKey.toString(),
                              16,
                              8,
                              8
                            ),
                            " 执行归集出错"
                          )
                        ),
                          addSoftLog("错误信息: ".concat(e));
                      }
                  }
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "执行一键归集失败,请检查归集地址等配置是否正确",
                }),
                  console.log(e);
              }
            },
            handleRemovePool = async () => {
              let e;
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!k) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              (0, ed.kH)(t), (0, ed.lm)(a);
              let n = k.id;
              console.log(n);
              let s = K * Math.pow(10, k.lpDecimals),
                o = await util_getWalletTokenAccount(a, t.publicKey);
              (e = ammRemoveLiquidity({
                removeAmount: s,
                targetPool: n,
                walletTokenAccounts: o,
                publicKey: l,
              })),
                c(!0);
              try {
                for (let n of await e)
                  if (n instanceof Y.Transaction) {
                    let e = Number("0.1"),
                      s = new Y.PublicKey(
                        "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                      );
                    n.add(
                      Y.SystemProgram.transfer({
                        fromPubkey: l,
                        toPubkey: s,
                        lamports: 1e9 * e,
                      })
                    ),
                      (n = setPublicGasfee(n));
                    let o = await t.signTransaction(n),
                      r = o.serialize(),
                      i = await a.sendRawTransaction(r, { skipPreflight: !0 }),
                      c = {
                        addrTag: "",
                        addrName: "",
                        addr1: "",
                        hxName: "交易哈希:",
                        hxAddr: i,
                      };
                    tk(c), eJ(!0);
                  }
                notify({
                  type: "success",
                  message: "成功",
                  description: "交易已发送",
                });
              } catch (e) {
                notify({
                  type: "success",
                  message: "错误",
                  description: "交易失败",
                }),
                  console.log("err", e);
              } finally {
                c(!1);
              }
            },
            burnPool = async (e, n, s) => {
              try {
                let o = await burntokens(a, e, n, l, s);
                (o.feePayer = t.publicKey),
                  (o.recentBlockhash = (
                    await a.getLatestBlockhash()
                  ).blockhash);
                let r = await t.signTransaction(o),
                  i = r.serialize(),
                  c = await a.sendRawTransaction(i, { skipPreflight: !0 });
                c
                  ? (notify({ type: "success", message: "完成.." }),
                    console.log(c),
                    tk({
                      addrTag: "",
                      addrName: "",
                      addr1: "燃烧LP",
                      hxName: "交易哈希:",
                      hxAddr: c,
                    }),
                    eJ(!0))
                  : console.log("warning", "Failed to revoke mint authority!");
              } catch (e) {
                notify({ type: "error", message: "错误,交易为完成" }),
                  console.log(e);
              }
            },
            handleRefPoolInfo = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!k) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              addSoftLog("正在刷新当前钱包池子数量");
              let e = await util_getWalletTokenAccount(a, t.publicKey);
              console.log(e);
              for (let t = 0; t < e.length; t++) {
                let a = e[t].accountInfo.mint.toString(),
                  l = e[t].pubkey.toString(),
                  n = Number(
                    e[t].accountInfo.amount.toString() / Y.LAMPORTS_PER_SOL
                  );
                console.log(t),
                  console.log(a),
                  console.log(l),
                  console.log(n),
                  a === k.lpMint &&
                    ($(n),
                    console.log("now wallet == Pool  amoung: " + n),
                    addSoftLog("当前钱包池子数量:".concat(n)));
              }
            },
            handleBurnPool = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!k) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              let e = await util_getWalletTokenAccount(a, t.publicKey);
              console.log(e);
              for (let t = 0; t < e.length; t++) {
                let a = e[t].accountInfo.mint.toString(),
                  l = e[t].pubkey.toString(),
                  n = Number(
                    e[t].accountInfo.amount.toString() / Y.LAMPORTS_PER_SOL
                  );
                console.log(t),
                  console.log(a),
                  console.log(l),
                  console.log(n),
                  a === k.baseMint &&
                    (n >= C
                      ? burnPool(l, a, C * Y.LAMPORTS_PER_SOL)
                      : (console.log("Amt: " + n + "," + C),
                        addSoftLog("燃烧数量错误,请降低一些试试?")));
              }
            };
          return (0, V.jsxs)("div", {
            children: [
              (0, V.jsxs)(ej.Z, {
                vertical: !0,
                gap: "middle",
                children: [
                  (0, V.jsxs)(ej.Z, {
                    gap: 10,
                    justify: "flex-start",
                    align: "flex-start",
                    children: [
                      !eM &&
                        (0, V.jsxs)(to.Z, {
                          style: { width: 600 },
                          title: "1.私钥填写",
                          children: [
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  onClick: () => {
                                    let e =
                                        document.getElementById("addramount"),
                                      t = Number(null == e ? void 0 : e.value);
                                    if (t > 188) {
                                      notify({
                                        type: "error",
                                        message: "不能超过188个",
                                      });
                                      return;
                                    }
                                    let a = [],
                                      l = [];
                                    for (let e = 0; e < t; e++) {
                                      let e = Y.Keypair.generate();
                                      a.push(e8().encode(e.secretKey)),
                                        l.push(e.publicKey.toString());
                                    }
                                    let n = a.join("\n"),
                                      s = l.join("\n");
                                    h(n), N(s);
                                  },
                                  children: "生成",
                                }),
                                (0, V.jsx)(e$.default, {
                                  type: "number",
                                  id: "addramount",
                                  placeholder: "Basic usage",
                                  defaultValue: 6,
                                  style: { width: "20%" },
                                }),
                                (0, V.jsx)("span", { children: "个地址" }),
                                (0, V.jsx)(tv, {
                                  copyable: { text: f },
                                  style: { writingMode: "horizontal-tb" },
                                  children: "复制生成的私钥",
                                }),
                                (0, V.jsx)(tv, {
                                  copyable: { text: P },
                                  style: { writingMode: "horizontal-tb" },
                                  children: "复制生成的秘钥",
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tN, {
                                rows: 8,
                                wrap: "off",
                                value: f,
                                onChange: (e) => {
                                  let t = e.target.value;
                                  h(t);
                                },
                              }),
                            }),
                            (0, V.jsx)(ej.Z, {
                              gap: 30,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(eb(), {
                                type: "primary",
                                size: "large",
                                onClick: () => {
                                  let e = f
                                    .split("\n")
                                    .filter((e) => "" !== e.trim());
                                  e.map((e) =>
                                    e.length <= 95 && e.length >= 85 ? e : null
                                  ).filter((e) => null !== e);
                                  let t = [...new Set(e)];
                                  console.log(t), m([]);
                                  try {
                                    m((e) => {
                                      let a = [];
                                      for (let e = 0; e < t.length; e++) {
                                        let l = Y.Keypair.fromSecretKey(
                                            e8().decode(t[e])
                                          ),
                                          n = {
                                            key: e,
                                            publickey: truncateString(
                                              l.publicKey.toString(),
                                              16,
                                              8,
                                              8
                                            ),
                                            sol: 0,
                                            mint: 0,
                                            siyao: t[e],
                                            miyao: l.publicKey,
                                            wallet: Y.Keypair.fromSecretKey(
                                              t1.from(e8().decode(t[e]))
                                            ),
                                          };
                                        a.push(n);
                                      }
                                      return [...e, ...a];
                                    }),
                                      eC(!0);
                                  } catch (e) {
                                    console.log(e),
                                      notify({
                                        type: "error",
                                        message: "设置钱包错误",
                                        description:
                                          "检查私钥地址并刷新页面重试",
                                      });
                                  }
                                },
                                children: "设置帐号信息",
                              }),
                            }),
                          ],
                        }),
                      !e_ &&
                        (0, V.jsxs)(to.Z, {
                          style: { width: 600, height: 384 },
                          title: "2.设置池子信息 - VB",
                          children: [
                            (0, V.jsx)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: eG
                                ? (0, V.jsx)(e$.default, {
                                    id: "pool",
                                    placeholder: "请输入代币地址",
                                    style: { width: "80%" },
                                  })
                                : (0, V.jsx)(e$.default, {
                                    id: "pool",
                                    placeholder: "池子ID(不是代币地址!)",
                                    style: { width: "80%" },
                                  }),
                            }),
                            eG
                              ? (0, V.jsxs)("p", {
                                  children: [
                                    d("repool.lpid2wj"),
                                    "  ",
                                    (0, V.jsxs)(H(), {
                                      href: "",
                                      children: [
                                        " ",
                                        (0, V.jsx)("span", {
                                          className: "text-sky-500",
                                          onClick: () => {
                                            eX(!eG);
                                          },
                                          children: d("repool.lpid2wj2"),
                                        }),
                                      ],
                                    }),
                                    " ",
                                    d("repool.lpidcheck"),
                                  ],
                                })
                              : (0, V.jsxs)("p", {
                                  children: [
                                    "不知道池子ID？ 试试通过",
                                    (0, V.jsxs)(H(), {
                                      href: "",
                                      children: [
                                        " ",
                                        (0, V.jsx)("span", {
                                          className: "text-sky-500",
                                          onClick: () => {
                                            eX(!eG);
                                          },
                                          children: "代币地址",
                                        }),
                                      ],
                                    }),
                                    " ",
                                    d("repool.lpidcheck"),
                                    " ",
                                  ],
                                }),
                            (0, V.jsx)(eb(), {
                              type: "primary",
                              size: "large",
                              onClick: handleSetPool,
                              children: "设置池子信息",
                            }),
                            (0, V.jsx)("p", {
                              children: (0, V.jsx)(tP, {
                                children:
                                  "VB速度比VA快,VB不使用Raydium SDK 使用了自研算法(极大减少网络RPC访问频率),使用VB版本建议打开MEV模式",
                              }),
                            }),
                          ],
                        }),
                    ],
                  }),
                  (0, V.jsxs)(ej.Z, {
                    gap: "middle",
                    justify: "flex-start",
                    align: "flex-start",
                    children: [
                      (0, V.jsxs)(to.Z, {
                        style: { width: 600 },
                        title: "帐号信息",
                        children: [
                          (0, V.jsxs)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(tc.Z, {
                                title: "一键归集确认",
                                description: "归集地址:[".concat(
                                  eQ,
                                  "],请确认地址是否正确,确认请点击yes"
                                ),
                                onConfirm: confirmOneKeyBack,
                                onCancel: () => {
                                  console.log("cancel");
                                },
                                okText: "Yes",
                                cancelText: "No",
                                children: (0, V.jsx)(eb(), {
                                  size: "middle",
                                  children: d("msg.back"),
                                }),
                              }),
                              (0, V.jsx)(e$.default, {
                                id: "backaddr",
                                placeholder: ""
                                  .concat(d("msg.col"))
                                  .concat(d("msg.adr")),
                                value: eQ,
                                onChange: (e) => {
                                  let t = e.target.value;
                                  eU(t);
                                },
                                style: { width: "50%" },
                              }),
                              (0, V.jsx)(e$.default, {
                                id: "backhold",
                                placeholder: "".concat(d("msg.hold")),
                                style: { width: "20%" },
                              }),
                            ],
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 5,
                            style: { marginTop: 10 },
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(tc.Z, {
                                title: "一键归集Token确认",
                                description: "归集地址:[".concat(
                                  eQ,
                                  "],请确认地址是否正确,确认请点击yes"
                                ),
                                onConfirm: confirmOneKeyBackToken,
                                onCancel: () => {
                                  console.log("cancel");
                                },
                                okText: "Yes",
                                cancelText: "No",
                                children: (0, V.jsx)(eb(), {
                                  size: "middle",
                                  children: d("msg.backtoken"),
                                }),
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleRefAccInfo,
                                children: d("msg.ref"),
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: () => {
                                  em((e) => !e);
                                },
                                children: eu
                                  ? "停止"
                                  : ""
                                      .concat(d("msg.auto"))
                                      .concat(d("msg.ref")),
                              }),
                            ],
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 5,
                            style: { marginTop: 10 },
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleSeleceNotZero,
                                children: "选中SOL非0",
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleSeleceTokenNotZero,
                                children: "选中代币非0",
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleCloseAcc,
                                children: d("msg.close"),
                              }),
                              (0, V.jsx)(tr.default, {
                                id: "canburn",
                                children: "燃烧多余代币",
                              }),
                            ],
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsxs)(tP, {
                                type: "success",
                                children: ["SOL总余额 (", eO, ")"],
                              }),
                              (0, V.jsxs)(tP, {
                                type: "warning",
                                children: ["代币总余额 (", eI, ")"],
                              }),
                              (0, V.jsxs)(tP, {
                                type: "danger",
                                children: ["代币总价值 (", eF, ")"],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            style: { marginBottom: 10, marginTop: 10 },
                            children: (0, V.jsx)(ej.Z, {
                              gap: 30,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(tx.Z, {
                                rowSelection: { type: "checkbox", ...tS },
                                style: { width: "100%" },
                                pagination: !1,
                                columns: [
                                  {
                                    title: "钱包 选中:(".concat(e2, ")个"),
                                    dataIndex: "publickey",
                                    render: (e) =>
                                      (0, V.jsx)("a", { children: e }),
                                  },
                                  { title: "SOL余额", dataIndex: "sol" },
                                  { title: "代币余额", dataIndex: "mint" },
                                ],
                                dataSource: u,
                              }),
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsx)(to.Z, {
                        style: { width: 600 },
                        title: "池子/操作 - VB",
                        children: (0, V.jsxs)(tm.default, {
                          direction: "vertical",
                          size: "middle",
                          style: { display: "flex" },
                          children: [
                            (0, V.jsx)(ej.Z, {
                              style: { marginTop: 10 },
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsxs)(td.Z, {
                                align: "middle",
                                children: [
                                  (0, V.jsx)(ti.Z, {
                                    children: (0, V.jsx)(ts.ZP, {
                                      src: "".concat(ty),
                                    }),
                                  }),
                                  (0, V.jsxs)(ti.Z, {
                                    flex: "auto",
                                    style: { marginLeft: 16 },
                                    children: [
                                      (0, V.jsx)("div", {
                                        children: (0, V.jsx)("strong", {
                                          children: tg,
                                        }),
                                      }),
                                      (0, V.jsx)("div", {
                                        children: (0, V.jsx)(tP, {
                                          type: "secondary",
                                          children: th,
                                        }),
                                      }),
                                    ],
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(e0.default.Group, {
                                onChange: (e) => {
                                  console.log("radio checked", e.target.value),
                                    eo(e.target.value);
                                },
                                value: ea,
                                children: [
                                  (0, V.jsx)(e0.default, {
                                    value: 1,
                                    children: "固定",
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 2,
                                    children: "百分比",
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 3,
                                    children: "随机",
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    id: "buyamount",
                                    type: "number",
                                    style: { width: 100, marginLeft: 10 },
                                    value: ex,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      eg(t);
                                    },
                                  }),
                                  3 === ea
                                    ? (0, V.jsx)(e$.default, {
                                        id: "ranamount2",
                                        type: "number",
                                        style: { width: 100, marginLeft: 10 },
                                        placeholder: "随机最大值",
                                      })
                                    : "",
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  type: "default",
                                  size: "large",
                                  onClick: handlebuy,
                                  children: "一键买入",
                                }),
                                (0, V.jsx)("span", {
                                  children: "执行间隔(毫秒):",
                                }),
                                (0, V.jsx)(e$.default, {
                                  id: "buyslepp",
                                  type: "number",
                                  style: { width: 100, marginLeft: 10 },
                                  value: ep,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    ey(t);
                                  },
                                }),
                              ],
                            }),
                            (0, V.jsx)(eb(), {
                              type: "default",
                              size: "large",
                              onClick: handlebuyYibu,
                              children: "暴力买入",
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(e0.default.Group, {
                                onChange: (e) => {
                                  console.log("radio checked", e.target.value),
                                    ec(e.target.value);
                                },
                                value: ei,
                                children: [
                                  (0, V.jsx)(e0.default, {
                                    value: 1,
                                    children: "固定",
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 2,
                                    children: "百分比",
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    id: "saleamount",
                                    type: "number",
                                    style: { width: 100, marginLeft: 10 },
                                    value: eS,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      ev(t);
                                    },
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  type: "default",
                                  size: "large",
                                  onClick: handlesale,
                                  children: "一键卖出",
                                }),
                                (0, V.jsx)("span", {
                                  children: "执行间隔(毫秒):",
                                }),
                                (0, V.jsx)(e$.default, {
                                  id: "buyslepp",
                                  type: "number",
                                  style: { width: 100, marginLeft: 10 },
                                  value: eh,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    ew(t);
                                  },
                                }),
                              ],
                            }),
                            (0, V.jsx)(eb(), {
                              type: "default",
                              size: "large",
                              onClick: handlesaleYibu,
                              children: "暴力卖出",
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsxs)("span", {
                                  children: [
                                    "交易Gas费(SOL): ",
                                    (0, V.jsx)(e$.default, {
                                      placeholder: "买入Gas费",
                                      value: eB,
                                      style: { width: "50%" },
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        eK(t);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsx)("span", {
                                  children: '设置"0"时使用最低Gas费',
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              style: {
                                display: "flex",
                                marginTop: "6px",
                                alignItems: "center",
                                justifyContent: "flex-end",
                              },
                              children: [
                                (0, V.jsx)(tP, { children: "MEV模式" }),
                                (0, V.jsx)(e1.Z, {
                                  value: e4,
                                  onChange: () => {
                                    setEmvModeProc(!e4);
                                  },
                                }),
                              ],
                            }),
                            e4
                              ? (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsxs)(e0.default.Group, {
                                      value: e9,
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        te(t),
                                          1 === t
                                            ? (ta(3e-5), (tl.current = 3e-5))
                                            : 2 === t
                                            ? (ta(0.001), (tl.current = 0.001))
                                            : 3 === t &&
                                              (ta(0.01), (tl.current = 0.01));
                                      },
                                      children: [
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 1,
                                          children: "默认",
                                        }),
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 2,
                                          children: "高速",
                                        }),
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 3,
                                          children: "极速",
                                        }),
                                      ],
                                    }),
                                    (0, V.jsx)(e$.default, {
                                      type: "number",
                                      step: 1e-5,
                                      style: { width: 100 },
                                      value: tt,
                                      onChange: (e) => {
                                        let t = Number(e.target.value);
                                        ta(t), (tl.current = t);
                                      },
                                    }),
                                  ],
                                })
                              : "",
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tN, {
                                rows: 8,
                                wrap: "off",
                                placeholder: "运行日志...",
                                value: eP,
                              }),
                            }),
                            (0, V.jsx)(eb(), {
                              size: "middle",
                              onClick: () => {
                                eN("");
                              },
                              children: "清空日志",
                            }),
                            (0, V.jsx)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleRefPoolInfo,
                                children: "刷新",
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  type: "primary",
                                  onClick: handleRemovePool,
                                  children: "移除流动性",
                                }),
                                (0, V.jsx)("input", {
                                  type: "number",
                                  className:
                                    "max-w-md mx-auto border-2 rounded-lg border-[#5252529f] text-sm p-2 px-2 my-2 w-30",
                                  value: K,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    t <= J
                                      ? (M(parseFloat(t)), et((q / J) * t))
                                      : (M(J), et(q));
                                  },
                                }),
                                (0, V.jsxs)("div", {
                                  className: "flex flex-col mx-left w-full",
                                  children: [
                                    (0, V.jsx)(tu.Z, {
                                      min: 1,
                                      max: 100,
                                      value: T,
                                      onChange: (e) => {
                                        A(e);
                                      },
                                    }),
                                    (0, V.jsxs)("div", {
                                      className:
                                        "w-full flex justify-between text-xs pl-2",
                                      children: [
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            A(1);
                                          },
                                          children: " 1%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            A(25);
                                          },
                                          children: "25%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            A(50);
                                          },
                                          children: "50%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            A(75);
                                          },
                                          children: "75%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            A(100);
                                          },
                                          children: "100%",
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  type: "primary",
                                  onClick: handleBurnPool,
                                  children: "燃烧流动性",
                                }),
                                (0, V.jsx)("input", {
                                  type: "number",
                                  className:
                                    "max-w-md mx-auto border-2 rounded-lg border-[#5252529f] text-sm p-2 px-2 my-2 w-30",
                                  value: C,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    t <= J ? _(parseFloat(t)) : _(J);
                                  },
                                }),
                                (0, V.jsxs)("div", {
                                  className: "flex flex-col mx-left w-full",
                                  children: [
                                    (0, V.jsx)(tu.Z, {
                                      min: 1,
                                      max: 100,
                                      value: L,
                                      onChange: (e) => {
                                        B(e);
                                      },
                                    }),
                                    (0, V.jsxs)("div", {
                                      className:
                                        "w-full flex justify-between text-xs pl-2",
                                      children: [
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            B(1);
                                          },
                                          children: " 1%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            B(25);
                                          },
                                          children: "25%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            B(50);
                                          },
                                          children: "50%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            B(75);
                                          },
                                          children: "75%",
                                        }),
                                        (0, V.jsx)("span", {
                                          className:
                                            "border border-gray-500 p-1 rounded-lg",
                                          onClick: () => {
                                            B(100);
                                          },
                                          children: "100%",
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  onClick: handlechibilist,
                                  children: "持币地址扫描",
                                }),
                                (0, V.jsxs)("span", {
                                  children: [e6, " 个地址"],
                                }),
                                (0, V.jsx)(tr.default, {
                                  id: "notself",
                                  children: "不在帐号列表的地址",
                                }),
                                (0, V.jsx)(tr.default, {
                                  id: "notblack",
                                  children: "非黑名单",
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsxs)("span", {
                                  children: ["余额>", " "],
                                }),
                                (0, V.jsx)(e$.default, {
                                  type: "number",
                                  id: "useramount",
                                  placeholder: "Basic usage",
                                  defaultValue: 0,
                                  style: { width: "20%" },
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tN, {
                                rows: 8,
                                wrap: "off",
                                value: p,
                              }),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                ],
              }),
              i && (0, V.jsx)(components_Loading, {}),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: d("msgbox.fbtn") }),
                onClick: () => eJ(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: eY,
                msgParam: tj,
                handleCancel: () => {
                  eJ(!1);
                },
              }),
            ],
          });
        };
      var t8 = a(15970),
        t6 = a(93383),
        t3 = JSON.parse(
          '{"address":"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P","metadata":{"name":"pump","version":"0.1.0","spec":"0.1.0"},"instructions":[{"name":"initialize","discriminator":[175,175,109,31,13,152,155,237],"docs":["Creates the global state."],"accounts":[{"name":"global","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,108,111,98,97,108]}]}},{"name":"user","writable":true,"signer":true},{"name":"system_program","address":"11111111111111111111111111111111"}],"args":[]},{"name":"setParams","discriminator":[165,31,134,53,189,180,130,255],"docs":["Sets the global state parameters."],"accounts":[{"name":"global","writable":true,"pda":{"seeds":[{"kind":"const","value":[103,108,111,98,97,108]}]}},{"name":"user","writable":true,"signer":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"event_authority","address":"Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1"},{"name":"program","address":"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"}],"args":[{"name":"feeRecipient","type":"pubkey"},{"name":"initialVirtualTokenReserves","type":"u64"},{"name":"initialVirtualSolReserves","type":"u64"},{"name":"initialRealTokenReserves","type":"u64"},{"name":"tokenTotalSupply","type":"u64"},{"name":"feeBasisPoints","type":"u64"}]},{"name":"create","discriminator":[24,30,200,40,5,28,7,119],"docs":["Creates a new coin and bonding curve."],"accounts":[{"name":"mint","writable":true,"signer":true},{"name":"mint_authority","pda":{"seeds":[{"kind":"const","value":[109,105,110,116,45,97,117,116,104,111,114,105,116,121]}]}},{"name":"bonding_curve","writable":true,"pda":{"seeds":[{"kind":"const","value":[98,111,110,100,105,110,103,45,99,117,114,118,101]},{"kind":"account","path":"mint"}]}},{"name":"associated_bonding_curve","writable":true,"signer":false},{"name":"global","writable":false,"pda":{"seeds":[{"kind":"const","value":[103,108,111,98,97,108]}]}},{"name":"mpl_token_metadata","address":"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"},{"name":"metadata","writable":true,"signer":false},{"name":"user","isMut":true,"isSigner":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"},{"name":"event_authority","address":"Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1"},{"name":"program","address":"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"}],"args":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"uri","type":"string"}]},{"name":"buy","discriminator":[102,6,61,18,1,218,235,234],"docs":["Buys tokens from a bonding curve."],"accounts":[{"name":"global","pda":{"seeds":[{"kind":"const","value":[103,108,111,98,97,108]}]}},{"name":"fee_recipient","writable":true,"signer":false},{"name":"mint","writable":false,"signer":false},{"name":"bonding_curve","writable":true,"pda":{"seeds":[{"kind":"const","value":[98,111,110,100,105,110,103,45,99,117,114,118,101]},{"kind":"account","path":"mint"}]}},{"name":"associated_bonding_curve","writable":true,"signer":false},{"name":"associated_user","writable":true,"signer":false},{"name":"user","writable":true,"signer":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"},{"name":"event_authority","address":"Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1"},{"name":"program","address":"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"}],"args":[{"name":"amount","type":"u64"},{"name":"maxSolCost","type":"u64"}]},{"name":"sell","discriminator":[51,230,133,164,1,127,131,173],"docs":["Sells tokens into a bonding curve."],"accounts":[{"name":"global","writable":false,"pda":{"seeds":[{"kind":"const","value":[103,108,111,98,97,108]}]}},{"name":"feeRecipient","writable":true,"signer":false},{"name":"mint","writable":false,"signer":false},{"name":"bonding_curve","writable":true,"pda":{"seeds":[{"kind":"const","value":[98,111,110,100,105,110,103,45,99,117,114,118,101]},{"kind":"account","path":"mint"}]}},{"name":"associatedBondingCurve","writable":true,"signer":false},{"name":"associatedUser","writable":true,"signer":false},{"name":"user","writable":true,"signer":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"associated_token_program","address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"event_authority","address":"Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1"},{"name":"program","address":"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"}],"args":[{"name":"amount","type":"u64"},{"name":"minSolOutput","type":"u64"}]},{"name":"withdraw","discriminator":[183,18,70,156,148,109,161,34],"docs":["Allows the admin to withdraw liquidity for a migration once the bonding curve completes"],"accounts":[{"name":"global","writable":false,"pda":{"seeds":[{"kind":"const","value":[103,108,111,98,97,108]}]}},{"name":"lastWithdraw","writable":true,"signer":false},{"name":"mint","writable":false,"signer":false},{"name":"bonding_curve","writable":true,"pda":{"seeds":[{"kind":"const","value":[98,111,110,100,105,110,103,45,99,117,114,118,101]},{"kind":"account","path":"mint"}]}},{"name":"associatedBondingCurve","writable":true,"signer":false},{"name":"associatedUser","writable":true,"signer":false},{"name":"user","writable":true,"signer":true},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"},{"name":"event_authority","address":"Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1"},{"name":"program","address":"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"}],"args":[]}],"accounts":[{"name":"BondingCurve","discriminator":[23,183,248,55,96,216,172,96]},{"name":"Global","discriminator":[167,232,232,177,200,108,114,127]}],"events":[{"name":"CreateEvent","discriminator":[27,114,169,77,222,235,99,118]},{"name":"TradeEvent","discriminator":[189,219,127,211,78,230,97,238]},{"name":"CompleteEvent","discriminator":[95,114,97,156,212,46,152,8]},{"name":"SetParamsEvent","discriminator":[223,195,159,246,62,48,143,131]}],"types":[{"name":"Global","type":{"kind":"struct","fields":[{"name":"initialized","type":"bool"},{"name":"authority","type":"pubkey"},{"name":"feeRecipient","type":"pubkey"},{"name":"initialVirtualTokenReserves","type":"u64"},{"name":"initialVirtualSolReserves","type":"u64"},{"name":"initialRealTokenReserves","type":"u64"},{"name":"tokenTotalSupply","type":"u64"},{"name":"feeBasisPoints","type":"u64"}]}},{"name":"LastWithdraw","type":{"kind":"struct","fields":[{"name":"lastWithdrawTimestamp","type":"i64"}]}},{"name":"BondingCurve","type":{"kind":"struct","fields":[{"name":"virtualTokenReserves","type":"u64"},{"name":"virtualSolReserves","type":"u64"},{"name":"realTokenReserves","type":"u64"},{"name":"realSolReserves","type":"u64"},{"name":"tokenTotalSupply","type":"u64"},{"name":"complete","type":"bool"}]}},{"name":"CreateEvent","type":{"kind":"struct","fields":[{"name":"name","type":"string","index":false},{"name":"symbol","type":"string","index":false},{"name":"uri","type":"string","index":false},{"name":"mint","type":"pubkey","index":false},{"name":"bondingCurve","type":"pubkey","index":false},{"name":"user","type":"pubkey","index":false}]}},{"name":"TradeEvent","type":{"kind":"struct","fields":[{"name":"mint","type":"pubkey","index":false},{"name":"solAmount","type":"u64","index":false},{"name":"tokenAmount","type":"u64","index":false},{"name":"isBuy","type":"bool","index":false},{"name":"user","type":"pubkey","index":false},{"name":"timestamp","type":"i64","index":false},{"name":"virtualSolReserves","type":"u64","index":false},{"name":"virtualTokenReserves","type":"u64","index":false},{"name":"realSolReserves","type":"u64","index":false},{"name":"realTokenReserves","type":"u64","index":false}]}},{"name":"CompleteEvent","type":{"kind":"struct","fields":[{"name":"user","type":"pubkey","index":false},{"name":"mint","type":"pubkey","index":false},{"name":"bondingCurve","type":"pubkey","index":false},{"name":"timestamp","type":"i64","index":false}]}},{"name":"SetParamsEvent","type":{"kind":"struct","fields":[{"name":"feeRecipient","type":"pubkey","index":false},{"name":"initialVirtualTokenReserves","type":"u64","index":false},{"name":"initialVirtualSolReserves","type":"u64","index":false},{"name":"initialRealTokenReserves","type":"u64","index":false},{"name":"tokenTotalSupply","type":"u64","index":false},{"name":"feeBasisPoints","type":"u64","index":false}]}}],"errors":[{"code":6000,"name":"NotAuthorized","msg":"The given account is not authorized to execute this instruction."},{"code":6001,"name":"AlreadyInitialized","msg":"The program is already initialized."},{"code":6002,"name":"TooMuchSolRequired","msg":"slippage: Too much SOL required to buy the given amount of tokens."},{"code":6003,"name":"TooLittleSolReceived","msg":"slippage: Too little SOL received to sell the given amount of tokens."},{"code":6004,"name":"MintDoesNotMatchBondingCurve","msg":"The mint does not match the bonding curve."},{"code":6005,"name":"BondingCurveComplete","msg":"The bonding curve has completed and liquidity migrated to raydium."},{"code":6006,"name":"BondingCurveNotComplete","msg":"The bonding curve has not completed."},{"code":6007,"name":"NotInitialized","msg":"The program is not initialized."},{"code":6008,"name":"WithdrawTooFrequent","msg":"Withdraw too frequent"}]}'
        ),
        t4 = a(48764).Buffer;
      let t7 = new Y.PublicKey("4wTV1YmiEkRvAtNtsSGPtUrqRYQMe5SKy2uB4Jjaxnjf"),
        t9 = new Y.PublicKey("CebN5WGQ4jvEPvsVU4EoHEpgzq1VV7AbicfhtW4xC9iM"),
        ae = new Y.PublicKey("11111111111111111111111111111111"),
        at = new Y.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),
        aa = new Y.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
        al = new Y.PublicKey("SysvarRent111111111111111111111111111111111"),
        an = new Y.PublicKey("Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1"),
        as = new Y.PublicKey("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"),
        ao = 1e-4,
        ar = 1e-4;
      function getBondingCurvePDA(e) {
        return Y.PublicKey.findProgramAddressSync(
          [t4.from("bonding-curve"), e.toBuffer()],
          as
        )[0];
      }
      function bufferFromUInt64(e) {
        let t = t4.alloc(8);
        return t.writeBigUInt64LE(BigInt(e)), t;
      }
      let BondingCurveAccount = class BondingCurveAccount {
        static fromBuffer(e) {
          let t = (0, t8.struct)([
              (0, t8.u64)("discriminator"),
              (0, t8.u64)("virtualTokenReserves"),
              (0, t8.u64)("virtualSolReserves"),
              (0, t8.u64)("realTokenReserves"),
              (0, t8.u64)("realSolReserves"),
              (0, t8.u64)("tokenTotalSupply"),
              (0, t8.bool)("complete"),
            ]),
            a = t.decode(e);
          return new BondingCurveAccount(
            BigInt(a.discriminator),
            BigInt(a.virtualTokenReserves),
            BigInt(a.virtualSolReserves),
            BigInt(a.realTokenReserves),
            BigInt(a.realSolReserves),
            BigInt(a.tokenTotalSupply),
            a.complete
          );
        }
        constructor(e, t, a, l, n, s, o) {
          (this.discriminator = e),
            (this.virtualTokenReserves = t),
            (this.virtualSolReserves = a),
            (this.realTokenReserves = l),
            (this.realSolReserves = n),
            (this.tokenTotalSupply = s),
            (this.complete = o);
        }
      };
      let GlobalAccount = class GlobalAccount {
        static fromBuffer(e) {
          let t = (0, t8.struct)([
              (0, t8.u64)("discriminator"),
              (0, t8.bool)("initialized"),
              (0, t8.publicKey)("authority"),
              (0, t8.publicKey)("feeRecipient"),
              (0, t8.u64)("initialVirtualTokenReserves"),
              (0, t8.u64)("initialVirtualSolReserves"),
              (0, t8.u64)("initialRealTokenReserves"),
              (0, t8.u64)("tokenTotalSupply"),
              (0, t8.u64)("feeBasisPoints"),
            ]),
            a = t.decode(e);
          return new GlobalAccount(
            BigInt(a.discriminator),
            a.initialized,
            a.authority,
            a.feeRecipient,
            BigInt(a.initialVirtualTokenReserves),
            BigInt(a.initialVirtualSolReserves),
            BigInt(a.initialRealTokenReserves),
            BigInt(a.tokenTotalSupply),
            BigInt(a.feeBasisPoints)
          );
        }
        constructor(e, t, a, l, n, s, o, r, i) {
          (this.initialized = !1),
            (this.discriminator = e),
            (this.initialized = t),
            (this.authority = a),
            (this.feeRecipient = l),
            (this.initialVirtualTokenReserves = n),
            (this.initialVirtualSolReserves = s),
            (this.initialRealTokenReserves = o),
            (this.tokenTotalSupply = r),
            (this.feeBasisPoints = i);
        }
      };
      let ai = "finalized";
      async function getGlobalAccount() {
        let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ai,
          t = arguments.length > 1 ? arguments[1] : void 0,
          [a] = Y.PublicKey.findProgramAddressSync(
            [t4.from("global")],
            new Y.PublicKey("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P")
          ),
          l = await t.getAccountInfo(a, e);
        return GlobalAccount.fromBuffer(l.data);
      }
      async function getBondingCurveAccount(e, t) {
        let a =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : "finalized",
          l = await t.getAccountInfo(getBondingCurvePDA(e), a);
        return l ? BondingCurveAccount.fromBuffer(l.data) : null;
      }
      let calculateWithSlippageBuy = (e, t) => e + (e * t) / BigInt(1e4);
      async function getBuyPrice(e, t, a) {
        let l = await getBondingCurveAccount(e, t);
        if (!l) throw Error("error");
        if (l.complete) throw Error("Curve is complete");
        if (a <= BigInt(0)) return BigInt(0);
        let n = l.virtualSolReserves * l.virtualTokenReserves,
          s = l.virtualSolReserves + a,
          o = n / s + BigInt(1),
          r = l.virtualTokenReserves - o;
        return (
          console.log("virtualSolReserves: ", l.virtualSolReserves),
          console.log("virtualTokenReserves: ", l.virtualTokenReserves),
          console.log("realTokenReserves: ", l.realTokenReserves),
          r < l.realTokenReserves ? r : l.realTokenReserves
        );
      }
      async function getInitialBuyPrice(e, t) {
        if (t <= 0) return BigInt(0);
        let a = await getGlobalAccount(ai, e),
          l =
            (a.initialVirtualSolReserves * a.initialVirtualTokenReserves) /
              (a.initialVirtualSolReserves + t) +
            BigInt(1),
          n = a.initialVirtualTokenReserves - l;
        return n < a.initialRealTokenReserves ? n : a.initialRealTokenReserves;
      }
      async function getBuyInstructions(e, t, a, l, n) {
        let s = await (0, en.Am)(t, getBondingCurvePDA(t), !0),
          o = await (0, en.Am)(t, e, !1),
          r = new Y.Transaction();
        try {
          await (0, eV.D0)(this.connection, o, "confirmed");
        } catch (a) {
          r.add((0, er.Ek)(e, o, e, t));
        }
        let i = new t6.$r(t3, n);
        return (
          r.add(
            await i.methods
              .buy(new eG.BN(a.toString()), new eG.BN(l.toString()))
              .accounts({
                feeRecipient: new Y.PublicKey(t9),
                mint: t,
                associatedBondingCurve: s,
                associatedUser: o,
                user: e,
              })
              .transaction()
          ),
          r
        );
      }
      async function Swap_Buy_pump(e, t, a, l, n, s, o) {
        let r =
            !(arguments.length > 7) || void 0 === arguments[7] || arguments[7],
          i = new Y.Transaction();
        if (0 !== ao) {
          let e = Y.ComputeBudgetProgram.setComputeUnitLimit({
            units: ao * Y.LAMPORTS_PER_SOL,
          });
          i.add(e);
        }
        if (0 !== ar) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: ar * Y.LAMPORTS_PER_SOL,
          });
          i.add(e);
        }
        let c = await (0, en.Am)(l, n.publicKey, !1);
        if (r) i.add((0, er.Ek)(n.publicKey, c, n.publicKey, l));
        else {
          let t = await e.getAccountInfo(c);
          t || i.add((0, er.Ek)(n.publicKey, c, n.publicKey, l));
        }
        let d = [
            { pubkey: t7, isSigner: !1, isWritable: !1 },
            { pubkey: t9, isSigner: !1, isWritable: !0 },
            { pubkey: l, isSigner: !1, isWritable: !1 },
            { pubkey: t, isSigner: !1, isWritable: !0 },
            { pubkey: a, isSigner: !1, isWritable: !0 },
            { pubkey: c, isSigner: !1, isWritable: !0 },
            { pubkey: n.publicKey, isSigner: !1, isWritable: !0 },
            { pubkey: ae, isSigner: !1, isWritable: !1 },
            { pubkey: at, isSigner: !1, isWritable: !1 },
            { pubkey: al, isSigner: !1, isWritable: !1 },
            { pubkey: an, isSigner: !1, isWritable: !1 },
            { pubkey: as, isSigner: !1, isWritable: !1 },
          ],
          u = t4.concat([
            bufferFromUInt64("16927863322537952870"),
            bufferFromUInt64(s),
            bufferFromUInt64(o),
          ]),
          m = new Y.TransactionInstruction({ keys: d, programId: as, data: u });
        return i.add(m), i;
      }
      async function Swap_Sale_pump(e, t, a, l, n) {
        let s = new Y.Transaction();
        if (0 !== ao) {
          let e = Y.ComputeBudgetProgram.setComputeUnitLimit({
            units: ao * Y.LAMPORTS_PER_SOL,
          });
          s.add(e);
        }
        if (0 !== ar) {
          let e = Y.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: ar * Y.LAMPORTS_PER_SOL,
          });
          s.add(e);
        }
        let o = await (0, en.Am)(a, l.publicKey, !1),
          r = [
            { pubkey: t7, isSigner: !1, isWritable: !1 },
            { pubkey: t9, isSigner: !1, isWritable: !0 },
            { pubkey: a, isSigner: !1, isWritable: !1 },
            { pubkey: e, isSigner: !1, isWritable: !0 },
            { pubkey: t, isSigner: !1, isWritable: !0 },
            { pubkey: o, isSigner: !1, isWritable: !0 },
            { pubkey: l.publicKey, isSigner: !1, isWritable: !0 },
            { pubkey: ae, isSigner: !1, isWritable: !1 },
            { pubkey: aa, isSigner: !1, isWritable: !1 },
            { pubkey: at, isSigner: !1, isWritable: !1 },
            { pubkey: an, isSigner: !1, isWritable: !1 },
            { pubkey: as, isSigner: !1, isWritable: !1 },
          ],
          i = t4.concat([
            bufferFromUInt64("12502976635542562355"),
            bufferFromUInt64(n),
            bufferFromUInt64(0),
          ]),
          c = new Y.TransactionInstruction({ keys: r, programId: as, data: i });
        return s.add(c), s;
      }
      async function getCreateInstructions(e, t, a, l, n, s) {
        let o = new Y.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
          [r] = Y.PublicKey.findProgramAddressSync(
            [t4.from("metadata"), o.toBuffer(), n.publicKey.toBuffer()],
            o
          ),
          i = await (0, en.Am)(
            n.publicKey,
            getBondingCurvePDA(n.publicKey),
            !0
          ),
          c = new t6.$r(t3, s);
        return c.methods
          .create(t, a, l)
          .accounts({
            mint: n.publicKey,
            associatedBondingCurve: i,
            metadata: r,
            user: e,
          })
          .signers([n])
          .transaction();
      }
      var ac = a(34155),
        ad = a(48764).Buffer;
      let au = [],
        MarketagePumpView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            { t: d } = (0, G.$G)("common"),
            [u, m] = (0, z.useState)([]),
            [x, g] = (0, z.useState)(""),
            [p, y] = (0, z.useState)(""),
            [f, h] = (0, z.useState)(""),
            [b, w] = (0, z.useState)([]),
            [j, k] = (0, z.useState)(100),
            [S, v] = (0, z.useState)(100),
            [K, M] = (0, z.useState)(0),
            [C, _] = (0, z.useState)(0),
            [R, O] = (0, z.useState)(!1),
            [Z, I] = (0, z.useState)(""),
            [E, F] = (0, z.useState)(""),
            [q, D] = (0, z.useState)(0),
            [W, H] = (0, z.useState)(""),
            [X, J] = (0, z.useState)(0),
            [$, ee] = (0, z.useState)(0.01),
            [et, ea] = (0, z.useState)(1),
            [eo, ei] = (0, z.useState)(2),
            [ec, eu] = (0, z.useState)(!1),
            [em, ex] = (0, z.useState)("0.1"),
            [eg, ep] = (0, z.useState)("1000"),
            [ey, eh] = (0, z.useState)("1000"),
            [ew, eS] = (0, z.useState)("100"),
            [ev, eP] = (0, z.useState)(""),
            [eN, eT] = (0, z.useState)("49"),
            [eA, eL] = (0, z.useState)("0.0001"),
            [eB, eK] = (0, z.useState)(!1),
            [eM, eC] = (0, z.useState)(!1),
            [e_, eR] = (0, z.useState)(""),
            [eO, eZ] = (0, z.useState)(""),
            [eI, eE] = (0, z.useState)(""),
            [eF, eq] = (0, z.useState)(0),
            [eW, eH] = (0, z.useState)(""),
            [eQ, eU] = (0, z.useState)(!1),
            [eG, eX] = (0, z.useState)(!1),
            [eY, eJ] = (0, z.useState)(0),
            [e2, e5] = (0, z.useState)(0),
            [e6, e3] = (0, z.useState)(!0),
            [e4, e7] = (0, z.useState)(1),
            [e9, te] = (0, z.useState)(3e-5),
            tt = (0, z.useRef)(e9),
            [ta, tl] = (0, z.useState)("Demo"),
            [tu, tg] = (0, z.useState)(
              "https://api.dicebear.com/7.x/miniavs/svg?seed=0"
            ),
            [tp, ty] = (0, z.useState)(
              "5LNruZKwDvQex4aJA8JgYLw5ZYFGpodXBxZErkEbp6Co"
            ),
            tf = [
              "https://mainnet.helius-rpc.com/?api-key=3fa4e1fa-273b-441b-a7c1-285b36e43f74",
            ],
            [th, tb] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            if (((tt.current = e9), ec)) {
              let e = setInterval(() => {
                handleRefAccInfo();
              }, 8e3);
              return () => clearInterval(e);
            }
          }, [ec, e9]);
          let setEmvModeProc = (e) => {
            e ? (0, ed.wv)(1) : (0, ed.wv)(-1), e3(e);
          };
          function checkLocMode() {
            return "true" === ac.env.NEXT_PUBLIC_LOCMODE;
          }
          (0, z.useEffect)(() => {
            M((X / 100) * j), _((X / 100) * S), ee((q / 100) * j);
          }, [j, X, q, S]);
          let addSoftLog = (e) => {
              eP((t) => t + e + "\n");
            },
            tw = [
              {
                title: ""
                  .concat(d("msg.wal"), "  ")
                  .concat(d("msg.seld"), " : (")
                  .concat(eY, ")"),
                dataIndex: "publickey",
                render: (e) => (0, V.jsx)("a", { children: e }),
              },
              { title: "SOL".concat(d("msg.bal")), dataIndex: "sol" },
              {
                title: "".concat(d("msg.token")).concat(d("msg.bal")),
                dataIndex: "mint",
              },
            ],
            tj = {
              selectedRowKeys: b,
              onChange: (e, t) => {
                w(e),
                  console.log(
                    "selectedRowKeys: ".concat(e),
                    "selectedRows: ",
                    t
                  );
                for (let e = 0; e < u.length; e++) u[e].checked = !1;
                for (let e = 0; e < t.length; e++) t[e].checked = !0;
                eJ(t.length);
              },
            },
            { Paragraph: tk, Text: tS } = ek.default,
            { TextArea: tv } = e$.default;
          function getRandomNumber(e, t) {
            let a =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : 0;
            return parseFloat((Math.random() * (t - e) + e).toFixed(a));
          }
          let handlebuy = async () => {
              addSoftLog("执行一键买入"), console.log("buy");
              let e = parseFloat(em),
                t = Number(eg);
              if (u.length > 0)
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked)
                    try {
                      if (1 === et)
                        l.sol > e &&
                          (await buyFunction(e, l.connect, l.wallet),
                          console.log(
                            "".concat(l.publickey, "买入: ").concat(e, " SOL")
                          ),
                          await (0, ed._v)(t));
                      else if (2 === et) {
                        e > 100 && (e = 100);
                        let a = ((l.sol - 0.02) / 100) * e;
                        l.sol - 0.02 > a
                          ? (await buyFunction(a, l.connect, l.wallet),
                            await (0, ed._v)(t),
                            console.log(
                              ""
                                .concat(l.publickey, "买入%: ")
                                .concat(e, " SOL")
                            ))
                          : addSoftLog(
                              "钱包: ".concat(
                                truncateString(
                                  l.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " %SOL小于0.02 跳过"
                              )
                            );
                      } else {
                        let a = document.getElementById("ranamount2"),
                          n = Number(null == a ? void 0 : a.value),
                          s = getRandomNumber(e, n, 3);
                        l.sol > s &&
                          (await buyFunction(s, l.connect, l.wallet),
                          await (0, ed._v)(t),
                          console.log(
                            ""
                              .concat(l.publickey, "买入随机: ")
                              .concat(s, " SOL")
                          ));
                      }
                    } catch (e) {
                      addSoftLog("买入构造失败: ".concat(e));
                    }
                }
            },
            handlesale = async () => {
              addSoftLog("执行一键卖出"), console.log("sale");
              let e = parseFloat(ew),
                t = Number(ey);
              if (u.length > 0)
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked)
                    try {
                      if (1 === eo)
                        l.mint >= e
                          ? (await saleFunction(l.ata, e, l.connect, l.wallet),
                            await (0, ed._v)(t),
                            console.log(
                              "".concat(l.publickey, "卖出: ").concat(e, " ")
                            ))
                          : addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 代币不足 "
                                )
                                .concat(e, "跳过")
                            );
                      else {
                        e > 100 && (e = 100);
                        let a = (l.mint / 100) * e;
                        l.mint >= a
                          ? a > 0 &&
                            (console.log(a),
                            await saleFunction(l.ata, a, l.connect, l.wallet),
                            await (0, ed._v)(t),
                            console.log(
                              "".concat(l.publickey, "卖出%: ").concat(a, " ")
                            ))
                          : addSoftLog(
                              "钱包: ".concat(
                                truncateString(
                                  l.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " %代币不足跳过"
                              )
                            );
                      }
                    } catch (e) {
                      addSoftLog("卖出构造失败: ".concat(e));
                    }
                }
              addSoftLog("一键卖出执行完毕");
            },
            handlebuyYibu = async () => {
              console.log("buy"), addSoftLog("执行暴力买入");
              let e = parseFloat(em);
              if (u.length > 0) {
                let t = [];
                for (let a = 0; a < u.length; a++) {
                  let l = u[a];
                  if (l.checked) {
                    let a = (async () => {
                      try {
                        if (1 === et)
                          l.sol > e &&
                            (await buyFunction(e, l.connect, l.wallet),
                            console.log(
                              "".concat(l.publickey, "买入: ").concat(e, " SOL")
                            ));
                        else if (2 === et) {
                          e > 100 && (e = 100);
                          let t = ((l.sol - 0.02) / 100) * e;
                          l.sol - 0.02 > t
                            ? (await buyFunction(t, l.connect, l.wallet),
                              console.log(
                                ""
                                  .concat(l.publickey, "买入%: ")
                                  .concat(e, " SOL")
                              ))
                            : addSoftLog(
                                "钱包: ".concat(
                                  truncateString(
                                    l.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " %SOL小于0.02 跳过"
                                )
                              );
                        } else {
                          let t = document.getElementById("ranamount2"),
                            a = Number(null == t ? void 0 : t.value),
                            n = getRandomNumber(e, a, 3);
                          l.sol > n &&
                            (await buyFunction(n, l.connect, l.wallet),
                            console.log(
                              ""
                                .concat(l.publickey, "买入随机: ")
                                .concat(n, " SOL")
                            ));
                        }
                      } catch (e) {
                        addSoftLog("买入构造失败: ".concat(e));
                      }
                    })();
                    t.push(a);
                  }
                }
                await Promise.all(t);
              }
            },
            handlesaleYibu = async () => {
              async function getSaleiTx(e, t, a) {
                let l = await Swap_Sale_pump(L, B, A, t, Math.floor(1e6 * e));
                if (!checkLocMode()) {
                  let e = new Y.PublicKey(
                      "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                    ),
                    a = Y.SystemProgram.transfer({
                      fromPubkey: t.publicKey,
                      toPubkey: e,
                      lamports: 15e5,
                    });
                  l.add(a);
                }
                return l;
              }
              addSoftLog("执行暴力卖出"), console.log("sale");
              let e = parseFloat(ew),
                t = [],
                l = !0,
                n = 0,
                s = await a.getLatestBlockhash();
              if (u.length > 0) {
                for (let o = 0; o < u.length; o++) {
                  let r = u[o];
                  if (r.checked)
                    try {
                      if (1 === eo) {
                        if (r.mint >= e) {
                          let o = await getSaleiTx(e, r.wallet, r.ata);
                          if (
                            (addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    r.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 卖出: "
                                )
                                .concat(e)
                            ),
                            (n += e),
                            l)
                          ) {
                            l = !1;
                            let e = getRandomTipAccount(),
                              t = tt.current;
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: r.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          (o.feePayer = r.wallet.publicKey),
                            (o.recentBlockhash = s.blockhash),
                            o.sign(r.wallet);
                          let i = e8().encode(o.serialize());
                          if ((t.push(i), t.length >= 5)) {
                            let e = await sendBundle(t);
                            console.log("绑定包发送成功 id:", e),
                              (l = !0),
                              (t = []),
                              (s = await a.getLatestBlockhash());
                          }
                          console.log(
                            "".concat(r.publickey, "卖出: ").concat(e, " ")
                          );
                        } else
                          addSoftLog(
                            "钱包: "
                              .concat(
                                truncateString(
                                  r.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " 代币不足 "
                              )
                              .concat(e, "跳过")
                          );
                      } else {
                        e > 100 && (e = 100);
                        let o = (r.mint / 100) * e;
                        if (r.mint >= o && o > 0) {
                          let i = await getSaleiTx(o, r.wallet, r.ata);
                          if (
                            (addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    r.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 卖出: "
                                )
                                .concat(e)
                            ),
                            (n += o),
                            l)
                          ) {
                            l = !1;
                            let e = getRandomTipAccount(),
                              t = tt.current;
                            i.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: r.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          (i.feePayer = r.wallet.publicKey),
                            (i.recentBlockhash = s.blockhash),
                            i.sign(r.wallet);
                          let c = e8().encode(i.serialize());
                          if ((t.push(c), t.length >= 5)) {
                            let e = await sendBundle(t);
                            console.log("绑定包发送成功 id:", e),
                              (l = !0),
                              (t = []),
                              (s = await a.getLatestBlockhash());
                          }
                        } else
                          addSoftLog(
                            "钱包: ".concat(
                              truncateString(
                                r.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " %代币不足跳过"
                            )
                          );
                      }
                    } catch (e) {
                      addSoftLog("卖出构造失败: ".concat(e));
                    }
                }
                if (t.length > 0) {
                  let e = await sendBundle(t);
                  console.log("绑定包发送成功 id:", e),
                    (l = !0),
                    (t = []),
                    (s = await a.getLatestBlockhash());
                }
                addSoftLog("执行完成 本次总卖出代币: ".concat(n));
              }
            };
          async function getAllAccByMint(e, t) {
            let a = await e.getParsedProgramAccounts(es.H_, {
              filters: [{ dataSize: 165 }, { memcmp: { offset: 0, bytes: t } }],
            });
            return a;
          }
          function compareByTokenAmount(e, t) {
            let a = parseFloat(e.account.data.parsed.info.tokenAmount.uiAmount),
              l = parseFloat(t.account.data.parsed.info.tokenAmount.uiAmount);
            return a > l ? -1 : a < l ? 1 : 0;
          }
          let handlechibilist = async () => {
            if (!l) {
              notify({ type: "error", message: "请先连接钱包" });
              return;
            }
            if (!N) {
              notify({ type: "error", message: "请先设置池子信息!" });
              return;
            }
            let e = document.getElementById("useramount"),
              t = Number(null == e ? void 0 : e.value),
              n = document.getElementById("notself"),
              s = null == n ? void 0 : n.checked,
              o = document.getElementById("notblack"),
              r = null == o ? void 0 : o.checked,
              i = N.authority,
              c = new Y.PublicKey(N.baseMint),
              d = [];
            g("");
            let m = await getAllAccByMint(a, c);
            m.sort(compareByTokenAmount), console.log(au);
            for (let e = 0; e < m.length; e++) {
              let l = m[e].account.data.parsed.info;
              if (
                !(
                  s &&
                  (function (e) {
                    for (let t = 0; t < u.length; t++) {
                      let a = u[t];
                      if (a.wallet.publicKey.toString() === e) return !0;
                    }
                    return !1;
                  })(l.owner)
                )
              ) {
                if (0 === t)
                  l.owner === i
                    ? d.push(
                        truncateString(l.owner, 16, 8, 8) +
                          "(RaydiumPool)/" +
                          l.tokenAmount.uiAmount
                      )
                    : d.push(l.owner + "/" + l.tokenAmount.uiAmount);
                else {
                  let e = Number(l.tokenAmount.uiAmount);
                  if (e > t) {
                    if (r) {
                      if (
                        (function (e) {
                          for (let t = 0; t < au.length; t++)
                            if (e === au[t]) return !0;
                          return !1;
                        })(l.owner)
                      )
                        continue;
                      if (l.owner !== i) {
                        let e = new Y.PublicKey(l.owner),
                          t = await (0, en.Am)(P.mint, e);
                        try {
                          if ((await (0, eV.D0)(a, t)).isFrozen) {
                            au.push(l.owner);
                            continue;
                          }
                        } catch (e) {
                          e instanceof ez.We ||
                            e instanceof ez.Or ||
                            console.log(e);
                        }
                      }
                    }
                    l.owner === i
                      ? d.push(
                          truncateString(l.owner, 16, 8, 8) +
                            "(RaydiumPool)/" +
                            l.tokenAmount.uiAmount
                        )
                      : d.push(l.owner + "/" + l.tokenAmount.uiAmount);
                  }
                }
              }
            }
            let x = d.join("\n");
            g(x), e5(d.length);
          };
          async function buyFunction(e, t, a) {
            addSoftLog(
              "买入钱包: "
                .concat(
                  truncateString(a.publicKey.toString(), 16, 8, 8),
                  " 数量:"
                )
                .concat(e)
            );
            let l = await getBuyPrice(A, t, BigInt(e * Y.LAMPORTS_PER_SOL)),
              n = calculateWithSlippageBuy(
                BigInt(e * Y.LAMPORTS_PER_SOL),
                BigInt(500)
              ),
              s = await Swap_Buy_pump(t, L, B, A, a, l, n, !1);
            if (!checkLocMode()) {
              let e = new Y.PublicKey(
                  "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                ),
                t = Y.SystemProgram.transfer({
                  fromPubkey: a.publicKey,
                  toPubkey: e,
                  lamports: 15e5,
                });
              s.add(t);
            }
            if (e6) {
              let e = getRandomTipAccount(),
                l = tt.current;
              s.add(
                Y.SystemProgram.transfer({
                  fromPubkey: a.publicKey,
                  toPubkey: e,
                  lamports: l * Y.LAMPORTS_PER_SOL,
                })
              );
              let n = await t.getLatestBlockhash();
              (s.feePayer = a.publicKey),
                (s.recentBlockhash = n.blockhash),
                s.sign(a);
              let o = e8().encode(s.serialize()),
                r = [];
              r.push(o);
              let i = await sendBundle(r);
              return console.log("swapped in tx id:", i), i;
            }
            {
              let e = await t.sendTransaction(s, [a], { skipPreflight: !0 });
              return console.log("swapped in tx id:", e), e;
            }
          }
          async function saleFunction(e, t, a, l) {
            (tT = parseFloat(eA)),
              addSoftLog(
                "卖出钱包: "
                  .concat(
                    truncateString(l.publicKey.toString(), 16, 8, 8),
                    " 数量:"
                  )
                  .concat(t)
              );
            let n = Math.floor(1e6 * t),
              s = await Swap_Sale_pump(L, B, A, l, n);
            if (!checkLocMode()) {
              let e = new Y.PublicKey(
                  "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                ),
                t = Y.SystemProgram.transfer({
                  fromPubkey: l.publicKey,
                  toPubkey: e,
                  lamports: 15e5,
                });
              s.add(t);
            }
            if (e6) {
              let e = getRandomTipAccount(),
                t = tt.current;
              s.add(
                Y.SystemProgram.transfer({
                  fromPubkey: l.publicKey,
                  toPubkey: e,
                  lamports: t * Y.LAMPORTS_PER_SOL,
                })
              );
              let n = await a.getLatestBlockhash();
              (s.feePayer = l.publicKey),
                (s.recentBlockhash = n.blockhash),
                s.sign(l);
              let o = e8().encode(s.serialize()),
                r = [];
              r.push(o);
              let i = await sendBundle(r);
              return console.log("swapped in tx id:", i), i;
            }
            {
              let e = await a.sendTransaction(s, [l], { skipPreflight: !0 });
              return console.log("swapped in tx id:", e), e;
            }
          }
          let handleSetPool = async () => {
              c(!0);
              let e = document.getElementById("pool"),
                t = null == e ? void 0 : e.value;
              try {
                (A = new Y.PublicKey(t)),
                  (L = await getBondingCurvePDA(A)),
                  (B = await (0, en.Am)(A, L, !0)),
                  (T = new Y.Connection(
                    "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
                  ));
                let e = await getTokenMetadataProc(T, A);
                console.log("Meta:", e);
                let a = e.data.symbol,
                  l = e.data.uri,
                  n = l.replace(/\u0000/g, ""),
                  s = await getImageJson(n);
                tl(a.replace(/\u0000/g, "")),
                  s.image ? tg(s.image) : tg(n),
                  ty(A.toString()),
                  eC(!0);
              } catch (e) {
                console.log(e),
                  notify({
                    type: "error",
                    message: "错误",
                    description: "设置失败!",
                  });
              } finally {
                c(!1);
              }
            },
            getSolBalanceA = async (e, t) => {
              try {
                return (
                  (await e.getBalance(t, "confirmed")) / Y.LAMPORTS_PER_SOL
                );
              } catch (e) {
                return console.log("error getting balance: ", e), 0;
              }
            };
          async function getTokenAccount(e, t) {
            let a = await e.getParsedProgramAccounts(es.H_, {
              filters: [
                { dataSize: 165 },
                { memcmp: { offset: 32, bytes: t } },
              ],
            });
            return a;
          }
          let handleSeleceTokenNotZero = async () => {
              let e = [],
                t = [];
              for (let a = 0; a < u.length; a++)
                0 !== u[a].mint && (e.push(u[a].key), t.push(u[a]));
              w(e), tj.onChange(e, t);
            },
            handleSeleceNotZero = async () => {
              let e = [],
                t = [];
              for (let a = 0; a < u.length; a++)
                0 !== u[a].sol && (e.push(u[a].key), t.push(u[a]));
              w(e), tj.onChange(e, t);
            },
            handleRefAccInfo = async () => {
              let e = !1,
                t = 0,
                a = 0,
                l = 0;
              for (let n = 0; n < u.length; n++) {
                if (!u[n].connect) {
                  console.log("connecting");
                  try {
                    (u[n].connect = new Y.Connection(tf[l])),
                      (l += 1) >= tf.length && (l = 0);
                  } catch (e) {
                    console.log("连接失败", e),
                      addSoftLog(
                        "钱包:"
                          .concat(
                            truncateString(
                              u[n].wallet.publicKey.toString(),
                              16,
                              8,
                              8
                            ),
                            " 连接失败? 代码:("
                          )
                          .concat(l, ")")
                      );
                  }
                }
                if ((console.log("connected"), u[n].checked)) {
                  e = !0;
                  try {
                    let e = await getSolBalanceA(
                        u[n].connect,
                        u[n].wallet.publicKey
                      ),
                      t = [...u];
                    (t[n].sol = e), m(t);
                  } catch (e) {
                    console.log("getSolBalanceA Error~!");
                  }
                  try {
                    let e = await getTokenAccount(
                      u[n].connect,
                      u[n].wallet.publicKey
                    );
                    for (let t = 0; t < e.length; t++) {
                      let a = e[t].account.data.parsed.info;
                      if (a.mint === A.toString()) {
                        let l = a.tokenAmount.uiAmount,
                          s = [...u];
                        (s[n].ata = e[t].pubkey), (s[n].mint = Number(l)), m(s);
                      }
                    }
                  } catch (e) {
                    console.log("getSolBalanceA Error~!", e);
                  }
                }
                (t += u[n].sol), (a += u[n].mint);
              }
              console.log(t),
                eR(t.toString()),
                eZ(a.toFixed(2)),
                eE((0).toFixed(2)),
                e || addSoftLog("请先选中要操作的帐号");
            },
            handleCloseAcc = async () => {
              addSoftLog("执行批量关闭账户");
              let e = document.getElementById("canburn"),
                t = e.checked,
                a = [],
                l = !0;
              for (let e = 0; e < u.length; e++)
                if (u[e].checked) {
                  let n = u[e];
                  try {
                    let e = await getTokenAccount(
                      n.connect,
                      n.wallet.publicKey
                    );
                    for (let s = 0; s < e.length; s++) {
                      let o = e[s].account.data.parsed.info;
                      if (0 === o.tokenAmount.uiAmount) {
                        let t = e[s].pubkey,
                          o = new Y.Transaction();
                        if (!checkLocMode()) {
                          let e = new Y.PublicKey(
                            "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                          );
                          o.add(
                            Y.SystemProgram.transfer({
                              fromPubkey: n.wallet.publicKey,
                              toPubkey: e,
                              lamports: 2e-4 * Y.LAMPORTS_PER_SOL,
                            })
                          );
                        }
                        let r = (0, tn.Zu)(
                          t,
                          n.wallet.publicKey,
                          n.wallet.publicKey
                        );
                        if ((o.add(r), e6)) {
                          let e = await n.connect.getLatestBlockhash();
                          if (l) {
                            l = !1;
                            let e = getRandomTipAccount(),
                              t = tt.current;
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: n.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          addSoftLog(
                            "".concat(
                              truncateString(
                                n.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 关闭帐号 Jito发送"
                            )
                          ),
                            (o.feePayer = n.wallet.publicKey),
                            (o.recentBlockhash = e.blockhash),
                            o.sign(n.wallet);
                          let t = e8().encode(o.serialize());
                          if ((a.push(t), a.length >= 5)) {
                            let e = await sendBundle(a);
                            addSoftLog("Jito包ID: ".concat(e)),
                              console.log("绑定包发送成功 id:", e),
                              (a = []),
                              (l = !0);
                          }
                        } else {
                          let e = await sendTxA(n.connect, n.wallet, o);
                          console.log("txids", e),
                            addSoftLog(
                              ""
                                .concat(
                                  truncateString(
                                    n.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 关闭帐号成功, 交易哈希: "
                                )
                                .concat(e)
                            );
                        }
                      } else if (t) {
                        let t = e[s].pubkey,
                          r = new Y.Transaction();
                        if (!checkLocMode()) {
                          let e = new Y.PublicKey(
                            "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                          );
                          r.add(
                            Y.SystemProgram.transfer({
                              fromPubkey: n.wallet.publicKey,
                              toPubkey: e,
                              lamports: 2e-4 * Y.LAMPORTS_PER_SOL,
                            })
                          );
                        }
                        let i = o.tokenAmount.decimals,
                          c = o.tokenAmount.uiAmount,
                          d = Math.floor(c * Math.pow(10, i)),
                          u = new Y.PublicKey(o.mint),
                          m = (0, el.T7)(
                            new Y.PublicKey(t),
                            u,
                            n.wallet.publicKey,
                            d
                          );
                        r.add(m);
                        let x = (0, tn.Zu)(
                          t,
                          n.wallet.publicKey,
                          n.wallet.publicKey
                        );
                        if ((r.add(x), e6)) {
                          let e = await n.connect.getLatestBlockhash();
                          if (l) {
                            l = !1;
                            let e = getRandomTipAccount(),
                              t = tt.current;
                            r.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: n.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          addSoftLog(
                            "".concat(
                              truncateString(
                                n.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 关闭帐号 Jito发送"
                            )
                          ),
                            (r.feePayer = n.wallet.publicKey),
                            (r.recentBlockhash = e.blockhash),
                            r.sign(n.wallet);
                          let t = e8().encode(r.serialize());
                          if ((a.push(t), a.length >= 5)) {
                            let e = await sendBundle(a);
                            addSoftLog("Jito包ID: ".concat(e)),
                              console.log("绑定包发送成功 id:", e),
                              (a = []),
                              (l = !0);
                          }
                        } else {
                          let e = await sendTxA(n.connect, n.wallet, r);
                          console.log("txids", e),
                            addSoftLog(
                              ""
                                .concat(
                                  truncateString(
                                    n.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 关闭帐号成功, 交易哈希: "
                                )
                                .concat(e)
                            );
                        }
                      }
                    }
                  } catch (e) {
                    console.log("getSolBalanceA Error~!", e);
                  }
                }
              if (e6 && a.length > 0) {
                let e = await sendBundle(a);
                console.log("绑定包发送成功 id:", e),
                  addSoftLog("Jito包ID: ".concat(e)),
                  (a = []),
                  (l = !0);
              }
              addSoftLog("执行完毕");
            },
            confirmOneKeyBack = async (e) => {
              await handleRefAccInfo();
              try {
                let e;
                let t = document.getElementById("backhold"),
                  a = null == t ? void 0 : t.value;
                (e = "" !== a ? Number(a) : 0), console.log(e);
                let l = new Y.PublicKey(eW);
                if (u.length > 0)
                  for (let t = 0; t < u.length; t++) {
                    let a = u[t];
                    if (a.checked)
                      try {
                        let t = 0.002;
                        if ((checkLocMode() && (t = 0), a.sol >= t + 0.001)) {
                          let n = Math.floor(
                              (a.sol - t - e) * Y.LAMPORTS_PER_SOL
                            ),
                            s = new Y.Transaction(),
                            o = new Y.Transaction(),
                            r = new Y.PublicKey(
                              "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                            );
                          checkLocMode() ||
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: r,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            ),
                            n % 1 != 0 &&
                              (console.log(
                                "钱包: ".concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 有小数自动舍弃小数"
                                )
                              ),
                              (n = Math.floor(n))),
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: n,
                              })
                            );
                          let i = (await a.connect.getLatestBlockhash())
                            .blockhash;
                          (s.recentBlockhash = i),
                            (s.feePayer = a.wallet.publicKey);
                          let c = await s.getEstimatedFee(a.connect);
                          checkLocMode() ||
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: r,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          let d = Math.round(
                            (a.sol - t - e) * Y.LAMPORTS_PER_SOL - c
                          );
                          console.log(a.sol),
                            console.log(d / Y.LAMPORTS_PER_SOL),
                            o.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: d,
                              })
                            );
                          let u = await sendTxA(a.connect, a.wallet, o);
                          console.log("txids", u),
                            addSoftLog(
                              "归集SOL成功: "
                                .concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 数量:"
                                )
                                .concat(n / Y.LAMPORTS_PER_SOL, ", 交易哈希: ")
                                .concat(u)
                            );
                        } else {
                          addSoftLog(
                            "钱包: ".concat(
                              truncateString(
                                a.wallet.publicKey.toString(),
                                16,
                                8,
                                8
                              ),
                              " 数量不足0.003"
                            )
                          );
                          let t = Math.floor((a.sol - e) * Y.LAMPORTS_PER_SOL),
                            n = new Y.Transaction(),
                            s = new Y.Transaction();
                          t % 1 != 0 &&
                            (console.log(
                              "钱包: ".concat(
                                truncateString(
                                  a.wallet.publicKey.toString(),
                                  16,
                                  8,
                                  8
                                ),
                                " 有小数自动舍弃小数"
                              )
                            ),
                            (t = Math.floor(t))),
                            n.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: t,
                              })
                            );
                          let o = (await a.connect.getLatestBlockhash())
                            .blockhash;
                          (n.recentBlockhash = o),
                            (n.feePayer = a.wallet.publicKey);
                          let r = await n.getEstimatedFee(a.connect);
                          console.log("fees: ", r);
                          let i = Math.round(
                            (a.sol - e) * Y.LAMPORTS_PER_SOL - r
                          );
                          console.log("amt2: ", i),
                            console.log(a.sol),
                            console.log(i / Y.LAMPORTS_PER_SOL),
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: a.wallet.publicKey,
                                toPubkey: l,
                                lamports: i,
                              })
                            );
                          let c = await sendTxA(a.connect, a.wallet, s);
                          console.log("txids", c),
                            addSoftLog(
                              "归集SOL成功: "
                                .concat(
                                  truncateString(
                                    a.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 数量:"
                                )
                                .concat(i / Y.LAMPORTS_PER_SOL, ", 交易哈希: ")
                                .concat(c)
                            );
                        }
                      } catch (e) {
                        addSoftLog(
                          "钱包: ".concat(
                            truncateString(
                              a.wallet.publicKey.toString(),
                              16,
                              8,
                              8
                            ),
                            " 执行归集出错"
                          )
                        ),
                          addSoftLog("错误信息: ".concat(e));
                      }
                  }
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "执行一键归集失败,请检查归集地址等配置是否正确",
                }),
                  console.log(e);
              }
            },
            confirmOneKeyBackToken = async (e) => {
              try {
                let e, t;
                let l = new Y.PublicKey(eW),
                  n = await (0, en.Am)(A, l),
                  s = document.getElementById("backhold"),
                  o = null == s ? void 0 : s.value;
                (e = "" !== o ? Number(o) : 0), console.log(e);
                let r = [],
                  i = !0,
                  c = 0,
                  d = !0;
                if (
                  (addSoftLog("正在执行一键归集Token"),
                  (t = await a.getLatestBlockhash()),
                  u.length > 0)
                ) {
                  for (let s = 0; s < u.length; s++) {
                    let o = u[s];
                    if (o.checked)
                      try {
                        if (o.wallet.publicKey.toString() === l.toString())
                          continue;
                        if (o.mint > 0) {
                          if (d) {
                            d = !1;
                            try {
                              await (0, eV.D0)(a, n);
                            } catch (e) {
                              if (e instanceof ez.We || e instanceof ez.Or) {
                                console.log("自动创建账户");
                                let e = new Y.Transaction();
                                e.add((0, er.Ek)(o.wallet.publicKey, n, l, A)),
                                  (e.feePayer = o.wallet.publicKey),
                                  (e.recentBlockhash = t.blockhash),
                                  e.sign(o.wallet);
                                let a = e8().encode(e.serialize());
                                r.push(a);
                              } else
                                notify({ type: "error", message: "未知错误" });
                            }
                          }
                          let s = await (function (t, a, l, n, s) {
                            let o = new Y.Transaction(),
                              r = Math.floor((n - e) * 1e6);
                            return o.add((0, eD.$B)(t, a, l, r, [], es.H_)), o;
                          })(o.ata, n, o.wallet.publicKey, o.mint, 0);
                          if (!checkLocMode()) {
                            let e = new Y.PublicKey(
                              "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                            );
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: o.wallet.publicKey,
                                toPubkey: e,
                                lamports: 0.002 * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          if (
                            (addSoftLog(
                              "钱包: "
                                .concat(
                                  truncateString(
                                    o.wallet.publicKey.toString(),
                                    16,
                                    8,
                                    8
                                  ),
                                  " 归集: "
                                )
                                .concat(o.mint)
                            ),
                            (c += o.mint),
                            i)
                          ) {
                            i = !1;
                            let e = getRandomTipAccount(),
                              t = tt.current;
                            s.add(
                              Y.SystemProgram.transfer({
                                fromPubkey: o.wallet.publicKey,
                                toPubkey: e,
                                lamports: t * Y.LAMPORTS_PER_SOL,
                              })
                            );
                          }
                          (s.feePayer = o.wallet.publicKey),
                            (s.recentBlockhash = t.blockhash),
                            s.sign(o.wallet);
                          let u = e8().encode(s.serialize());
                          if ((r.push(u), r.length >= 5)) {
                            let e = await sendBundle(r);
                            console.log("绑定包发送成功 id:", e),
                              (i = !0),
                              (r = []),
                              (t = await a.getLatestBlockhash());
                          }
                        }
                      } catch (e) {
                        addSoftLog(
                          "钱包: ".concat(
                            truncateString(
                              o.wallet.publicKey.toString(),
                              16,
                              8,
                              8
                            ),
                            " 执行归集出错"
                          )
                        ),
                          addSoftLog("错误信息: ".concat(e));
                      }
                  }
                  if (r.length > 0) {
                    let e = await sendBundle(r);
                    console.log("绑定包发送成功# id:", e), (i = !0), (r = []);
                  }
                  addSoftLog("一键归集Token完成, 归集数量: ".concat(c));
                }
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "执行一键归集失败,请检查归集地址等配置是否正确",
                }),
                  console.log(e);
              }
            },
            handleRefPoolInfo = async () => {
              if (!l) {
                notify({ type: "error", message: "请先连接钱包!" });
                return;
              }
              if (!N) {
                notify({ type: "error", message: "请先设置池子信息!" });
                return;
              }
              addSoftLog("正在刷新当前钱包池子数量");
              let e = await util_getWalletTokenAccount(a, t.publicKey);
              console.log(e);
              for (let t = 0; t < e.length; t++) {
                let a = e[t].accountInfo.mint.toString(),
                  l = e[t].pubkey.toString(),
                  n = Number(
                    e[t].accountInfo.amount.toString() / Y.LAMPORTS_PER_SOL
                  );
                console.log(t),
                  console.log(a),
                  console.log(l),
                  console.log(n),
                  a === N.lpMint &&
                    (J(n),
                    console.log("now wallet == Pool  amoung: " + n),
                    addSoftLog("当前钱包池子数量:".concat(n)));
              }
            };
          return (0, V.jsxs)("div", {
            children: [
              (0, V.jsxs)(ej.Z, {
                vertical: !0,
                gap: "middle",
                children: [
                  (0, V.jsxs)(ej.Z, {
                    gap: 10,
                    justify: "flex-start",
                    align: "flex-start",
                    children: [
                      !eB &&
                        (0, V.jsxs)(to.Z, {
                          style: { width: 600 },
                          title: "1.".concat(d("msg.wal")).concat(d("msg.set")),
                          children: [
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  onClick: () => {
                                    let e =
                                        document.getElementById("addramount"),
                                      t = Number(null == e ? void 0 : e.value),
                                      a = [],
                                      l = [];
                                    for (let e = 0; e < t; e++) {
                                      let e = Y.Keypair.generate();
                                      a.push(e8().encode(e.secretKey)),
                                        l.push(e.publicKey.toString());
                                    }
                                    let n = a.join("\n"),
                                      s = l.join("\n");
                                    y(n), h(s);
                                  },
                                  children: d("msg.gen"),
                                }),
                                (0, V.jsx)(e$.default, {
                                  type: "number",
                                  id: "addramount",
                                  placeholder: "Basic usage",
                                  defaultValue: 6,
                                  style: { width: "20%" },
                                }),
                                (0, V.jsxs)("span", {
                                  children: [d("msg.ge"), d("msg.adr")],
                                }),
                                (0, V.jsxs)(tk, {
                                  copyable: { text: p },
                                  style: { writingMode: "horizontal-tb" },
                                  children: [
                                    d("msg.copy"),
                                    d("msg.gen"),
                                    d("msg.de"),
                                    d("msg.sec"),
                                  ],
                                }),
                                (0, V.jsxs)(tk, {
                                  copyable: { text: f },
                                  style: { writingMode: "horizontal-tb" },
                                  children: [
                                    d("msg.copy"),
                                    d("msg.gen"),
                                    d("msg.de"),
                                    d("msg.adr"),
                                  ],
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tv, {
                                rows: 8,
                                wrap: "off",
                                value: p,
                                onChange: (e) => {
                                  let t = e.target.value;
                                  y(t);
                                },
                              }),
                            }),
                            (0, V.jsx)(ej.Z, {
                              gap: 30,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsxs)(eb(), {
                                type: "primary",
                                size: "large",
                                onClick: () => {
                                  let e = p
                                    .split("\n")
                                    .filter((e) => "" !== e.trim());
                                  e.map((e) =>
                                    e.length <= 95 && e.length >= 85 ? e : null
                                  ).filter((e) => null !== e);
                                  let t = [...new Set(e)];
                                  console.log(t), m([]);
                                  try {
                                    m((e) => {
                                      let a = [];
                                      for (let e = 0; e < t.length; e++) {
                                        let l = Y.Keypair.fromSecretKey(
                                            e8().decode(t[e])
                                          ),
                                          n = {
                                            key: e,
                                            publickey: truncateString(
                                              l.publicKey.toString(),
                                              16,
                                              8,
                                              8
                                            ),
                                            sol: 0,
                                            mint: 0,
                                            siyao: t[e],
                                            miyao: l.publicKey,
                                            wallet: Y.Keypair.fromSecretKey(
                                              ad.from(e8().decode(t[e]))
                                            ),
                                          };
                                        a.push(n);
                                      }
                                      return [...e, ...a];
                                    }),
                                      eK(!0);
                                  } catch (e) {
                                    console.log(e),
                                      notify({
                                        type: "error",
                                        message: "设置钱包错误",
                                        description:
                                          "检查私钥地址并刷新页面重试",
                                      });
                                  }
                                },
                                children: [d("msg.set"), d("msg.wal")],
                              }),
                            }),
                          ],
                        }),
                      !eM &&
                        (0, V.jsxs)(to.Z, {
                          style: { width: 600, height: 384 },
                          title: "2."
                            .concat(d("msg.set"))
                            .concat(d("msg.token"))
                            .concat(d("msg.info"), " - Pump"),
                          children: [
                            (0, V.jsx)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(e$.default, {
                                id: "pool",
                                placeholder: ""
                                  .concat(d("msg.input"))
                                  .concat(d("msg.token"))
                                  .concat(d("msg.adr")),
                                style: { width: "80%" },
                              }),
                            }),
                            (0, V.jsxs)(eb(), {
                              type: "primary",
                              size: "large",
                              onClick: handleSetPool,
                              style: { marginTop: 10 },
                              children: [d("msg.set"), d("msg.token")],
                            }),
                            (0, V.jsx)("p", {
                              children: (0, V.jsx)(tS, {
                                children: d("msg.pump1"),
                              }),
                            }),
                          ],
                        }),
                    ],
                  }),
                  (0, V.jsxs)(ej.Z, {
                    gap: "middle",
                    justify: "flex-start",
                    align: "flex-start",
                    children: [
                      (0, V.jsxs)(to.Z, {
                        style: { width: 600 },
                        title: "".concat(d("msg.wal")).concat(d("msg.info")),
                        children: [
                          (0, V.jsxs)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(tc.Z, {
                                title: "一键归集确认",
                                description: "归集地址:[".concat(
                                  eW,
                                  "],请确认地址是否正确,确认请点击yes"
                                ),
                                onConfirm: confirmOneKeyBack,
                                onCancel: () => {
                                  console.log("cancel");
                                },
                                okText: "Yes",
                                cancelText: "No",
                                children: (0, V.jsx)(eb(), {
                                  size: "middle",
                                  children: d("msg.back"),
                                }),
                              }),
                              (0, V.jsx)(e$.default, {
                                id: "backaddr",
                                placeholder: ""
                                  .concat(d("msg.col"))
                                  .concat(d("msg.adr")),
                                value: eW,
                                onChange: (e) => {
                                  let t = e.target.value;
                                  eH(t);
                                },
                                style: { width: "50%" },
                              }),
                              (0, V.jsx)(e$.default, {
                                id: "backhold",
                                placeholder: "".concat(d("msg.hold")),
                                style: { width: "20%" },
                              }),
                            ],
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 5,
                            style: { marginTop: 10 },
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(tc.Z, {
                                title: "一键归集Token确认",
                                description: "归集地址:[".concat(
                                  eW,
                                  "],请确认地址是否正确,确认请点击yes"
                                ),
                                onConfirm: confirmOneKeyBackToken,
                                onCancel: () => {
                                  console.log("cancel");
                                },
                                okText: "Yes",
                                cancelText: "No",
                                children: (0, V.jsx)(eb(), {
                                  size: "middle",
                                  children: d("msg.backtoken"),
                                }),
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleRefAccInfo,
                                children: d("msg.ref"),
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: () => {
                                  eu((e) => !e);
                                },
                                children: ec
                                  ? "停止"
                                  : ""
                                      .concat(d("msg.auto"))
                                      .concat(d("msg.ref")),
                              }),
                            ],
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 5,
                            style: { marginTop: 10 },
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleSeleceNotZero,
                                children: "选中SOL非0",
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleSeleceTokenNotZero,
                                children: "选中代币非0",
                              }),
                              (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleCloseAcc,
                                children: d("msg.close"),
                              }),
                              (0, V.jsx)(tr.default, {
                                id: "canburn",
                                children: "燃烧多余代币",
                              }),
                            ],
                          }),
                          (0, V.jsxs)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: [
                              (0, V.jsxs)(tS, {
                                type: "success",
                                children: ["SOL", d("msg.bal"), " (", e_, ")"],
                              }),
                              (0, V.jsxs)(tS, {
                                type: "warning",
                                children: [
                                  d("msg.token"),
                                  d("msg.bal"),
                                  " (",
                                  eO,
                                  ")",
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            style: { marginBottom: 10, marginTop: 10 },
                            children: (0, V.jsx)(ej.Z, {
                              gap: 30,
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(tx.Z, {
                                rowSelection: { type: "checkbox", ...tj },
                                style: { width: "100%" },
                                pagination: !1,
                                columns: tw,
                                dataSource: u,
                              }),
                            }),
                          }),
                        ],
                      }),
                      (0, V.jsx)(to.Z, {
                        style: { width: 600 },
                        title: ""
                          .concat(d("msg.token"))
                          .concat(d("msg.info"), " - Pump"),
                        children: (0, V.jsxs)(tm.default, {
                          direction: "vertical",
                          size: "middle",
                          style: { display: "flex" },
                          children: [
                            (0, V.jsx)(ej.Z, {
                              style: { marginTop: 10 },
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsxs)(td.Z, {
                                align: "middle",
                                children: [
                                  (0, V.jsx)(ti.Z, {
                                    children: (0, V.jsx)(ts.ZP, {
                                      src: "".concat(tu),
                                    }),
                                  }),
                                  (0, V.jsxs)(ti.Z, {
                                    flex: "auto",
                                    style: { marginLeft: 16 },
                                    children: [
                                      (0, V.jsx)("div", {
                                        children: (0, V.jsx)("strong", {
                                          children: ta,
                                        }),
                                      }),
                                      (0, V.jsx)("div", {
                                        children: (0, V.jsx)(tS, {
                                          type: "secondary",
                                          children: tp,
                                        }),
                                      }),
                                    ],
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(e0.default.Group, {
                                onChange: (e) => {
                                  console.log("radio checked", e.target.value),
                                    ea(e.target.value);
                                },
                                value: et,
                                children: [
                                  (0, V.jsx)(e0.default, {
                                    value: 1,
                                    children: d("msg.gd"),
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 2,
                                    children: d("msg.per"),
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 3,
                                    children: d("msg.ran"),
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    id: "buyamount",
                                    type: "number",
                                    style: { width: 100, marginLeft: 10 },
                                    value: em,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      ex(t);
                                    },
                                  }),
                                  3 === et
                                    ? (0, V.jsx)(e$.default, {
                                        id: "ranamount2",
                                        type: "number",
                                        style: { width: 100, marginLeft: 10 },
                                        placeholder: "随机最大值",
                                      })
                                    : "",
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  type: "default",
                                  size: "large",
                                  onClick: handlebuy,
                                  children: d("msg.buy"),
                                }),
                                (0, V.jsx)("span", {
                                  children: d("msg.sleep"),
                                }),
                                (0, V.jsx)(e$.default, {
                                  id: "buyslepp",
                                  type: "number",
                                  style: { width: 100, marginLeft: 10 },
                                  value: eg,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    ep(t);
                                  },
                                }),
                              ],
                            }),
                            (0, V.jsxs)(eb(), {
                              type: "default",
                              size: "large",
                              onClick: handlebuyYibu,
                              children: [d("msg.quk"), d("msg.buy")],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(e0.default.Group, {
                                onChange: (e) => {
                                  console.log("radio checked", e.target.value),
                                    ei(e.target.value);
                                },
                                value: eo,
                                children: [
                                  (0, V.jsx)(e0.default, {
                                    value: 1,
                                    children: d("msg.gd"),
                                  }),
                                  (0, V.jsx)(e0.default, {
                                    value: 2,
                                    children: d("msg.per"),
                                  }),
                                  (0, V.jsx)(e$.default, {
                                    id: "saleamount",
                                    type: "number",
                                    style: { width: 100, marginLeft: 10 },
                                    value: ew,
                                    onChange: (e) => {
                                      let t = e.target.value;
                                      eS(t);
                                    },
                                  }),
                                ],
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  type: "default",
                                  size: "large",
                                  onClick: handlesale,
                                  children: d("msg.sale"),
                                }),
                                (0, V.jsx)("span", {
                                  children: d("msg.sleep"),
                                }),
                                (0, V.jsx)(e$.default, {
                                  id: "buyslepp",
                                  type: "number",
                                  style: { width: 100, marginLeft: 10 },
                                  value: ey,
                                  onChange: (e) => {
                                    let t = e.target.value;
                                    eh(t);
                                  },
                                }),
                              ],
                            }),
                            (0, V.jsxs)(eb(), {
                              type: "default",
                              size: "large",
                              onClick: handlesaleYibu,
                              children: [d("msg.quk"), d("msg.sale")],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsxs)("span", {
                                  children: [
                                    "交易Gas费(SOL): ",
                                    (0, V.jsx)(e$.default, {
                                      placeholder: "买入Gas费",
                                      value: eA,
                                      style: { width: "50%" },
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        eL(t);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsx)("span", {
                                  children: '设置"0"时使用最低Gas费',
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              style: {
                                display: "flex",
                                marginTop: "6px",
                                alignItems: "center",
                                justifyContent: "flex-end",
                              },
                              children: [
                                (0, V.jsxs)(tS, {
                                  children: ["MEV ", d("msg.mode")],
                                }),
                                (0, V.jsx)(e1.Z, {
                                  value: e6,
                                  onChange: () => {
                                    setEmvModeProc(!e6);
                                  },
                                }),
                              ],
                            }),
                            e6
                              ? (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsxs)(e0.default.Group, {
                                      value: e4,
                                      onChange: (e) => {
                                        let t = e.target.value;
                                        e7(t),
                                          1 === t
                                            ? (te(3e-5), (tt.current = 3e-5))
                                            : 2 === t
                                            ? (te(0.001), (tt.current = 0.001))
                                            : 3 === t &&
                                              (te(0.01), (tt.current = 0.01));
                                      },
                                      children: [
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 1,
                                          children: d("msg.def"),
                                        }),
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 2,
                                          children: d("msg.def1"),
                                        }),
                                        (0, V.jsx)(e0.default.Button, {
                                          value: 3,
                                          children: d("msg.def2"),
                                        }),
                                      ],
                                    }),
                                    (0, V.jsx)(e$.default, {
                                      type: "number",
                                      step: 1e-5,
                                      style: { width: 100 },
                                      value: e9,
                                      onChange: (e) => {
                                        let t = Number(e.target.value);
                                        te(t), (tt.current = t);
                                      },
                                    }),
                                  ],
                                })
                              : "",
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tv, {
                                rows: 8,
                                wrap: "off",
                                placeholder: "运行日志...",
                                value: ev,
                              }),
                            }),
                            (0, V.jsx)(eb(), {
                              size: "middle",
                              onClick: () => {
                                eP("");
                              },
                              children: "清空日志",
                            }),
                            (0, V.jsx)(ej.Z, {
                              justify: "flex-start",
                              align: "center",
                              children: (0, V.jsx)(eb(), {
                                size: "middle",
                                onClick: handleRefPoolInfo,
                                children: "刷新",
                              }),
                            }),
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsx)(eb(), {
                                  size: "middle",
                                  onClick: handlechibilist,
                                  children: "持币地址扫描",
                                }),
                                (0, V.jsxs)("span", {
                                  children: [e2, " 个地址"],
                                }),
                                (0, V.jsx)(tr.default, {
                                  id: "notself",
                                  children: "不在帐号列表的地址",
                                }),
                              ],
                            }),
                            (0, V.jsxs)(ej.Z, {
                              gap: 10,
                              justify: "flex-start",
                              align: "center",
                              children: [
                                (0, V.jsxs)("span", {
                                  children: ["余额>", " "],
                                }),
                                (0, V.jsx)(e$.default, {
                                  type: "number",
                                  id: "useramount",
                                  placeholder: "Basic usage",
                                  defaultValue: 0,
                                  style: { width: "20%" },
                                }),
                              ],
                            }),
                            (0, V.jsx)("div", {
                              style: { marginBottom: 10, marginTop: 10 },
                              children: (0, V.jsx)(tv, {
                                rows: 8,
                                wrap: "off",
                                value: x,
                              }),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                ],
              }),
              i && (0, V.jsx)(components_Loading, {}),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: d("msgbox.fbtn") }),
                onClick: () => eX(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: eG,
                msgParam: th,
                handleCancel: () => {
                  eX(!1);
                },
              }),
            ],
          });
        };
      var am = a(48764).Buffer,
        ax = a(34155);
      let CreateAndBuyPumpView = (e) => {
        let {} = e,
          t = (0, Q.O)(),
          { connection: a } = (0, U.R)(),
          { t: l } = (0, G.$G)("common"),
          [n, s] = (0, z.useState)(!1),
          [o, r] = (0, z.useState)(!1),
          [i, c] = (0, z.useState)(1),
          d = (0, z.useRef)(i),
          u = "".concat(l("msg.wal")).concat(l("msg.adr")),
          [m, x] = (0, z.useState)(u),
          [g, p] = (0, z.useState)(0),
          [y, f] = (0, z.useState)(0),
          [h, b] = (0, z.useState)(0),
          [w, j] = (0, z.useState)(u),
          [k, S] = (0, z.useState)(0),
          [v, P] = (0, z.useState)(0),
          [N, T] = (0, z.useState)(0),
          [A, L] = (0, z.useState)(u),
          [B, _] = (0, z.useState)(0),
          [R, O] = (0, z.useState)(0),
          [Z, I] = (0, z.useState)(0),
          [E, F] = (0, z.useState)(u),
          [q, D] = (0, z.useState)(0),
          [W, X] = (0, z.useState)(0),
          [J, $] = (0, z.useState)(0),
          [ee, et] = (0, z.useState)(null),
          [ea, el] = (0, z.useState)(""),
          [es, eo] = (0, z.useState)([]),
          [er, ei] = (0, z.useState)([]),
          { TextArea: ec } = e$.default;
        function getRandomNumber(e, t) {
          let a =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          return parseFloat((Math.random() * (t - e) + e).toFixed(a));
        }
        let handleGetBalance = async () => {
            console.log(es.length), r(!0);
            try {
              for (let e = 0; e < es.length; e++) {
                let t = es[e],
                  l =
                    (await a.getBalance(t.wallet.publicKey)) /
                    Y.LAMPORTS_PER_SOL,
                  n = [...es];
                (n[e].balance = l), eo(n);
              }
            } finally {
              r(!1);
            }
          },
          ed = [
            {
              title: "".concat(l("msg.wal")),
              dataIndex: "publickey",
              render: (e) => (0, V.jsx)("a", { children: e }),
            },
            { title: "SOL".concat(l("msg.bal")), dataIndex: "balance" },
            {
              title: "".concat(l("msg.buy")).concat(l("msg.token")),
              dataIndex: "buyToken",
            },
            { title: "".concat(l("msg.buy"), "Sol"), dataIndex: "buySol" },
          ],
          handleSetAcc = async () => {
            let e = ea.split("\n").filter((e) => "" !== e.trim());
            if (
              (e
                .map((e) => (e.length <= 95 && e.length >= 85 ? e : null))
                .filter((e) => null !== e),
              e.length > 16)
            ) {
              notify({
                type: "error",
                message: "错误",
                description: "最大支持设置16个地址",
              });
              return;
            }
            r(!0);
            let t = [...new Set(e)];
            console.log(t), eo([]);
            try {
              eo((e) => {
                let a = [];
                for (let e = 0; e < t.length; e++) {
                  let l = Y.Keypair.fromSecretKey(e8().decode(t[e])),
                    n = {
                      key: e,
                      publickey: truncateString(
                        l.publicKey.toString(),
                        16,
                        8,
                        8
                      ),
                      balance: 0,
                      buySol: 0,
                      buyToken: 0,
                      wallet: Y.Keypair.fromSecretKey(
                        am.from(e8().decode(t[e]))
                      ),
                    };
                  a.push(n);
                }
                return [...e, ...a];
              }),
                notify({
                  type: "success",
                  message: "提示",
                  description: "设置成功",
                });
            } catch (e) {
              console.log(e),
                notify({
                  type: "error",
                  message: "设置钱包错误",
                  description: "检查私钥地址并刷新页面重试",
                });
            } finally {
              r(!1);
            }
          };
        0 === y
          ? l("msg.wal")
          : ""
              .concat(l("msg.wal"), " 1 - ")
              .concat(l("msg.buy"), " ")
              .concat(y),
          "".concat(l("msg.wal")).concat(l("msg.sec")),
          l("msg.pas"),
          l("msg.bal"),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          0 === v
            ? l("msg.wal")
            : ""
                .concat(l("msg.wal"), " 2 - ")
                .concat(l("msg.buy"), " ")
                .concat(v),
          "".concat(l("msg.wal")).concat(l("msg.sec")),
          l("msg.pas"),
          l("msg.bal"),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          0 === R
            ? l("msg.wal")
            : ""
                .concat(l("msg.wal"), " 3 - ")
                .concat(l("msg.buy"), " ")
                .concat(R),
          "".concat(l("msg.wal")).concat(l("msg.sec")),
          l("msg.pas"),
          l("msg.bal"),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          0 === W
            ? l("msg.wal")
            : ""
                .concat(l("msg.wal"), " 4 - ")
                .concat(l("msg.buy"), " ")
                .concat(W),
          "".concat(l("msg.wal")).concat(l("msg.sec")),
          l("msg.pas"),
          l("msg.bal"),
          "".concat(l("msg.buy")).concat(l("msg.amt")),
          "".concat(l("msg.buy")).concat(l("msg.amt"));
        let eu =
            "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 md:w-[600px]",
          em = "md:w-1/3 md:text-1xl text-right text-stone-200 mr-2",
          ex =
            "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 w-80",
          [eg, ep] = (0, z.useState)(null),
          [ey, ef] = (0, z.useState)(null),
          handleSaleAll = async () => {
            let e;
            if (!C) {
              notify({
                type: "error",
                message: "错误",
                description: "尚未创建代币",
              });
              return;
            }
            async function getSaleiTx(e, t) {
              let a = await Swap_Sale_pump(K, M, C, t, Math.floor(1e6 * e));
              if ("true" !== ax.env.NEXT_PUBLIC_LOCMODE) {
                let e = new Y.PublicKey(
                    "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                  ),
                  l = Y.SystemProgram.transfer({
                    fromPubkey: t.publicKey,
                    toPubkey: e,
                    lamports: 15e5,
                  });
                a.add(l);
              }
              return a;
            }
            1 === d.current
              ? (e = 5e-4)
              : 2 === d.current
              ? (e = 0.001)
              : 3 === d.current && (e = 0.01),
              (ao = 0),
              (ar = 0);
            let t = [],
              l = 0,
              n = !0;
            new Y.Transaction();
            let s = await a.getLatestBlockhash();
            for (let o = 0; o < es.length; o++) {
              let r = es[o];
              if (r.buySol > 0) {
                let o = await getSaleiTx(r.buyToken, r.wallet);
                if (n) {
                  n = !1;
                  let t = getRandomTipAccount();
                  o.add(
                    Y.SystemProgram.transfer({
                      fromPubkey: r.wallet.publicKey,
                      toPubkey: t,
                      lamports: e * Y.LAMPORTS_PER_SOL,
                    })
                  );
                }
                (o.feePayer = r.wallet.publicKey),
                  (o.recentBlockhash = s.blockhash),
                  o.sign(r.wallet);
                let i = e8().encode(o.serialize());
                if ((t.push(i), t.length >= 5)) {
                  let e = await sendBundle(t);
                  console.log("绑定包发送成功 id:", e),
                    (n = !0),
                    (t = []),
                    (s = await a.getLatestBlockhash());
                }
                l += r.buyToken;
              }
            }
            if (t.length > 0) {
              let e = await sendBundle(t);
              console.log(e), console.log("send");
            }
            notify({
              type: "success",
              message: "成功",
              description: "卖出成功,本次卖出数量: ".concat(
                l,
                " 发币钱包未卖!"
              ),
            });
          },
          handleCreate = async () => {
            let e;
            if (!t.publicKey) {
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包!",
              });
              return;
            }
            let l = document.getElementById("tokenname"),
              n = document.getElementById("tokenSymbol"),
              s = document.getElementById("userweb"),
              o = document.getElementById("tglink"),
              i = document.getElementById("xlink"),
              c = document.getElementById("dislink"),
              u = document.getElementById("des"),
              m = document.getElementById("walbuy");
            if ((null == l ? void 0 : l.value) == "") {
              notify({
                type: "error",
                message: "错误",
                description: "代币名称不能为空",
              });
              return;
            }
            if ((null == l ? void 0 : l.value.length) > 30) {
              notify({
                type: "error",
                message: "错误",
                description: "代币名称长度不能大于30",
              });
              return;
            }
            if ((null == n ? void 0 : n.value) == "") {
              notify({
                type: "error",
                message: "错误",
                description: "代币名称不能为空",
              });
              return;
            }
            if ((null == n ? void 0 : n.value.length) > 15) {
              notify({
                type: "error",
                message: "错误",
                description: "代币简称长度不能大于8",
              });
              return;
            }
            if (
              ((e =
                (null == m ? void 0 : m.value) === "" ||
                (null == m ? void 0 : m.value) === "0"
                  ? 0
                  : Number(null == m ? void 0 : m.value)),
              !eg)
            ) {
              notify({
                type: "error",
                message: "错误",
                description: "请选择logo文件",
              });
              return;
            }
            let x = {
              tokenName: null == l ? void 0 : l.value,
              symbol: null == n ? void 0 : n.value,
              web: null == s ? void 0 : s.value,
              tglink: null == o ? void 0 : o.value,
              xlink: null == i ? void 0 : i.value,
              dislink: null == c ? void 0 : c.value,
              description: null == u ? void 0 : u.value,
              image: "",
            };
            if (eg) {
              r(!0);
              try {
                let l,
                  n,
                  s,
                  o,
                  i,
                  c = {
                    name: x.tokenName,
                    symbol: x.symbol,
                    file: eg,
                    description: x.description,
                    twitter: x.xlink,
                    telegram: x.tglink,
                    website: x.web,
                  };
                try {
                  let e = await getmyTokenUri(
                    eg,
                    x.tokenName,
                    x.symbol,
                    x.description,
                    x.web,
                    x.tglink,
                    x.xlink,
                    []
                  );
                  if ("error" != e) (l = e), console.log(e);
                  else {
                    notify({
                      type: "error",
                      message: "上传元数据失败,请尝试勾选自行上传",
                    });
                    return;
                  }
                } catch (e) {
                  r(!1),
                    notify({
                      type: "error",
                      message: "上传元数据失败,请尝试勾选自行上传#",
                    });
                  return;
                }
                console.log("new");
                let u = Y.Keypair.generate(),
                  m = new t6.Y7(a, t, { commitment: "finalized" });
                (ao = 0),
                  (ar = 0),
                  console.log("mint: " + u.publicKey.toBase58());
                let g = await getCreateInstructions(
                    t.publicKey,
                    c.name,
                    c.symbol,
                    l,
                    u,
                    m
                  ),
                  p = new Y.Transaction().add(g),
                  y = Number("0.1"),
                  f = new Y.PublicKey(
                    "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                  ),
                  h = Y.SystemProgram.transfer({
                    fromPubkey: t.publicKey,
                    toPubkey: f,
                    lamports: 1e9 * y,
                  });
                p.add(h);
                let b = await getBondingCurvePDA(u.publicKey),
                  w = await (0, en.Am)(u.publicKey, b, !0);
                if (
                  ((K = b),
                  (M = w),
                  (C = u.publicKey),
                  (n = BigInt(0)),
                  (s = BigInt(0)),
                  e > 0)
                ) {
                  let l = BigInt(e * Y.LAMPORTS_PER_SOL),
                    o = await getInitialBuyPrice(a, l),
                    r = calculateWithSlippageBuy(l, BigInt(500));
                  (n += l),
                    (s += o),
                    console.log("buyAmount: ", o),
                    console.log("buyAmountWithSlippage: ", r);
                  let i = await getBuyInstructions(
                    t.publicKey,
                    u.publicKey,
                    o,
                    r,
                    m
                  );
                  p.add(i);
                }
                let j = await a.getLatestBlockhash(),
                  k = getRandomTipAccount();
                1 === d.current
                  ? (o = 5e-4)
                  : 2 === d.current
                  ? (o = 0.001)
                  : 3 === d.current && (o = 0.01),
                  p.add(
                    Y.SystemProgram.transfer({
                      fromPubkey: t.publicKey,
                      toPubkey: k,
                      lamports: o * Y.LAMPORTS_PER_SOL,
                    })
                  ),
                  (p.feePayer = t.publicKey),
                  (p.recentBlockhash = j.blockhash),
                  p.partialSign(u);
                let S = await t.signTransaction(p),
                  v = [],
                  P = e8().encode(S.serialize());
                v.push(P);
                let N = 0,
                  T = 0,
                  A = [],
                  L = new Y.Transaction();
                for (;;) {
                  if ((i = es[N]).buySol > 0) {
                    let e = Math.floor(i.buySol * Y.LAMPORTS_PER_SOL),
                      t = BigInt(e),
                      l = calculateWithSlippageBuy(t, BigInt(500)),
                      o = (function (e, t, a) {
                        let l = BigInt(3e10) + t,
                          n = BigInt(1073e12) - e,
                          s = BigInt(793099998307558),
                          o = (l * n) / (l + a) + BigInt(1),
                          r = n - o;
                        return r < s ? r : s;
                      })(s, n, t);
                    console.log("buyTokenAmtV: ", o),
                      console.log("buySOLAmtV: ", e),
                      (n += t),
                      (s += o);
                    let r = [...es];
                    (r[N].buyToken = Number(o / BigInt(1e6))), eo(r);
                    let c = new Y.Connection(
                        "https://mainnet.helius-rpc.com/?api-key=1f04ab69-b856-453e-a12f-b59e6ad4dd35"
                      ),
                      d = await Swap_Buy_pump(
                        c,
                        b,
                        w,
                        u.publicKey,
                        i.wallet,
                        Number(o),
                        Number(l),
                        !0
                      );
                    if ((L.add(d), A.push(i.wallet), (T += 1) >= 4)) {
                      T = 0;
                      let e = await a.getLatestBlockhash();
                      (L.feePayer = i.wallet.publicKey),
                        (L.recentBlockhash = e.blockhash);
                      for (let e = 0; e < A.length; e++) {
                        let t = A[e];
                        L.partialSign(t);
                      }
                      A = [];
                      let t = e8().encode(L.serialize());
                      v.push(t),
                        console.log("bundle.push"),
                        (L = new Y.Transaction());
                    }
                  }
                  if ((N += 1) >= es.length) break;
                }
                if (T > 0) {
                  T = 0;
                  let e = await a.getLatestBlockhash();
                  (L.feePayer = i.wallet.publicKey),
                    (L.recentBlockhash = e.blockhash);
                  for (let e = 0; e < A.length; e++) {
                    let t = A[e];
                    L.partialSign(t);
                  }
                  let t = e8().encode(L.serialize());
                  v.push(t), console.log("bundle.push");
                }
                let B = await sendBundle(v);
                console.log(B),
                  et("https://pump.fun/".concat(u.publicKey.toBase58()));
              } finally {
                r(!1);
              }
            } else {
              notify({ type: "error", message: "未选择logo文件" });
              return;
            }
          };
        return (0, V.jsx)("div", {
          className: "md:hero mx-auto p-1 ",
          children: (0, V.jsx)("div", {
            children: (0, V.jsxs)("div", {
              className: "md:hero-content flex flex-col",
              children: [
                (0, V.jsxs)("div", {
                  className: "mt-1",
                  children: [
                    (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4 ",
                      children: l("create.pumpbuy"),
                    }),
                    (0, V.jsx)("h1", {
                      className:
                        "text-center text-1xl md:p-0 md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500",
                      children: l("create.pumpbuy1"),
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className: eu,
                  children: [
                    (0, V.jsx)("div", {
                      className: em,
                      style: { color: "black" },
                      children: l("create.tokenname"),
                    }),
                    (0, V.jsx)("div", {
                      className: "md:w-2/3 m-auto",
                      children: (0, V.jsx)("input", {
                        id: "tokenname",
                        className: ex,
                        placeholder: l("create.tokennamets"),
                        style: { background: "#fff", color: "black" },
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className: eu,
                  children: [
                    (0, V.jsx)("div", {
                      className: em,
                      style: { color: "black" },
                      children: l("create.symbol"),
                    }),
                    (0, V.jsx)("div", {
                      className: "md:w-2/3 m-auto",
                      children: (0, V.jsx)("input", {
                        id: "tokenSymbol",
                        className: ex,
                        placeholder: l("create.symbolts"),
                        style: { background: "#fff", color: "black" },
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className:
                    "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 md:w-[600px]",
                  children: [
                    (0, V.jsx)("div", {
                      className: "".concat(em, " pr-1"),
                      style: { color: "black" },
                      children: l("create.logo"),
                    }),
                    (0, V.jsxs)("div", {
                      className: "md:w-2/3 m-auto",
                      children: [
                        (0, V.jsxs)("div", {
                          className: "m-auto w-[350px] px-2 text-center",
                          children: [
                            (0, V.jsx)("svg", {
                              className: "mx-auto h-12 w-12 text-gray-400",
                              stroke: "currentColor",
                              fill: "none",
                              viewBox: "0 0 48 48",
                              "aria-hidden": "true",
                              children: (0, V.jsx)("path", {
                                d: "M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02",
                              }),
                            }),
                            (0, V.jsxs)("label", {
                              className:
                                "cursor-pointer font-medium text-purple-500 hover:text-indigo-500",
                              children: [
                                (0, V.jsx)("span", {
                                  children: l("create.logosel"),
                                }),
                                (0, V.jsx)("input", {
                                  type: "file",
                                  id: "fileInput",
                                  onChange: (e) => {
                                    let t = e.target.files[0];
                                    ep(t);
                                    let a = new FileReader();
                                    (a.onload = () => {
                                      ef(a.result);
                                    }),
                                      a.readAsText(t);
                                  },
                                  className: "sr-only",
                                  required: !0,
                                }),
                                (0, V.jsxs)("p", {
                                  className:
                                    "text-1x1 md:text-1xl text-center text-slate-100 my-2",
                                  id: "filename",
                                  children: [
                                    eg &&
                                      (0, V.jsxs)("p", {
                                        style: { color: "black" },
                                        children: [
                                          l("create.logoselts"),
                                          eg.name,
                                        ],
                                      }),
                                    " ",
                                  ],
                                }),
                              ],
                            }),
                          ],
                        }),
                        (0, V.jsx)("p", {
                          className: "text-center text-slate-300 my-2 text-sm",
                          children: l("create.logojy"),
                        }),
                      ],
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className: eu,
                  children: [
                    (0, V.jsx)("div", {
                      className: em,
                      style: { color: "black" },
                      children: l("create.des"),
                    }),
                    (0, V.jsx)("div", {
                      className: "md:w-2/3 m-auto",
                      children: (0, V.jsx)("textarea", {
                        id: "des",
                        className:
                          "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] p-2 px-2 my-2 w-full h-[150px]",
                        placeholder: l("create.dests"),
                        style: { background: "#fff", color: "black" },
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className: eu,
                  children: [
                    (0, V.jsx)("div", {
                      className: em,
                      style: { color: "black" },
                      children: l("create.openxt"),
                    }),
                    (0, V.jsx)("div", {
                      className: "md:w-2/3 m-auto",
                      children: (0, V.jsx)("input", {
                        type: "checkbox",
                        className: "toggle",
                        defaultChecked: !1,
                        onChange: () => {
                          s(!n);
                        },
                        style: { background: "#fff", color: "black" },
                      }),
                    }),
                  ],
                }),
                n
                  ? (0, V.jsxs)("div", {
                      children: [
                        (0, V.jsxs)("div", {
                          className: eu,
                          children: [
                            (0, V.jsx)("div", {
                              className: em,
                              style: { color: "black" },
                              children: l("create.web"),
                            }),
                            (0, V.jsx)("div", {
                              className: "md:w-2/3 m-auto",
                              children: (0, V.jsx)("input", {
                                id: "userweb",
                                className: ex + " text-sm",
                                placeholder: l("create.webts"),
                                style: { background: "#fff", color: "black" },
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          className: eu,
                          children: [
                            (0, V.jsx)("div", {
                              className: em,
                              style: { color: "black" },
                              children: l("create.tg"),
                            }),
                            (0, V.jsx)("div", {
                              className: "md:w-2/3 m-auto",
                              children: (0, V.jsx)("input", {
                                id: "tglink",
                                className: ex + " text-sm",
                                placeholder: l("create.tgts"),
                                style: { background: "#fff", color: "black" },
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          className: eu,
                          children: [
                            (0, V.jsx)("div", {
                              className: em,
                              style: { color: "black" },
                              children: l("create.x"),
                            }),
                            (0, V.jsx)("div", {
                              className: "md:w-2/3 m-auto",
                              children: (0, V.jsx)("input", {
                                id: "xlink",
                                className: ex + " text-sm",
                                placeholder: l("create.xts"),
                                style: { background: "#fff", color: "black" },
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)("div", {
                          className: eu,
                          children: [
                            (0, V.jsx)("div", {
                              className: em,
                              style: { color: "black" },
                              children: l("create.dis"),
                            }),
                            (0, V.jsx)("div", {
                              className: "md:w-2/3 m-auto",
                              children: (0, V.jsx)("input", {
                                id: "dislink",
                                className: ex + " text-sm",
                                placeholder: l("create.dists"),
                                style: { background: "#fff", color: "black" },
                              }),
                            }),
                          ],
                        }),
                      ],
                    })
                  : "",
                (0, V.jsxs)("div", {
                  className: eu,
                  children: [
                    (0, V.jsx)("div", {
                      className: em,
                      style: { color: "black" },
                      children: l("create.walbuy"),
                    }),
                    (0, V.jsx)("div", {
                      className: "md:w-2/3 m-auto",
                      children: (0, V.jsx)("input", {
                        id: "walbuy",
                        className: ex,
                        placeholder: "SOL",
                        style: { background: "#fff", color: "black" },
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)(to.Z, {
                  style: { width: 600 },
                  title: "1.".concat(l("msg.wal")).concat(l("msg.set")),
                  children: [
                    (0, V.jsx)("div", {
                      children: "同时买入的钱包,最大支持16个钱包",
                    }),
                    (0, V.jsx)("div", {
                      style: { marginBottom: 10, marginTop: 10 },
                      children: (0, V.jsx)(ec, {
                        rows: 8,
                        wrap: "off",
                        value: ea,
                        onChange: (e) => {
                          let t = e.target.value;
                          el(t);
                        },
                      }),
                    }),
                    (0, V.jsx)(ej.Z, {
                      gap: 30,
                      justify: "flex-start",
                      align: "center",
                      children: (0, V.jsxs)(eb(), {
                        type: "primary",
                        size: "large",
                        onClick: handleSetAcc,
                        children: [l("msg.set"), l("msg.wal")],
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)(to.Z, {
                  style: { width: 600 },
                  title: "".concat(l("msg.buy")).concat(l("msg.info")),
                  children: [
                    (0, V.jsxs)(ej.Z, {
                      gap: 5,
                      justify: "flex-start",
                      align: "center",
                      children: [
                        (0, V.jsx)(eS.default, {
                          title: "随机SOL最小值",
                          children: (0, V.jsx)(e$.default, {
                            id: "rantoken1",
                            style: { width: "15%" },
                            placeholder: "".concat(l("msg.buy"), "SOL"),
                            defaultValue: 0.6,
                          }),
                        }),
                        (0, V.jsx)(eS.default, {
                          title: "随机SOL最大值",
                          children: (0, V.jsx)(e$.default, {
                            id: "rantoken2",
                            style: { width: "15%" },
                            placeholder: "".concat(l("msg.buy"), "SOL"),
                            defaultValue: 1,
                          }),
                        }),
                        (0, V.jsx)(eS.default, {
                          title: "随机SOL的小数位",
                          children: (0, V.jsx)(e$.default, {
                            id: "ransol",
                            style: { width: "8%" },
                            placeholder: "".concat(l("msg.buy"), "SOL"),
                            defaultValue: 2,
                          }),
                        }),
                        (0, V.jsx)(eb(), {
                          onClick: () => {
                            let e = document.getElementById("ransol"),
                              t = document.getElementById("rantoken1"),
                              a = document.getElementById("rantoken2"),
                              l = Number(null == e ? void 0 : e.value),
                              n = Number(null == t ? void 0 : t.value),
                              s = Number(null == a ? void 0 : a.value);
                            if (es.length > 0)
                              for (let e = 0; e < es.length; e++) {
                                let t = getRandomNumber(n, s, l),
                                  a = [...es];
                                (a[e].buySol = Number(t)), eo(a);
                              }
                          },
                          children: "一键填写",
                        }),
                      ],
                    }),
                    (0, V.jsxs)(ej.Z, {
                      gap: 5,
                      style: { marginTop: 10 },
                      justify: "flex-start",
                      align: "center",
                      children: [
                        (0, V.jsx)(eS.default, {
                          title: "修改选中钱包的买入SOL",
                          children: (0, V.jsx)(e$.default, {
                            id: "buysol",
                            style: { width: "20%" },
                            placeholder: "".concat(l("msg.buy"), "SOL"),
                          }),
                        }),
                        (0, V.jsx)(eb(), {
                          onClick: () => {
                            let e = document.getElementById("buysol"),
                              t = null == e ? void 0 : e.value;
                            if ("" === t) {
                              notify({
                                type: "error",
                                message: "错误",
                                description: "请输入修改的买入SOL",
                              });
                              return;
                            }
                            if (er.length <= 0) {
                              notify({
                                type: "error",
                                message: "错误",
                                description: "请选中要修改的钱包",
                              });
                              return;
                            }
                            if (es.length > 0)
                              for (let e = 0; e < es.length; e++) {
                                let a = es[e];
                                if (a.checked) {
                                  let a = [...es];
                                  (a[e].buySol = Number(t)), eo(a);
                                }
                              }
                          },
                          children: "修改",
                        }),
                        (0, V.jsx)(eb(), {
                          style: { marginLeft: 10 },
                          onClick: handleGetBalance,
                          children: "获取余额",
                        }),
                        (0, V.jsx)(eb(), {
                          onClick: () => {
                            if (es.length > 0)
                              for (let e = 0; e < es.length; e++) {
                                let t = es[e];
                                if (t.balance > 0) {
                                  let a = (t.balance - 0.1) * 0.8,
                                    l = t.balance - 0.1,
                                    n = getRandomNumber(a, l, 2),
                                    s = [...es];
                                  (s[e].buySol = Number(n)), eo(s);
                                }
                              }
                          },
                          children: "根据余额自动填写",
                        }),
                      ],
                    }),
                    (0, V.jsx)("div", {
                      style: { marginBottom: 10, marginTop: 10 },
                      children: (0, V.jsx)(ej.Z, {
                        gap: 30,
                        justify: "flex-start",
                        align: "center",
                        children: (0, V.jsx)(tx.Z, {
                          rowSelection: {
                            type: "checkbox",
                            selectedRowKeys: er,
                            onChange: (e, t) => {
                              ei(e),
                                console.log(
                                  "selectedRowKeys: ".concat(e),
                                  "selectedRows: ",
                                  t
                                );
                              for (let e = 0; e < es.length; e++)
                                es[e].checked = !1;
                              for (let e = 0; e < t.length; e++)
                                t[e].checked = !0;
                            },
                          },
                          style: { width: "100%" },
                          pagination: !1,
                          columns: ed,
                          dataSource: es,
                        }),
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className:
                    "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                  children: [
                    (0, V.jsxs)("div", {
                      className:
                        "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                      style: { color: "black" },
                      children: ["Jito MEV", l("msg.tip"), ":"],
                    }),
                    (0, V.jsx)("div", {
                      className:
                        "max-w-md mx-auto  my-2 w-full flex items-center md:text-sm space-x-3",
                      children: (0, V.jsxs)(e0.default.Group, {
                        value: i,
                        onChange: (e) => {
                          let t = e.target.value;
                          c(t), (d.current = t);
                        },
                        style: { marginBottom: 16 },
                        children: [
                          (0, V.jsxs)(e0.default.Button, {
                            value: 1,
                            children: [l("msg.def"), " 0.0005SOL"],
                          }),
                          (0, V.jsxs)(e0.default.Button, {
                            value: 2,
                            children: [l("msg.def1"), " 0.001SOL"],
                          }),
                          (0, V.jsxs)(e0.default.Button, {
                            value: 3,
                            children: [l("msg.def2"), " 0.01SOL"],
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, V.jsxs)("div", {
                  className: "mt-4 flex  items-center  space-x-1 text-left",
                  style: { color: "black" },
                  children: [
                    l("create.param.addr"),
                    " ",
                    ee
                      ? (0, V.jsx)("div", {
                          children: (0, V.jsx)(H(), {
                            href: ee,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            passHref: !0,
                            className: "text-secondary hover:text-white",
                            children: ee,
                          }),
                        })
                      : l("create.param.addrnot"),
                    " ",
                  ],
                }),
                (0, V.jsx)("button", {
                  className:
                    "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                  onClick: handleCreate,
                  style: {
                    background: "#ff9815",
                    border: "none",
                    borderRadius: "5px 5px 5px 5px",
                    boxShadow: "0 4px 0 0 #db7a00",
                    padding: "10px 50px",
                    color: "#fff",
                  },
                  children: (0, V.jsxs)("span", {
                    children: [l("create.param.enter"), " "],
                  }),
                }),
                (0, V.jsx)("button", {
                  className:
                    "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                  onClick: handleSaleAll,
                  style: {
                    background: "#ff9815",
                    border: "none",
                    borderRadius: "5px 5px 5px 5px",
                    boxShadow: "0 4px 0 0 #db7a00",
                    padding: "10px 50px",
                    color: "#fff",
                  },
                  children: (0, V.jsx)("span", { children: "一键卖出 " }),
                }),
                o && (0, V.jsx)(components_Loading, {}),
              ],
            }),
          }),
        });
      };
      var ag = a(48764).Buffer;
      let { Text: ap, Link: ay } = ek.default,
        { TextArea: af } = e$.default,
        ah = !1,
        ab = !1,
        aw = [],
        aj = new Y.PublicKey("7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5"),
        ak = "So11111111111111111111111111111111111111112",
        aS = (0, tk.struct)([
          (0, tk.u8)("logType"),
          (0, tZ.AW)("openTime"),
          (0, tk.u8)("quoteDecimals"),
          (0, tk.u8)("baseDecimals"),
          (0, tZ.AW)("quoteLotSize"),
          (0, tZ.AW)("baseLotSize"),
          (0, tZ.AW)("quoteAmount"),
          (0, tZ.AW)("baseAmount"),
          (0, tZ.ZL)("market"),
        ]),
        av = !0,
        aP = !0,
        aN = !0,
        TradeBotPumpView = (e) => {
          let {} = e;
          (0, Q.O)();
          let { connection: t } = (0, U.R)(),
            {
              publicKey: a,
              sendTransaction: l,
              signMessage: n,
              signTransaction: s,
              signAllTransactions: o,
            } = (0, Q.O)(),
            { t: r } = (0, G.$G)("common"),
            { Text: i } = ek.default,
            [c, d] = z.useState(!1),
            [u, m] = (0, z.useState)(-1),
            [x, g] = (0, z.useState)(-1),
            [p, y] = (0, z.useState)(
              "5LNruZKwDvQex4aJA8JgYLw5ZYFGpodXBxZErkEbp6Co"
            ),
            [f, h] = (0, z.useState)(""),
            [b, w] = (0, z.useState)(!1),
            [j, k] = (0, z.useState)(!1),
            [S, v] = (0, z.useState)(!0),
            [P, N] = (0, z.useState)(100),
            [T, A] = (0, z.useState)(12.5),
            [L, B] = (0, z.useState)(""),
            [K, M] = (0, z.useState)("0.00001"),
            [C, W] = (0, z.useState)(2.5),
            [H, X] = (0, z.useState)("Demo"),
            [J, $] = (0, z.useState)(
              "https://api.dicebear.com/7.x/miniavs/svg?seed=0"
            ),
            [ee, et] = (0, z.useState)("https://www.suntool.cc"),
            [ea, el] = (0, z.useState)("https://twitter.com/SunToolcc"),
            [es, eo] = (0, z.useState)("https://t.me/wousdt"),
            [er, ei] = (0, z.useState)(!0),
            [ec, eu] = (0, z.useState)(""),
            [em, ex] = (0, z.useState)(200),
            [eg, ep] = (0, z.useState)(!1),
            [ey, ef] = (0, z.useState)(176.79),
            [eh, ew] = (0, z.useState)(!1),
            [ev, eN] = (0, z.useState)(""),
            [eT, eA] = (0, z.useState)(0),
            [eL, eK] = (0, z.useState)(0),
            [eM, eC] = (0, z.useState)(!1),
            [e_, eR] = tK.ZP.useMessage(),
            [eO, eZ] = (0, z.useState)(0),
            [eI, eE] = (0, z.useState)(!0),
            [eF, eq] = (0, z.useState)(!0),
            [eD, eV] = (0, z.useState)(!0),
            [ez, eW] = (0, z.useState)(""),
            [eH, eQ] = (0, z.useState)(!0),
            [eU, eG] = (0, z.useState)(1),
            [eY, eJ] = (0, z.useState)(3e-5),
            e2 = (0, z.useRef)(eY),
            [e5, e6] = (0, z.useState)(!1),
            [e3, e4] = (0, z.useState)(0);
          (0, z.useEffect)(() => {
            (av = eF), (aP = eI), (aN = eD), (e2.current = eY);
          }, [eF, eH, eI, eD, eY]);
          let onChangeBuyGas = (e) => {
              let t = e.target.value;
              M(t);
            },
            handleChangeJito = (e) => {
              let t = Number(e.target.value);
              eJ(t), (e2.current = t);
            },
            addSoftLog = (e) => {
              let t = new Date().toLocaleTimeString(),
                a = "[".concat(t, "] -> ");
              eW((t) => t + a + e + "\n");
            };
          function getTickCount() {
            return new Date().getTime();
          }
          function compareByTokenAmount(e, t) {
            let a = parseFloat(e.account.data.parsed.info.tokenAmount.uiAmount),
              l = parseFloat(t.account.data.parsed.info.tokenAmount.uiAmount);
            return a > l ? -1 : a < l ? 1 : 0;
          }
          let handleTokenChange1 = async (e) => {
              let t = e.target.value;
              if ("" !== t) {
                if (!_) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "请连设置钱包",
                  });
                  return;
                }
                e6(!1), g(0);
                try {
                  q = null;
                  let e = new Y.PublicKey(t);
                  e6(!0), g(-1), y(t);
                  let a = await getBondingCurvePDA(e),
                    l = await (0, en.Am)(e, a, !0);
                  N(100), v(!0), (q = e), (E = a), (F = l);
                  let n = await getTokenMetadataProc(R, e);
                  console.log("Meta:", n);
                  let s = n.data.symbol,
                    o = n.data.uri,
                    r = o.replace(/\u0000/g, ""),
                    i = await getImageJson(r);
                  X(s.replace(/\u0000/g, "")), i.image ? $(i.image) : $(r);
                } catch (e) {
                  console.log(e), msg_error("代币地址错误"), g(-1);
                }
              } else e6(!1), g(-1);
            },
            handleTokenChange = async (e) => {
              let a = e.target.value;
              if ("" !== a) {
                let e = document.getElementById("checktop"),
                  l = null == e ? void 0 : e.checked;
                R || (R = t), (0, ed.lm)(t), _ && (0, ed.kH)(_), e6(!1), m(0);
                let n = 0;
                try {
                  q = null;
                  let e = new Y.PublicKey(a);
                  y(a);
                  let t = await (0, en.ih)(R, e);
                  console.log("Mint:", t),
                    t.freezeAuthority ? w(!0) : (w(!1), (n += 1)),
                    t.mintAuthority ? k(!0) : (k(!1), (n += 1));
                  let s = await getTokenMetadataProc(R, e);
                  console.log("Meta:", s);
                  let o = s.data.symbol,
                    r = s.data.uri,
                    i = r.replace(/\u0000/g, "");
                  console.log(i);
                  let c = await getImageJson(i);
                  if (
                    (console.log(c),
                    X(o.replace(/\u0000/g, "")),
                    "object" == typeof c && null !== c && c.image)
                  ) {
                    console.log(c.image), $(c.image);
                    let e = c.extensions;
                    e
                      ? (e.website ? et(e.website) : et(""),
                        e.twitter ? el(e.twitter) : el(""),
                        e.telegram ? eo(e.telegram) : eo(""))
                      : (et(""), el(""), eo(""));
                  } else $(i), et(""), el(""), eo("");
                  let d = await getBondingCurvePDA(e),
                    u = await (0, en.Am)(e, d, !0);
                  if ((N(100), (n += 1), v(!0), (q = e), (E = d), (F = u), _)) {
                    let t = await (0, en.Am)(e, _.publicKey);
                    (D = t), e6(!0);
                  }
                  let x = 12.5;
                  if (l) {
                    let a;
                    let l = await getAllAccByMint(R, e);
                    console.log("持币人数: ", l.length),
                      e4(l.length),
                      l.sort(compareByTokenAmount),
                      (a = d.toString());
                    let n = [],
                      s = 0,
                      o = 0,
                      r = new (eX())(t.supply).div(
                        new (eX())(Math.pow(10, t.decimals))
                      );
                    B("");
                    for (let e = 0; e < l.length; e++) {
                      let t = l[e].account.data.parsed.info;
                      if (t.owner === a)
                        n.push(
                          truncateString(t.owner, 16, 8, 8) +
                            "(Curve)/" +
                            t.tokenAmount.uiAmount
                        );
                      else if (
                        (n.push(t.owner + "/" + t.tokenAmount.uiAmount),
                        (o += Number(t.tokenAmount.uiAmount)),
                        (s += 1) >= 10)
                      )
                        break;
                    }
                    console.log("top10Count", o), console.log("TokenSupply", r);
                    let i = ((o / r) * 100).toFixed(2);
                    (x = parseFloat(i)), A(x);
                    let c = n.join("\n");
                    B(c);
                  }
                  console.log(x),
                    x <= 20
                      ? (n += 2)
                      : x <= 30
                      ? (n += 1.5)
                      : x <= 50
                      ? (n += 1)
                      : (n += 0.5),
                    console.log(n),
                    W(n),
                    _ &&
                      setTimeout(async () => {
                        await handleRefTokenAmount();
                      }, 1e3),
                    m(-1);
                } catch (e) {
                  console.log(e), h("输入的代币地址错误"), m(1);
                }
              } else m(-1), e6(!1);
            },
            getUpdatedBalance = async (e, t) => {
              console.log("getUpdatedBalance listening..."),
                R.onAccountChange(
                  e,
                  (e, t) => {
                    console.log("info:", e),
                      console.log("info.data length:", e.data.length),
                      console.log("context:", t);
                    let a = e.lamports / Y.LAMPORTS_PER_SOL;
                    if (
                      (eA(a),
                      0 === eO &&
                        setTimeout(async () => {
                          await handleRefTokenAmount();
                        }, 1e3),
                      e.data.length >= 72)
                    )
                      try {
                        let a = new tk.NearUInt64().decode(
                            new Uint8Array(e.data.subarray(64, 72))
                          ),
                          l = t.slot;
                        console.log("Decoded balance:", a),
                          console.log("Slot:", l);
                      } catch (e) {
                        console.error("Error decoding balance:", e);
                      }
                    else
                      console.warn(
                        "Data length is insufficient:",
                        e.data.length
                      );
                  },
                  { dataSlice: { offset: 64, length: 8 } }
                );
            },
            handleSetWallet = async () => {
              let e = document.getElementById("userwallet"),
                a = null == e ? void 0 : e.value;
              try {
                let e;
                (_ = Y.Keypair.fromSecretKey(e8().decode(a))), (0, ed.kH)(_);
                let l = await getSOLPrice();
                console.log(l),
                  ef(l),
                  R || ((R = t), (0, ed.lm)(R)),
                  (e =
                    (await R.getBalance(_.publicKey, "confirmed")) /
                    Y.LAMPORTS_PER_SOL),
                  eA(e),
                  getUpdatedBalance(_.publicKey, "base"),
                  eN(_.publicKey.toString()),
                  console.log("钱包设置完成"),
                  ew(!0);
              } catch (e) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包设置错误!",
                });
                return;
              }
            },
            msg_success = (e) => {
              e_.open({ type: "success", content: e });
            },
            msg_error = (e) => {
              e_.open({ type: "error", content: e });
            },
            handleBuy = async () => {
              if (!eh) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!q) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              let e = document.getElementById("buyamt"),
                t = null == e ? void 0 : e.value;
              if ("" !== t)
                try {
                  let e = Number(t);
                  buyFunction(e, R, _), msg_success("交易已提交");
                } catch (e) {
                  console.log(e), msg_error("交易失败");
                }
            },
            handleBuyFromAmt = async (e) => {
              if (!eh) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!q) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              try {
                e < eT - 0.002
                  ? (buyFunction(e, R, _), msg_success("交易已提交"))
                  : msg_error("SOL余额不足");
              } catch (e) {
                console.log(e), msg_error("交易失败");
              }
            },
            SaleTokenByPer = async (e) => {
              if (!eh) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!q) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              if (0 === eL) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "当前代币没有余额",
                });
                return;
              }
              try {
                let t = (eL / 100) * e;
                console.log("saleamtV", t),
                  await saleFunction(D, t, R, _),
                  msg_success("卖出交易已提交");
              } catch (e) {
                msg_error("卖出交易失败,请尝试减少数量");
              }
            };
          async function buyFunction(e, t, a) {
            addSoftLog(
              "买入钱包: "
                .concat(
                  truncateString(a.publicKey.toString(), 16, 8, 8),
                  " 数量:"
                )
                .concat(e)
            );
            let l = await getBuyPrice(q, t, BigInt(e * Y.LAMPORTS_PER_SOL));
            calculateWithSlippageBuy(
              BigInt(e * Y.LAMPORTS_PER_SOL),
              BigInt(500)
            ),
              console.log(l);
          }
          async function saleFunction(e, t, a, l) {
            (tT = parseFloat(K)),
              addSoftLog(
                "卖出钱包: "
                  .concat(
                    truncateString(l.publicKey.toString(), 16, 8, 8),
                    " 数量:"
                  )
                  .concat(t)
              );
            let n = Math.floor(1e6 * t),
              s = await Swap_Sale_pump(E, F, q, l, n),
              o = new Y.PublicKey(
                "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
              ),
              r = Y.SystemProgram.transfer({
                fromPubkey: l.publicKey,
                toPubkey: o,
                lamports: 15e5,
              });
            if ((s.add(r), eH)) {
              let e = getRandomTipAccount(),
                t = Number(e2.current);
              s.add(
                Y.SystemProgram.transfer({
                  fromPubkey: l.publicKey,
                  toPubkey: e,
                  lamports: t * Y.LAMPORTS_PER_SOL,
                })
              );
              let n = await a.getLatestBlockhash();
              (s.feePayer = l.publicKey),
                (s.recentBlockhash = n.blockhash),
                s.sign(l);
              let o = e8().encode(s.serialize()),
                r = [];
              r.push(o);
              let i = await sendBundle(r);
              return console.log("swapped in tx id:", i), i;
            }
            {
              let e = await a.sendTransaction(s, [l], { skipPreflight: !0 });
              return console.log("swapped in tx id:", e), e;
            }
          }
          let handleSale = async () => {
              if (!eh) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "钱包未设置!",
                });
                return;
              }
              if (!q) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "请先填写代币",
                });
                return;
              }
              let e = document.getElementById("saleamt"),
                t = null == e ? void 0 : e.value;
              if ("" !== t)
                try {
                  let e = Number(t);
                  await saleFunction(D, e, R, _),
                    msg_success("卖出交易已提交"),
                    msg_success("卖出交易已提交");
                } catch (e) {
                  msg_error("卖出交易失败");
                }
            },
            handleRefTokenAmount = async () => {
              if (q) {
                eC(!0), eK(0);
                try {
                  let e = await getTokenAccount(R, _.publicKey);
                  for (let t = 0; t < e.length; t++) {
                    let a = e[t].account.data.parsed.info,
                      l = a.tokenAmount.uiAmount;
                    a.mint === q.toString() && (eK(Number(l)), eC(!1));
                  }
                } catch (e) {
                  console.log("getTokenAccount Error~!", e), eC(!1);
                } finally {
                  eC(!1);
                }
              }
            };
          function getKeysMintStr(e) {
            return e.quoteMint.toString() === ak
              ? e.baseMint.toString()
              : e.quoteMint.toString();
          }
          let initLogs = async () => {
            console.log("listening for new raydium pools..."),
              R.onLogs(aj, async (e) => {
                for (let a of e.logs)
                  if (a.includes("ray_log") && ah) {
                    var t;
                    let e =
                      null === (t = a.split(" ").pop()) || void 0 === t
                        ? void 0
                        : t.replace("'", "");
                    if (e) {
                      let {
                          market: t,
                          baseDecimals: a,
                          quoteDecimals: l,
                          openTime: n,
                        } = aS.decode(ag.from(e, "base64")),
                        s = Number(n.toString()),
                        o = new Date().getTime() / 1e3,
                        r = await getKeys(t, a, l);
                      if (r.quoteMint.toString() === ak) {
                        let e = r.baseMint.toBase58();
                        addSoftLog("检测到新代币: ".concat(e));
                        try {
                          if (aP) {
                            let t = await (0, en.ih)(R, r.baseMint);
                            if ((console.log("Mint:", t), t.freezeAuthority)) {
                              addSoftLog(
                                "代币: ".concat(
                                  truncateString(e, 8, 4, 4),
                                  "未放弃冻结权限  跳过"
                                )
                              );
                              return;
                            }
                            {
                              if (s > o) {
                                console.log(s), console.log(o);
                                let e = {
                                  ...r,
                                  Tick: 0,
                                  SaleCount: 0,
                                  openTime: s,
                                  isBuy: !1,
                                };
                                aw.push(e),
                                  addSoftLog(
                                    "尚未开盘 ".concat(getKeysMintStr(r), " ")
                                  );
                                return;
                              }
                              let t = await buyFunction(r, O, 0),
                                a = {
                                  ...r,
                                  Tick: getTickCount(),
                                  SaleCount: 0,
                                  openTime: s,
                                  isBuy: !0,
                                };
                              aw.push(a),
                                addSoftLog(
                                  "买入: "
                                    .concat(truncateString(e, 8, 4, 4), " , ")
                                    .concat(O, " SOL 成功 哈希: ")
                                    .concat(t)
                                );
                            }
                          } else {
                            if (s > o) {
                              console.log(s), console.log(o);
                              let e = {
                                ...r,
                                Tick: 0,
                                SaleCount: 0,
                                openTime: s,
                                isBuy: !1,
                              };
                              aw.push(e),
                                addSoftLog(
                                  "尚未开盘 ".concat(getKeysMintStr(r), " ")
                                );
                              return;
                            }
                            let t = await buyFunction(r, O, 0),
                              a = {
                                ...r,
                                Tick: getTickCount(),
                                SaleCount: 0,
                                openTime: s,
                                isBuy: !0,
                              };
                            aw.push(a),
                              addSoftLog(
                                "买入: "
                                  .concat(truncateString(e, 8, 4, 4), " , ")
                                  .concat(O, " SOL 成功 哈希: ")
                                  .concat(t)
                              );
                          }
                        } catch (e) {
                          console.log(
                            "pool probably wasn't open yet:",
                            n.toString(),
                            Date.now()
                          );
                        }
                      } else if (r.baseMint.toString() === ak) {
                        let e = r.quoteMint.toBase58();
                        addSoftLog("检测到新代币#: ".concat(e));
                        try {
                          if (aP) {
                            let t = await (0, en.ih)(R, r.quoteMint);
                            if ((console.log("Mint:", t), t.freezeAuthority)) {
                              addSoftLog(
                                "代币: ".concat(
                                  truncateString(e, 8, 4, 4),
                                  "未放弃冻结权限  跳过"
                                )
                              );
                              return;
                            }
                            {
                              let t = await swapOut_Buy(
                                  r,
                                  O * Y.LAMPORTS_PER_SOL,
                                  0
                                ),
                                a = await R.sendTransaction(t, [_], {
                                  skipPreflight: !0,
                                });
                              console.log("swapped in tx id:", a);
                              let l = {
                                ...r,
                                Tick: getTickCount(),
                                SaleCount: 0,
                                openTime: s,
                                isBuy: !0,
                              };
                              aw.push(l),
                                addSoftLog(
                                  "买入#: "
                                    .concat(truncateString(e, 8, 4, 4), " , ")
                                    .concat(O, " SOL 成功 哈希: ")
                                    .concat(a)
                                );
                            }
                          } else {
                            let t = await swapOut_Buy(
                                r,
                                O * Y.LAMPORTS_PER_SOL,
                                0
                              ),
                              a = await R.sendTransaction(t, [_], {
                                skipPreflight: !0,
                              });
                            console.log("swapped in tx id:", a);
                            let l = {
                              ...r,
                              Tick: getTickCount(),
                              SaleCount: 0,
                              openTime: s,
                              isBuy: !0,
                            };
                            aw.push(l),
                              addSoftLog(
                                "买入#: "
                                  .concat(truncateString(e, 8, 4, 4), " , ")
                                  .concat(O, " SOL 成功 哈希: ")
                                  .concat(a)
                              );
                          }
                        } catch (e) {
                          console.log(
                            "pool probably wasn't open yet:",
                            n.toString(),
                            Date.now()
                          );
                        }
                      }
                    }
                  }
              });
          };
          async function getTokenAmountByMint(e) {
            try {
              let t = await getTokenAccount(R, _.publicKey);
              for (let a = 0; a < t.length; a++) {
                let l = t[a].account.data.parsed.info;
                if (l.mint === e) {
                  let e = l.tokenAmount.uiAmount;
                  return { AtaKey: t[a].pubkey, Amount: Number(e) };
                }
              }
            } catch (e) {
              console.log("getTokenAccount Error~!", e);
            }
            return { AtaKey: -1, Amount: -1 };
          }
          async function mySaleFunction() {
            if (!ah || !av) return;
            let e = getTickCount();
            for (let t = 0; t < aw.length; t++) {
              let a = aw[t];
              if (a.isBuy) {
                if (e - a.Tick >= I) {
                  a.Tick += 15e3;
                  let e = await getTokenAmountByMint(getKeysMintStr(a));
                  if (-1 !== e.Amount) {
                    if (0 === e.Amount) {
                      if (aN) {
                        let t = await autoCloseAccount(e.AtaKey, _.publicKey);
                        console.log("关闭账户~");
                        let a = await R.sendTransaction(t, [_], {
                          skipPreflight: !0,
                        });
                        console.log("swapped in tx id:", a),
                          addSoftLog("自动关闭账户成功");
                      }
                      aw.splice(t, 1);
                      break;
                    }
                    if (a.quoteMint.toString() === ak)
                      try {
                        if (((a.SaleCount += 1), a.SaleCount >= 5)) {
                          addSoftLog(
                            "".concat(
                              truncateString(a.baseMint.toBase58(), 8, 4, 4),
                              " 卖出失败,跳过"
                            )
                          ),
                            aw.splice(t, 1);
                          break;
                        }
                      } catch (e) {
                        console.log(e),
                          addSoftLog(
                            "卖出 ".concat(
                              truncateString(a.baseMint.toBase58(), 8, 4, 4),
                              " 失败"
                            )
                          );
                      }
                    else if (a.baseMint.toString() === ak)
                      try {
                        if (((a.SaleCount += 1), a.SaleCount >= 5)) {
                          addSoftLog(
                            "".concat(
                              truncateString(a.quoteMint.toBase58(), 8, 4, 4),
                              " 卖出失败,跳过"
                            )
                          ),
                            aw.splice(t, 1);
                          break;
                        }
                        let l = Math.floor(
                          e.Amount * Math.pow(10, a.quoteDecimals)
                        );
                        console.log("saleamtV", l);
                      } catch (e) {
                        console.log(e),
                          addSoftLog(
                            "卖出# ".concat(
                              truncateString(a.quoteMint.toBase58(), 8, 4, 4),
                              " 失败"
                            )
                          );
                      }
                  } else {
                    addSoftLog(
                      "#没有代币 ".concat(
                        truncateString(a.baseMint.toBase58(), 8, 4, 4)
                      )
                    ),
                      aw.splice(t, 1);
                    break;
                  }
                }
              } else {
                let e = new Date().getTime() / 1e3;
                if (e >= a.openTime) {
                  if (a.quoteMint.toString() === ak) {
                    let e = a.baseMint.toBase58();
                    addSoftLog("代币开盘: ".concat(e)),
                      (a.Tick = getTickCount()),
                      (a.isBuy = !0);
                    try {
                      Y.LAMPORTS_PER_SOL;
                      let t = await buyFunction(a, O, 0);
                      addSoftLog(
                        "买入: "
                          .concat(truncateString(e, 8, 4, 4), " , ")
                          .concat(O, " SOL 成功 哈希: ")
                          .concat(t)
                      );
                    } catch (e) {
                      console.log(e);
                    }
                  } else if (a.baseMint.toString() === ak) {
                    let e = a.quoteMint.toBase58();
                    addSoftLog("检测到新代币#: ".concat(e));
                    try {
                      let e = a.baseMint.toBase58();
                      addSoftLog("代币开盘#: ".concat(e)),
                        (a.Tick = getTickCount()),
                        (a.isBuy = !0);
                      try {
                        let t = await buyFunction(O, R, _);
                        console.log("swapped in tx id:", t),
                          addSoftLog(
                            "买入#: "
                              .concat(truncateString(e, 8, 4, 4), " , ")
                              .concat(O, " SOL 成功 哈希: ")
                              .concat(t)
                          );
                      } catch (e) {
                        console.log(e);
                      }
                    } catch (e) {
                      console.log(e);
                    }
                  }
                }
              }
            }
          }
          let handleViewHold = async () => {
              addSoftLog("持仓列表: ");
              try {
                let e = await getTokenAccount(R, _.publicKey);
                console.log(e);
                for (let t = 0; t < e.length; t++) {
                  let a = e[t].account.data.parsed.info,
                    l = a.tokenAmount.uiAmount;
                  l > 0 &&
                    (console.log("".concat(a.mint, " 数量:").concat(l)),
                    addSoftLog("".concat(a.mint, " 数量:").concat(l)));
                }
              } catch (e) {
                console.log("getTokenAccount Error~!", e);
              }
            },
            confirmCloseAll = async (e) => {
              console.log(e), addSoftLog("正在执行一键关闭账户");
              try {
                let e = await getTokenAccount(R, _.publicKey);
                for (let t = 0; t < e.length; t++) {
                  let a = e[t].account.data.parsed.info,
                    l = a.tokenAmount.uiAmount;
                  if (0 === l) {
                    let l = await autoCloseAccount(e[t].pubkey, _.publicKey);
                    console.log("关闭账户~");
                    let n = await R.sendTransaction(l, [_], {
                      skipPreflight: !0,
                    });
                    console.log("swapped in tx id:", n),
                      addSoftLog("自动关闭账户成功,关联的代币:".concat(a.mint));
                  }
                }
              } catch (e) {
                console.log("getTokenAccount Error~!", e);
              }
              addSoftLog("执行一键关闭账户完成");
            },
            setEmvModeProc = (e) => {
              e
                ? ah && addSoftLog("打开MEV模式")
                : ah && addSoftLog("关闭MEV模式"),
                eQ(e);
            },
            onChangeJitoLevel = (e) => {
              let t = e.target.value;
              eG(t),
                1 === t
                  ? (eJ(3e-5), (e2.current = 3e-5))
                  : 2 === t
                  ? (eJ(0.001), (e2.current = 0.001))
                  : 3 === t && (eJ(0.01), (e2.current = 0.01));
            };
          return (0, V.jsxs)("div", {
            children: [
              eR,
              (0, V.jsx)(ej.Z, {
                vertical: !0,
                gap: "middle",
                children: (0, V.jsxs)(ej.Z, {
                  gap: "middle",
                  justify: "flex-start",
                  align: "flex-start",
                  children: [
                    eh
                      ? ""
                      : (0, V.jsx)(to.Z, {
                          style: { width: 400 },
                          title: "帐号信息",
                          children: (0, V.jsx)(ej.Z, {
                            gap: 10,
                            justify: "flex-start",
                            align: "center",
                            children: (0, V.jsxs)(tm.default, {
                              direction: "horizontal",
                              children: [
                                (0, V.jsx)(e$.default.Password, {
                                  placeholder: "钱包私钥填写",
                                  id: "userwallet",
                                  visibilityToggle: {
                                    visible: c,
                                    onVisibleChange: d,
                                  },
                                }),
                                (0, V.jsx)(eb(), {
                                  style: { width: 80 },
                                  onClick: handleSetWallet,
                                  children: "设置",
                                }),
                              ],
                            }),
                          }),
                        }),
                    (0, V.jsxs)(to.Z, {
                      style: { width: 500 },
                      title: "代币管理 - Pump内盘",
                      children: [
                        (0, V.jsx)(ej.Z, {
                          gap: 10,
                          justify: "flex-start",
                          align: "center",
                          children: (0, V.jsx)(e$.default, {
                            placeholder: "代币地址",
                            onChange: handleTokenChange,
                          }),
                        }),
                        0 === u
                          ? (0, V.jsx)(eB.Z, {
                              icon: (0, V.jsx)(tb.Z, { spin: !0 }),
                              color: "processing",
                              style: { fontSize: "12px" },
                              children: "查询中",
                            })
                          : 1 === u
                          ? (0, V.jsx)(eB.Z, {
                              icon: (0, V.jsx)(th.Z, {}),
                              color: "error",
                              style: { fontSize: "12px" },
                              children: f,
                            })
                          : "",
                        (0, V.jsx)(tL.Z, { children: "代币信息" }),
                        (0, V.jsx)(ej.Z, {
                          style: { marginTop: 10 },
                          justify: "flex-start",
                          align: "center",
                          children: (0, V.jsxs)(td.Z, {
                            align: "middle",
                            children: [
                              (0, V.jsx)(ti.Z, {
                                children: (0, V.jsx)(ts.ZP, {
                                  src: "".concat(J),
                                }),
                              }),
                              (0, V.jsxs)(ti.Z, {
                                flex: "auto",
                                style: { marginLeft: 16 },
                                children: [
                                  (0, V.jsx)("div", {
                                    children: (0, V.jsx)("strong", {
                                      children: H,
                                    }),
                                  }),
                                  (0, V.jsx)("div", {
                                    children: (0, V.jsx)(i, {
                                      type: "secondary",
                                      children: p,
                                    }),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "安全指数: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(eS.default, {
                                title:
                                  "安全指数(根据代币权限,流动性池,持币数据等判断因素) 此数据仅供参考,非投资建议!",
                                children: (0, V.jsx)(tB.Z, {
                                  disabled: !0,
                                  allowHalf: !0,
                                  value: C,
                                }),
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "价格: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(i, { children: "Nan" }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "市值: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(i, { children: "Nan" }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "安全: " }),
                            (0, V.jsxs)("div", {
                              style: { marginLeft: 10 },
                              children: [
                                j
                                  ? (0, V.jsx)(eS.default, {
                                      title:
                                        "此代币增发权限未丢弃,可随时增发代币",
                                      children: (0, V.jsx)(eB.Z, {
                                        color: "red",
                                        children: "Mint权限丢弃❌",
                                      }),
                                    })
                                  : (0, V.jsxs)(eS.default, {
                                      title:
                                        "此代币增发权限已丢弃,不能增发代币",
                                      children: [
                                        (0, V.jsx)(eB.Z, {
                                          color: "green",
                                          children: "Mint权限丢弃✅",
                                        }),
                                        " ",
                                      ],
                                    }),
                                b
                                  ? (0, V.jsx)(eS.default, {
                                      title:
                                        "此代币冻结权限未丢弃,Dev可以冻结账户",
                                      children: (0, V.jsx)(eB.Z, {
                                        color: "red",
                                        children: "冻结权限丢弃❌",
                                      }),
                                    })
                                  : (0, V.jsxs)(eS.default, {
                                      title: "此代币冻结权限已丢弃",
                                      children: [
                                        (0, V.jsx)(eB.Z, {
                                          color: "green",
                                          children: "冻结权限丢弃✅",
                                        }),
                                        " ",
                                      ],
                                    }),
                                S
                                  ? (0, V.jsx)(eS.default, {
                                      title: "此代币流动性池子已全部燃烧",
                                      children: (0, V.jsxs)(eB.Z, {
                                        color: "green",
                                        children: ["燃烧池子✅ (", P, ")"],
                                      }),
                                    })
                                  : (0, V.jsxs)(eS.default, {
                                      title:
                                        "此代币流动性池未全部燃烧,未燃烧部分Dev可以撤池",
                                      children: [
                                        (0, V.jsxs)(eB.Z, {
                                          color: "red",
                                          children: ["燃烧池子❌ (", P, ")"],
                                        }),
                                        " ",
                                      ],
                                    }),
                              ],
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "Top10持仓: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                T <= 30
                                  ? (0, V.jsxs)(eB.Z, {
                                      icon: (0, V.jsx)(eP.Z, {}),
                                      color: "green",
                                      children: [T, "%"],
                                    })
                                  : T > 30 && T <= 50
                                  ? (0, V.jsxs)(eB.Z, {
                                      icon: (0, V.jsx)(tM.Z, {}),
                                      color: "warning",
                                      children: [T, "%"],
                                    })
                                  : (0, V.jsxs)(eB.Z, {
                                      icon: (0, V.jsx)(th.Z, {}),
                                      color: "red",
                                      children: [T, "%"],
                                    }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(eS.default, {
                                title:
                                  "如持币地址过多导致查询过慢，可【刷新页面】后关闭此选项",
                                children: (0, V.jsx)(tr.default, {
                                  defaultChecked: !0,
                                  id: "checktop",
                                  children: "检查持仓信息",
                                }),
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "池子: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: er
                                ? (0, V.jsx)(eB.Z, {
                                    color: "green",
                                    children: "已开放交易✅",
                                  })
                                : (0, V.jsx)(eB.Z, {
                                    color: "red",
                                    children: "未开始交易❌",
                                  }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "创建时间: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(i, { children: ec }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "SOL余额: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsxs)(i, {
                                children: [em, " SOL"],
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "代币链接: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                "" === ee
                                  ? (0, V.jsx)(ay, {
                                      href: "",
                                      target: "_blank",
                                      children: "❌官网",
                                    })
                                  : (0, V.jsx)(ay, {
                                      href: ee,
                                      target: "_blank",
                                      children: "✅官网",
                                    }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                "" === ea
                                  ? (0, V.jsx)(ay, {
                                      href: "",
                                      target: "_blank",
                                      children: "❌Twitter",
                                    })
                                  : (0, V.jsx)(ay, {
                                      href: ea,
                                      target: "_blank",
                                      children: "✅Twitter",
                                    }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children:
                                "" === es
                                  ? (0, V.jsx)(ay, {
                                      href: "",
                                      target: "_blank",
                                      children: "❌Telegram",
                                    })
                                  : (0, V.jsx)(ay, {
                                      href: es,
                                      target: "_blank",
                                      children: "✅Telegram",
                                    }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(ej.Z, {
                          style: { marginTop: 5 },
                          children: [
                            (0, V.jsx)(i, { children: "相关链接: " }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(ay, {
                                href: "https://gmgn.ai/sol/token/".concat(p),
                                target: "_blank",
                                children: "Gmgn",
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(ay, {
                                href: "https://birdeye.so/token/".concat(
                                  p,
                                  "?chain=solana"
                                ),
                                target: "_blank",
                                children: "Birdeye",
                              }),
                            }),
                            (0, V.jsx)("div", {
                              style: { marginLeft: 10 },
                              children: (0, V.jsx)(ay, {
                                href: "https://dexscreener.com/solana/".concat(
                                  p
                                ),
                                target: "_blank",
                                children: "Dexscreener",
                              }),
                            }),
                          ],
                        }),
                        (0, V.jsxs)(tL.Z, {
                          children: ["Top10持仓列表 总持币数:(", e3, ")"],
                        }),
                        (0, V.jsx)("div", {
                          style: { marginBottom: 10, marginTop: 10 },
                          children: (0, V.jsx)(af, {
                            rows: 8,
                            wrap: "off",
                            value: L,
                          }),
                        }),
                      ],
                    }),
                    (0, V.jsxs)(to.Z, {
                      style: { width: 450 },
                      title: (0, V.jsxs)("div", {
                        children: [
                          (0, V.jsx)("span", {
                            children: "交易控制台  - Pump内盘",
                          }),
                          eh
                            ? (0, V.jsx)("span", {
                                style: {
                                  fontSize: "12px",
                                  color: "#888",
                                  marginLeft: "8px",
                                },
                                children: ev,
                              })
                            : "",
                        ],
                      }),
                      children: [
                        (0, V.jsxs)(ej.Z, {
                          style: { marginBottom: 5 },
                          justify: "flex-start",
                          align: "center",
                          children: [
                            (0, V.jsx)(eb(), {
                              style: 0 === eO ? { borderColor: "blue" } : {},
                              icon: (0, V.jsx)(t_.Z, {}),
                              onClick: () => eZ(0),
                              children: "手动",
                            }),
                            (0, V.jsx)(eb(), {
                              style: 1 === eO ? { borderColor: "blue" } : {},
                              icon: (0, V.jsx)(tR.Z, {}),
                              onClick: () => eZ(1),
                              children: "自动",
                            }),
                            (0, V.jsx)(eb(), {
                              style: 2 === eO ? { borderColor: "blue" } : {},
                              icon: (0, V.jsx)(tO.Z, {}),
                              onClick: () => eZ(2),
                              children: "跟投",
                            }),
                          ],
                        }),
                        0 === eO
                          ? (0, V.jsxs)("div", {
                              children: [
                                (0, V.jsx)(eS.default, {
                                  title:
                                    "在此处输入代币地址可以更快速的Ready买入 卖出  (不查询代币池子等信息)",
                                  children: (0, V.jsx)(e$.default, {
                                    placeholder: "快速查找代币地址",
                                    onChange: handleTokenChange1,
                                  }),
                                }),
                                0 === x
                                  ? (0, V.jsx)(eB.Z, {
                                      icon: (0, V.jsx)(tb.Z, { spin: !0 }),
                                      color: "processing",
                                      style: { fontSize: "12px" },
                                      children: "查询中",
                                    })
                                  : "",
                                eh
                                  ? (0, V.jsxs)("div", {
                                      children: [
                                        (0, V.jsx)(ej.Z, {
                                          style: { marginTop: 0 },
                                          justify: "flex-start",
                                          align: "center",
                                          children: (0, V.jsxs)(td.Z, {
                                            align: "middle",
                                            children: [
                                              (0, V.jsx)(ti.Z, {
                                                children: (0, V.jsx)(ts.ZP, {
                                                  src: "".concat(J),
                                                }),
                                              }),
                                              (0, V.jsxs)(ti.Z, {
                                                flex: "auto",
                                                style: { marginLeft: 16 },
                                                children: [
                                                  (0, V.jsx)("div", {
                                                    children: (0, V.jsx)(
                                                      "strong",
                                                      { children: H }
                                                    ),
                                                  }),
                                                  (0, V.jsx)("div", {
                                                    children: (0, V.jsx)(i, {
                                                      type: "secondary",
                                                      children: truncateString(
                                                        p,
                                                        16,
                                                        8,
                                                        8
                                                      ),
                                                    }),
                                                  }),
                                                ],
                                              }),
                                            ],
                                          }),
                                        }),
                                        (0, V.jsxs)(ej.Z, {
                                          children: [
                                            (0, V.jsxs)(eB.Z, {
                                              bordered: !1,
                                              color: "processing",
                                              children: ["余额: ", eL, " ", H],
                                            }),
                                            eM
                                              ? (0, V.jsx)(tE.default, {})
                                              : (0, V.jsx)(tI.Z, {
                                                  onClick: handleRefTokenAmount,
                                                }),
                                          ],
                                        }),
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            marginTop: 5,
                                            marginBottom: 5,
                                          },
                                          children: (0, V.jsxs)(eB.Z, {
                                            bordered: !1,
                                            color: "processing",
                                            children: ["SOL余额: ", eT, " SOL"],
                                          }),
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsxs)(ej.Z, {
                                  style: { marginTop: 10, marginBottom: 10 },
                                  children: [
                                    (0, V.jsx)(i, {
                                      type: "success",
                                      children: "买入:",
                                    }),
                                    " ",
                                    e5
                                      ? (0, V.jsx)(eB.Z, {
                                          style: { marginLeft: 5 },
                                          icon: (0, V.jsx)(eP.Z, {}),
                                          color: "success",
                                          children: "Ready",
                                        })
                                      : "",
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", gap: "6px" },
                                  children: [
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      onClick: () => handleBuyFromAmt(0.01),
                                      children: "0.01",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      onClick: () => handleBuyFromAmt(0.1),
                                      children: "0.1",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      onClick: () => handleBuyFromAmt(0.5),
                                      children: "0.5",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "green" },
                                      icon: (0, V.jsx)(tC.Z, {}),
                                      disabled: !0,
                                    }),
                                  ],
                                }),
                                (0, V.jsx)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: (0, V.jsxs)(tm.default.Compact, {
                                    style: { width: "60%" },
                                    children: [
                                      (0, V.jsx)(e$.default, {
                                        id: "buyamt",
                                        style: { borderColor: "green" },
                                        placeholder: "自定义金额",
                                      }),
                                      (0, V.jsx)(eb(), {
                                        style: { borderColor: "green" },
                                        onClick: handleBuy,
                                        children: "Buy",
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: [
                                    (0, V.jsx)(i, { children: "高级选项:" }),
                                    (0, V.jsx)("div", {
                                      style: { marginLeft: 10 },
                                      children: (0, V.jsx)(e1.Z, {
                                        onChange: () => {
                                          ep(!eg);
                                        },
                                      }),
                                    }),
                                  ],
                                }),
                                eg
                                  ? (0, V.jsxs)("div", {
                                      children: [
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            display: "flex",
                                            marginTop: "6px",
                                          },
                                          children: (0, V.jsx)("div", {
                                            style: { marginLeft: 10 },
                                            children: (0, V.jsx)(tr.default, {
                                              disabled: !0,
                                              children: "自动卖出",
                                            }),
                                          }),
                                        }),
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            display: "flex",
                                            marginTop: "6px",
                                          },
                                          children: (0, V.jsxs)(
                                            e0.default.Group,
                                            {
                                              children: [
                                                (0, V.jsx)(e0.default, {
                                                  value: 1,
                                                  disabled: !0,
                                                  children: "按时间",
                                                }),
                                                (0, V.jsx)(e0.default, {
                                                  value: 2,
                                                  disabled: !0,
                                                  children: "按价格",
                                                }),
                                                (0, V.jsx)(e0.default, {
                                                  value: 3,
                                                  disabled: !0,
                                                  children: "按盈利",
                                                }),
                                              ],
                                            }
                                          ),
                                        }),
                                        (0, V.jsx)(ej.Z, {
                                          style: {
                                            display: "flex",
                                            marginTop: "6px",
                                          },
                                          children: (0, V.jsxs)(
                                            tm.default.Compact,
                                            {
                                              style: { width: "60%" },
                                              children: [
                                                (0, V.jsx)(e$.default, {
                                                  placeholder: "买入(秒)后",
                                                  disabled: !0,
                                                }),
                                                (0, V.jsx)(e$.default, {
                                                  placeholder: "卖出%",
                                                  disabled: !0,
                                                }),
                                              ],
                                            }
                                          ),
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsxs)(ej.Z, {
                                  style: { marginTop: 10, marginBottom: 10 },
                                  children: [
                                    (0, V.jsx)(i, {
                                      type: "danger",
                                      children: "卖出:",
                                    }),
                                    " ",
                                    e5
                                      ? (0, V.jsx)(eB.Z, {
                                          style: { marginLeft: 5 },
                                          icon: (0, V.jsx)(eP.Z, {}),
                                          color: "success",
                                          children: "Ready",
                                        })
                                      : "",
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", gap: "6px" },
                                  children: [
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      onClick: () => SaleTokenByPer(20),
                                      children: "20%",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      onClick: () => SaleTokenByPer(50),
                                      children: "50%",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      onClick: () => SaleTokenByPer(100),
                                      children: "100%",
                                    }),
                                    (0, V.jsx)(eb(), {
                                      style: { borderColor: "red" },
                                      icon: (0, V.jsx)(tC.Z, {}),
                                      disabled: !0,
                                    }),
                                  ],
                                }),
                                (0, V.jsx)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: (0, V.jsxs)(tm.default.Compact, {
                                    style: { width: "60%" },
                                    children: [
                                      (0, V.jsx)(e$.default, {
                                        id: "saleamt",
                                        style: { borderColor: "red" },
                                        placeholder: "自定义数量",
                                      }),
                                      (0, V.jsx)(eb(), {
                                        style: { borderColor: "red" },
                                        onClick: handleSale,
                                        children: "Sale",
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "MEV模式" }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eH,
                                      onChange: () => {
                                        setEmvModeProc(!eH);
                                      },
                                    }),
                                  ],
                                }),
                                eH
                                  ? (0, V.jsxs)(ej.Z, {
                                      style: {
                                        display: "flex",
                                        marginTop: "6px",
                                        alignItems: "center",
                                        justifyContent: "flex-end",
                                      },
                                      children: [
                                        (0, V.jsxs)(e0.default.Group, {
                                          value: eU,
                                          onChange: onChangeJitoLevel,
                                          children: [
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 1,
                                              children: "默认",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 2,
                                              children: "高速",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 3,
                                              children: "极速",
                                            }),
                                          ],
                                        }),
                                        (0, V.jsx)(e$.default, {
                                          type: "number",
                                          step: 1e-5,
                                          style: { width: 100 },
                                          value: eY,
                                          onChange: handleChangeJito,
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsx)(ej.Z, {
                                  justify: "flex-start",
                                  align: "center",
                                  style: { marginTop: 10 },
                                  children: (0, V.jsxs)("span", {
                                    children: [
                                      "交易Gas费(SOL): ",
                                      (0, V.jsxs)(eS.default, {
                                        title: "设置 0 时使用最低Gas费",
                                        children: [
                                          (0, V.jsx)(e$.default, {
                                            placeholder: "买入Gas费",
                                            value: K,
                                            style: { width: "50%" },
                                            onChange: onChangeBuyGas,
                                          }),
                                          " ",
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsx)(tL.Z, { children: "当前持仓" }),
                              ],
                            })
                          : 1 === eO
                          ? (0, V.jsxs)("div", {
                              children: [
                                (0, V.jsx)(ej.Z, {
                                  style: { marginTop: 5, marginBottom: 5 },
                                  children: (0, V.jsxs)(eB.Z, {
                                    bordered: !1,
                                    color: "processing",
                                    children: ["SOL余额: ", eT, " SOL"],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: [
                                    (0, V.jsx)(i, {
                                      children: "自动买入新池子:",
                                    }),
                                    (0, V.jsx)("div", {
                                      style: { marginLeft: 10 },
                                      children: (0, V.jsx)(e1.Z, {
                                        onChange: (e) => {
                                          if (e) {
                                            if (!_) {
                                              notify({
                                                type: "error",
                                                message: "错误",
                                                description: "请先设置钱包",
                                              });
                                              return;
                                            }
                                            let e =
                                                document.getElementById(
                                                  "autobuyamt"
                                                ),
                                              t = null == e ? void 0 : e.value;
                                            if ("" === t) {
                                              notify({
                                                type: "error",
                                                message: "错误",
                                                description:
                                                  "自动买入数量不能为空",
                                              });
                                              return;
                                            }
                                            if (((O = Number(t)), av)) {
                                              let e =
                                                  document.getElementById(
                                                    "salesleep"
                                                  ),
                                                t =
                                                  null == e ? void 0 : e.value;
                                              if ("" === t) {
                                                notify({
                                                  type: "error",
                                                  message: "错误",
                                                  description:
                                                    "自动卖出时间不能为空",
                                                });
                                                return;
                                              }
                                              let a = Number(t);
                                              (I = 1e3 * a),
                                                (Z = setInterval(
                                                  mySaleFunction,
                                                  1e3
                                                ));
                                            }
                                            ab || (initLogs(), (ab = !0)),
                                              (ah = !0),
                                              addSoftLog(
                                                "开始运行 SOL余额: ".concat(eT)
                                              );
                                          } else
                                            (ah = !1), Z && clearInterval(Z);
                                        },
                                      }),
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "买入数量" }),
                                    (0, V.jsx)(e$.default, {
                                      id: "autobuyamt",
                                      style: { width: "30%" },
                                      placeholder: "SOL",
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "买入后" }),
                                    (0, V.jsx)(e$.default, {
                                      id: "salesleep",
                                      style: { width: "20%" },
                                      defaultValue: 60,
                                    }),
                                    (0, V.jsx)(i, { children: "(秒)自动卖出" }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eF,
                                      onChange: () => {
                                        let e = !eF;
                                        eq(e);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: { display: "flex", marginTop: "6px" },
                                  children: [
                                    (0, V.jsx)(i, {
                                      children: "过滤未丢弃冻结权限的池子:",
                                    }),
                                    (0, V.jsx)("div", {
                                      style: { marginLeft: 10 },
                                      children: (0, V.jsx)(e1.Z, {
                                        value: eI,
                                        onChange: () => {
                                          eE(!eI);
                                        },
                                      }),
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  children: [
                                    (0, V.jsx)(i, {
                                      children: "卖出后,自动关闭账户",
                                    }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eD,
                                      onChange: () => {
                                        eV(!eD);
                                      },
                                    }),
                                  ],
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                    justifyContent: "flex-end",
                                  },
                                  children: [
                                    (0, V.jsx)(i, { children: "MEV模式" }),
                                    (0, V.jsx)(e1.Z, {
                                      value: eH,
                                      onChange: () => {
                                        setEmvModeProc(!eH);
                                      },
                                    }),
                                  ],
                                }),
                                eH
                                  ? (0, V.jsxs)(ej.Z, {
                                      style: {
                                        display: "flex",
                                        marginTop: "6px",
                                        alignItems: "center",
                                        justifyContent: "flex-end",
                                      },
                                      children: [
                                        (0, V.jsxs)(e0.default.Group, {
                                          value: eU,
                                          onChange: onChangeJitoLevel,
                                          children: [
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 1,
                                              children: "默认",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 2,
                                              children: "高速",
                                            }),
                                            (0, V.jsx)(e0.default.Button, {
                                              value: 3,
                                              children: "极速",
                                            }),
                                          ],
                                        }),
                                        (0, V.jsx)(e$.default, {
                                          type: "number",
                                          step: 1e-5,
                                          style: { width: 100 },
                                          value: eY,
                                          onChange: handleChangeJito,
                                        }),
                                      ],
                                    })
                                  : "",
                                (0, V.jsx)(ej.Z, {
                                  justify: "flex-start",
                                  align: "center",
                                  style: { marginTop: 10 },
                                  children: (0, V.jsxs)("span", {
                                    children: [
                                      "交易Gas费(SOL): ",
                                      (0, V.jsxs)(eS.default, {
                                        title: "设置 0 时使用最低Gas费",
                                        children: [
                                          (0, V.jsx)(e$.default, {
                                            placeholder: "买入Gas费",
                                            value: K,
                                            style: { width: "50%" },
                                            onChange: onChangeBuyGas,
                                          }),
                                          " ",
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                                (0, V.jsxs)(ej.Z, {
                                  style: {
                                    display: "flex",
                                    marginTop: "6px",
                                    alignItems: "center",
                                  },
                                  gap: 6,
                                  children: [
                                    (0, V.jsx)(eb(), {
                                      onClick: handleViewHold,
                                      children: "查看持仓",
                                    }),
                                    (0, V.jsx)(tc.Z, {
                                      title: "一键关闭账户",
                                      description:
                                        "关闭所有余额为0的代币账户,可退回少量租金",
                                      onConfirm: confirmCloseAll,
                                      onCancel: () => {
                                        console.log("cancel");
                                      },
                                      okText: "Yes",
                                      cancelText: "No",
                                      children: (0, V.jsx)(eb(), {
                                        children: "一键关闭账户",
                                      }),
                                    }),
                                    (0, V.jsx)(eb(), {
                                      onClick: () => {
                                        eW("");
                                      },
                                      children: "清空日志",
                                    }),
                                  ],
                                }),
                                (0, V.jsx)(tL.Z, { children: "运行日志" }),
                                (0, V.jsx)("div", {
                                  style: { marginBottom: 10, marginTop: 10 },
                                  children: (0, V.jsx)(af, {
                                    rows: 13,
                                    wrap: "off",
                                    value: ez,
                                  }),
                                }),
                              ],
                            })
                          : (0, V.jsx)("div", {}),
                      ],
                    }),
                  ],
                }),
              }),
            ],
          });
        };
      var aT = a(90482),
        aA = a(7615),
        aL = a(48764).Buffer;
      let aB = [],
        aK = new Y.PublicKey("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo"),
        MeteoraPoolView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(null),
            [g, p] = (0, z.useState)([]),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            [j, k] = (0, z.useState)(100),
            [S, v] = (0, z.useState)(50),
            [P, N] = (0, z.useState)(!1),
            [T, A] = (0, z.useState)(128),
            [L, B] = (0, z.useState)(63),
            [K, M] = (0, z.useState)(201),
            [C, _] = (0, z.useState)(null),
            [R, O] = (0, z.useState)(10),
            [Z, I] = (0, z.useState)(5),
            [E, F] = (0, z.useState)(""),
            [q, D] = (0, z.useState)(!1),
            [W, H] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            d && O((d.amount / 100) * j);
          }, [j, d]),
            (0, z.useEffect)(() => {
              m && I((m.amount / 100) * S);
            }, [S, m]);
          let handleEnterbtnclick = async () => {
            if (!t || !l) {
              console.log("钱包未连接"),
                notify({ type: "error", message: "钱包未连接" });
              return;
            }
            Y.Keypair.generate();
            let e = d.mint,
              n = m.mint,
              s = document.getElementById("corprice"),
              o = Number(null == s ? void 0 : s.value),
              r = document.getElementById("binstep"),
              i = Number(null == r ? void 0 : r.value);
            try {
              let l = new Y.PublicKey(e),
                s = new Y.PublicKey(n),
                r = await (0, en.ih)(a, l),
                c = await (0, en.ih)(a, s),
                d = new aT.Z(10 ** (c.decimals - r.decimals)),
                u = aA.ZP.getBinIdFromPrice(new aT.Z(o).mul(d), i, !1);
              console.log(u);
              let m = new (eX())(i),
                x = new (eX())(1e4),
                g = new (eX())(u),
                [p] = Y.PublicKey.findProgramAddressSync(
                  [
                    aL.from("preset_parameter"),
                    new Uint8Array(m.toArrayLike(aL, "le", 2)),
                    new Uint8Array(x.toArrayLike(aL, "le", 2)),
                  ],
                  aK
                );
              console.log(p.toString());
              let y = await aA.ZP.createLbPair(
                a,
                t.publicKey,
                l,
                s,
                m,
                new (eX())(x),
                p,
                g,
                { cluster: "mainnet-beta" }
              );
              y = setPublicGasfee(y);
              let f = new Y.PublicKey(
                  "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                ),
                h = Y.SystemProgram.transfer({
                  fromPubkey: t.publicKey,
                  toPubkey: f,
                  lamports: 2e8,
                });
              y.add(h), (y.feePayer = t.publicKey);
              let b = (await a.getLatestBlockhash()).blockhash;
              y.recentBlockhash = b;
              let w = await t.signTransaction(y),
                j = w.serialize(),
                k = await a.sendRawTransaction(j, { skipPreflight: !0 });
              console.log(k),
                H({
                  addrTag: "account",
                  addrName: "",
                  addr1: "请留意哈希是否上链",
                  hxName: "交易哈希:",
                  hxAddr: k,
                }),
                D(!0);
            } catch (e) {
              console.log(e),
                notify({
                  type: "error",
                  message: "错误",
                  description: "交易出错,请确认信息是否正确或已创建过池子",
                });
            }
          };
          async function displaytokenList(e, t) {
            if (e) {
              p([]);
              for (let e = 0; e < aB.length; e++)
                if (aB[e].isToken) {
                  let t = aB[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: aB[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      aB[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", aB[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: aB[e].label,
                      amount: aB[e].amount,
                      address: aB[e].address,
                      dec: aB[e].dec,
                    };
                  p((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(aB[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aB[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aB[e].label,
                    amount: aB[e].amount / 1e9,
                    address: aB[e].address,
                    dec: aB[e].dec,
                  };
                  p((e) => [...e, t]);
                }
            } else {
              p([]), console.log(aB);
              for (let e = 0; e < aB.length; e++)
                if (aB[e].isToken && aB[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [aB[e].symbol, " - ", aB[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aB[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aB[e].label,
                    address: aB[e].address,
                  };
                  p((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (l) {
              if (!i) {
                c(!0), p((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(l.toString());
                if (e.result) {
                  c(!0), (aB = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? aB.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : aB.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      style: { color: "black" },
                      children: w("pool.t2"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("pool.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: d,
                          onChange: (e) => {
                            u(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: w("pool.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: m,
                          onChange: (e) => {
                            x(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: w("pool.dbmoney"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)("input", {
                          className:
                            "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                          id: "corprice",
                          defaultValue: "1",
                          style: {
                            background: "#fff",
                            color: "black",
                            width: "110%",
                          },
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: "BinStep:",
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)("input", {
                          className:
                            "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                          id: "binstep",
                          defaultValue: "1",
                          style: {
                            background: "#fff",
                            color: "black",
                            width: "110%",
                          },
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className:
                      "flex flex-col md:flex-row items-center space-x-3 w-[600px]",
                    children: (0, V.jsx)("div", {
                      className:
                        "flex flex-col md:w-2/3 max-w-md mx-auto px-10 my-2 items-center",
                      children: (0, V.jsxs)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: handleEnterbtnclick,
                        style: {
                          background: "#ff9815",
                          border: "none",
                          borderRadius: "5px 5px 5px 5px",
                          boxShadow: "0 4px 0 0 #db7a00",
                          padding: "10px 50px",
                          color: "#fff",
                        },
                        children: [w("pool.enter"), " "],
                      }),
                    }),
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: w("msgbox.fbtn") }),
                onClick: () => D(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: q,
                msgParam: W,
                handleCancel: () => {
                  D(!1);
                },
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var aM = a(48764).Buffer;
      let { Paragraph: aC, Text: a_ } = ek.default,
        aR = [],
        aO = new Y.PublicKey("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo"),
        MeteoraLiqView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(null),
            [g, p] = (0, z.useState)([]),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(!0),
            [w, j] = (0, z.useState)(!1),
            { t: k } = (0, G.$G)("common"),
            [S, v] = (0, z.useState)(100),
            [P, N] = (0, z.useState)(50),
            [T, A] = (0, z.useState)(!1),
            [L, B] = (0, z.useState)(128),
            [K, M] = (0, z.useState)(63),
            [C, _] = (0, z.useState)(201),
            [R, O] = (0, z.useState)(1),
            [Z, I] = (0, z.useState)(3e-5),
            E = (0, z.useRef)(Z),
            [F, q] = (0, z.useState)(null),
            [D, W] = (0, z.useState)(10),
            [H, X] = (0, z.useState)(5),
            [J, $] = (0, z.useState)(""),
            [ee, et] = (0, z.useState)(!1),
            [ea, el] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            d && W((d.amount / 100) * S);
          }, [S, d]),
            (0, z.useEffect)(() => {
              m && X((m.amount / 100) * P);
            }, [P, m]);
          let handleEnter2btnclick = async () => {
            if (!t || !l) {
              console.log("钱包未连接"),
                notify({ type: "error", message: "钱包未连接" });
              return;
            }
            let e = d.mint,
              n = m.mint,
              s = document.getElementById("binstep"),
              o = Number(null == s ? void 0 : s.value),
              r = new Y.PublicKey(e),
              i = new Y.PublicKey(n),
              c = new (eX())(o),
              u = new (eX())(1e4);
            try {
              let [l] = (function (e, t, a, l, n) {
                let [s, o] = (function (e, t) {
                  let [a, l] =
                    1 == e.toBuffer().compare(t.toBuffer()) ? [t, e] : [e, t];
                  return [a, l];
                })(e, t);
                return Y.PublicKey.findProgramAddressSync(
                  [
                    s.toBuffer(),
                    o.toBuffer(),
                    new Uint8Array(a.toArrayLike(aM, "le", 2)),
                    new Uint8Array(l.toArrayLike(aM, "le", 2)),
                  ],
                  n
                );
              })(r, i, c, u, aO);
              if (!l) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "未找到池子,请先创建池子",
                });
                return;
              }
              let s = await (0, en.ih)(a, new Y.PublicKey(e));
              console.log(s);
              let o = await (0, en.ih)(a, new Y.PublicKey(n));
              console.log(o), console.log("lbPair: ", l.toString());
              let d = await aA.ZP.create(a, l);
              console.log(d);
              let m = new (eX())(D * Math.pow(10, s.decimals)),
                x = new (eX())(H * Math.pow(10, o.decimals)),
                g = new Y.Keypair(),
                p = await d.getActiveBin();
              console.log(p);
              let y = p.binId - 34,
                f = p.binId + 34,
                b = await d.initializePositionAndAddLiquidityByStrategy({
                  positionPubKey: g.publicKey,
                  user: t.publicKey,
                  totalXAmount: m,
                  totalYAmount: x,
                  strategy: {
                    maxBinId: f,
                    minBinId: y,
                    strategyType: aA.hD.SpotImBalanced,
                  },
                }),
                w = new Y.PublicKey(
                  "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                ),
                j = Y.SystemProgram.transfer({
                  fromPubkey: t.publicKey,
                  toPubkey: w,
                  lamports: 1e8,
                });
              if ((b.add(j), h)) {
                let e = getRandomTipAccount(),
                  l = E.current;
                b.add(
                  Y.SystemProgram.transfer({
                    fromPubkey: t.publicKey,
                    toPubkey: e,
                    lamports: l * Y.LAMPORTS_PER_SOL,
                  })
                ),
                  (b.feePayer = t.publicKey);
                let n = (await a.getLatestBlockhash()).blockhash;
                (b.recentBlockhash = n), b.partialSign(g);
                let s = await t.signTransaction(b),
                  o = e8().encode(s.serialize()),
                  r = [];
                r.push(o);
                let i = await sendBundle(r);
                notify({
                  type: "success",
                  message: "交易已发送",
                  description: "捆绑包ID: ".concat(i),
                });
              } else {
                b.feePayer = t.publicKey;
                let e = (await a.getLatestBlockhash()).blockhash;
                (b.recentBlockhash = e), b.partialSign(g);
                let l = await t.signTransaction(b),
                  n = l.serialize(),
                  s = await a.sendRawTransaction(n, { skipPreflight: !0 });
                console.log(s),
                  el({
                    addrTag: "account",
                    addrName: "",
                    addr1: "请留意哈希是否上链",
                    hxName: "交易哈希:",
                    hxAddr: s,
                  }),
                  et(!0);
              }
            } catch (e) {
              console.log(e),
                notify({
                  type: "error",
                  message: "错误",
                  description: "交易出错",
                });
            }
          };
          async function displaytokenList(e, t) {
            if (e) {
              p([]);
              for (let e = 0; e < aR.length; e++)
                if (aR[e].isToken) {
                  let t = aR[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: aR[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      aR[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", aR[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: aR[e].label,
                      amount: aR[e].amount,
                      address: aR[e].address,
                      dec: aR[e].dec,
                    };
                  p((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(aR[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aR[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aR[e].label,
                    amount: aR[e].amount / 1e9,
                    address: aR[e].address,
                    dec: aR[e].dec,
                  };
                  p((e) => [...e, t]);
                }
            } else {
              p([]), console.log(aR);
              for (let e = 0; e < aR.length; e++)
                if (aR[e].isToken && aR[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [aR[e].symbol, " - ", aR[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aR[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aR[e].label,
                    address: aR[e].address,
                  };
                  p((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (l) {
              if (!i) {
                c(!0), p((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(l.toString());
                if (e.result) {
                  c(!0), (aR = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? aR.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : aR.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      style: { color: "black" },
                      children: k("pool.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: k("pool.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: d,
                          onChange: (e) => {
                            u(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: k("pool.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: m,
                          onChange: (e) => {
                            x(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: k("pool.baseamount"),
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsxs)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: [
                            (0, V.jsx)("input", {
                              type: "number",
                              className:
                                "max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                              value: D,
                              onChange: (e) => {
                                W(parseFloat(e.target.value));
                              },
                              style: {
                                background: "#fff",
                                color: "black",
                                width: "110%",
                              },
                            }),
                            (0, V.jsx)("span", {
                              className: "text-stone-300 text-sm",
                              children:
                                d &&
                                (0, V.jsxs)("span", {
                                  children: [
                                    k("pool.balance"),
                                    " ",
                                    d.amount,
                                    " ",
                                    d.symbol,
                                  ],
                                }),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: k("pool.quoteamount"),
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsxs)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: [
                            (0, V.jsx)("input", {
                              type: "number",
                              className:
                                " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                              value: H,
                              onChange: (e) => {
                                X(parseFloat(e.target.value));
                              },
                              style: {
                                background: "#fff",
                                color: "black",
                                width: "110%",
                              },
                            }),
                            (0, V.jsx)("span", {
                              className: "text-stone-300 text-sm",
                              children:
                                m &&
                                (0, V.jsxs)("span", {
                                  children: [
                                    k("pool.balance"),
                                    " ",
                                    m.amount,
                                    "  ",
                                    m.symbol,
                                  ],
                                }),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: "BinStep:",
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsx)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: (0, V.jsx)("input", {
                            type: "number",
                            id: "binstep",
                            defaultValue: 1,
                            className:
                              " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            style: {
                              background: "#fff",
                              color: "black",
                              width: "110%",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className:
                      "flex flex-col md:flex-row items-center space-x-3 w-[600px]",
                    children: (0, V.jsx)("div", {
                      className:
                        "flex flex-col md:w-2/3 max-w-md mx-auto px-10 my-2 items-center",
                      children: (0, V.jsxs)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: handleEnter2btnclick,
                        style: {
                          background: "#ff9815",
                          border: "none",
                          borderRadius: "5px 5px 5px 5px",
                          boxShadow: "0 4px 0 0 #db7a00",
                          padding: "10px 50px",
                          color: "#fff",
                        },
                        children: [k("pool.enter"), " "],
                      }),
                    }),
                  }),
                  (0, V.jsxs)(ej.Z, {
                    style: {
                      display: "flex",
                      marginTop: "6px",
                      alignItems: "center",
                      justifyContent: "flex-end",
                    },
                    children: [
                      (0, V.jsxs)(a_, {
                        type: "warning",
                        children: ["MEV ", k("msg.mode")],
                      }),
                      (0, V.jsx)(e1.Z, {
                        value: h,
                        onChange: () => {
                          b(!h);
                        },
                      }),
                    ],
                  }),
                  h
                    ? (0, V.jsxs)(ej.Z, {
                        style: {
                          display: "flex",
                          marginTop: "6px",
                          alignItems: "center",
                          justifyContent: "flex-end",
                        },
                        children: [
                          (0, V.jsxs)(e0.default.Group, {
                            value: R,
                            onChange: (e) => {
                              let t = e.target.value;
                              O(t),
                                1 === t
                                  ? (I(3e-5), (E.current = 3e-5))
                                  : 2 === t
                                  ? (I(0.001), (E.current = 0.001))
                                  : 3 === t && (I(0.01), (E.current = 0.01));
                            },
                            children: [
                              (0, V.jsx)(e0.default.Button, {
                                value: 1,
                                children: k("msg.def"),
                              }),
                              (0, V.jsx)(e0.default.Button, {
                                value: 2,
                                children: k("msg.def1"),
                              }),
                              (0, V.jsx)(e0.default.Button, {
                                value: 3,
                                children: k("msg.def2"),
                              }),
                            ],
                          }),
                          (0, V.jsx)(e$.default, {
                            type: "number",
                            step: 1e-5,
                            style: { width: 100 },
                            value: Z,
                            onChange: (e) => {
                              let t = Number(e.target.value);
                              I(t), (E.current = t);
                            },
                          }),
                        ],
                      })
                    : "",
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: k("msgbox.fbtn") }),
                onClick: () => et(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: ee,
                msgParam: ea,
                handleCancel: () => {
                  et(!1);
                },
              }),
              w && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var aZ = a(48764).Buffer;
      let aI = [],
        aE = new Y.PublicKey("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo"),
        RemoveMeteoraLiqView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(null),
            [g, p] = (0, z.useState)([]),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(!1),
            { t: w } = (0, G.$G)("common"),
            [j, k] = (0, z.useState)(100),
            [S, v] = (0, z.useState)(50),
            [P, N] = (0, z.useState)(!1),
            [T, A] = (0, z.useState)(128),
            [L, B] = (0, z.useState)(63),
            [K, M] = (0, z.useState)(201),
            [C, _] = (0, z.useState)(null),
            [R, O] = (0, z.useState)(10),
            [Z, I] = (0, z.useState)(5),
            [E, F] = (0, z.useState)(""),
            [q, D] = (0, z.useState)(!1),
            [W, H] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            d && O((d.amount / 100) * j);
          }, [j, d]),
            (0, z.useEffect)(() => {
              m && I((m.amount / 100) * S);
            }, [S, m]);
          let removeLiq = async () => {
            if (!t || !l) {
              console.log("钱包未连接"),
                notify({ type: "error", message: "钱包未连接" });
              return;
            }
            let e = d.mint,
              n = m.mint,
              s = document.getElementById("binstep"),
              o = Number(null == s ? void 0 : s.value);
            try {
              let l = new Y.PublicKey(e),
                s = new Y.PublicKey(n),
                r = new (eX())(o),
                i = new (eX())(1e4),
                [c] = (function (e, t, a, l, n) {
                  let [s, o] = (function (e, t) {
                    let [a, l] =
                      1 == e.toBuffer().compare(t.toBuffer()) ? [t, e] : [e, t];
                    return [a, l];
                  })(e, t);
                  return Y.PublicKey.findProgramAddressSync(
                    [
                      s.toBuffer(),
                      o.toBuffer(),
                      new Uint8Array(a.toArrayLike(aZ, "le", 2)),
                      new Uint8Array(l.toArrayLike(aZ, "le", 2)),
                    ],
                    n
                  );
                })(l, s, r, i, aE);
              if (!c) {
                notify({
                  type: "error",
                  message: "错误",
                  description: "未找到池子,请先创建池子",
                });
                return;
              }
              let d = await aA.ZP.create(a, c);
              console.log(d);
              let { userPositions: u } = await d.getPositionsByUserAndLbPair(
                t.publicKey
              );
              console.log(u);
              let m = u[0],
                x = m.positionData.positionBinData.map((e) => e.binId);
              console.log(x);
              let g = await d.removeLiquidity({
                  user: t.publicKey,
                  position: m.publicKey,
                  binIds: x,
                  bps: new (eX())(1e4),
                }),
                p = new Y.PublicKey(
                  "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                ),
                y = Y.SystemProgram.transfer({
                  fromPubkey: t.publicKey,
                  toPubkey: p,
                  lamports: 25e7,
                });
              g.add(y), (g.feePayer = t.publicKey);
              let f = (await a.getLatestBlockhash()).blockhash;
              g.recentBlockhash = f;
              let h = await t.signTransaction(g),
                b = h.serialize(),
                w = await a.sendRawTransaction(b, { skipPreflight: !0 });
              console.log(w),
                H({
                  addrTag: "account",
                  addrName: "",
                  addr1: "请留意哈希是否上链",
                  hxName: "交易哈希:",
                  hxAddr: w,
                });
            } catch (e) {
              notify({
                type: "error",
                message: "错误",
                description: "交易发生错误",
              });
            }
          };
          async function displaytokenList(e, t) {
            if (e) {
              p([]);
              for (let e = 0; e < aI.length; e++)
                if (aI[e].isToken) {
                  let t = aI[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: aI[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      aI[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", aI[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: aI[e].label,
                      amount: aI[e].amount,
                      address: aI[e].address,
                      dec: aI[e].dec,
                    };
                  p((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(aI[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aI[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aI[e].label,
                    amount: aI[e].amount / 1e9,
                    address: aI[e].address,
                    dec: aI[e].dec,
                  };
                  p((e) => [...e, t]);
                }
            } else {
              p([]), console.log(aI);
              for (let e = 0; e < aI.length; e++)
                if (aI[e].isToken && aI[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [aI[e].symbol, " - ", aI[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aI[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aI[e].label,
                    address: aI[e].address,
                  };
                  p((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (l) {
              if (!i) {
                c(!0), p((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(l.toString());
                if (e.result) {
                  c(!0), (aI = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? aI.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : aI.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      style: { color: "black" },
                      children: w("repool.t1"),
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: w("pool.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: d,
                          onChange: (e) => {
                            u(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: w("pool.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: m,
                          onChange: (e) => {
                            x(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: "BinStep:",
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsx)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: (0, V.jsx)("input", {
                            type: "number",
                            id: "binstep",
                            defaultValue: 1,
                            className:
                              " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            style: {
                              background: "#fff",
                              color: "black",
                              width: "110%",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className:
                      "flex flex-col md:flex-row items-center space-x-3 w-[600px]",
                    children: (0, V.jsx)("div", {
                      className:
                        "flex flex-col md:w-2/3 max-w-md mx-auto px-10 my-2 items-center",
                      children: (0, V.jsxs)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: removeLiq,
                        style: {
                          background: "#ff9815",
                          border: "none",
                          borderRadius: "5px 5px 5px 5px",
                          boxShadow: "0 4px 0 0 #db7a00",
                          padding: "10px 50px",
                          color: "#fff",
                        },
                        children: [w("repool.enter"), " "],
                      }),
                    }),
                  }),
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: w("msgbox.fbtn") }),
                onClick: () => D(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: q,
                msgParam: W,
                handleCancel: () => {
                  D(!1);
                },
              }),
              h && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
      var aF = a(48764).Buffer;
      let { Paragraph: aq, Text: aD } = ek.default,
        aV = [],
        az = new Y.PublicKey("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo"),
        MeteoraSwapView = (e) => {
          let {} = e,
            t = (0, Q.O)(),
            { connection: a } = (0, U.R)(),
            {
              publicKey: l,
              sendTransaction: n,
              signMessage: s,
              signTransaction: o,
              signAllTransactions: r,
            } = (0, Q.O)(),
            [i, c] = (0, z.useState)(!1),
            [d, u] = (0, z.useState)(null),
            [m, x] = (0, z.useState)(null),
            [g, p] = (0, z.useState)([]),
            [y, f] = (0, z.useState)([]),
            [h, b] = (0, z.useState)(!1),
            w = (0, z.useRef)(h),
            [j, k] = (0, z.useState)(!1),
            [S, v] = (0, z.useState)(!0),
            [P, N] = (0, z.useState)(1),
            [T, A] = (0, z.useState)(3e-5),
            L = (0, z.useRef)(T),
            { t: B } = (0, G.$G)("common"),
            [K, M] = (0, z.useState)(100),
            [C, _] = (0, z.useState)(50),
            [R, O] = (0, z.useState)(!1),
            [Z, I] = (0, z.useState)(128),
            [E, F] = (0, z.useState)(63),
            [q, D] = (0, z.useState)(201),
            [W, H] = (0, z.useState)(null),
            [X, J] = (0, z.useState)(10),
            [$, ee] = (0, z.useState)(5),
            [et, ea] = (0, z.useState)(""),
            [el, en] = (0, z.useState)(!1),
            [es, eo] = useMessageBoxPam({
              addrTag: "",
              addrName: "",
              addr1: "",
              hxName: "",
              hxAddr: "",
            });
          (0, z.useEffect)(() => {
            d && J((d.amount / 100) * K);
          }, [K, d]),
            (0, z.useEffect)(() => {
              m && ee((m.amount / 100) * C);
            }, [C, m]);
          let setEmvModeProc = (e) => {
              v(e);
            },
            handleSwap = async () => {
              if (!t || !l) {
                console.log("钱包未连接"),
                  notify({ type: "error", message: "钱包未连接" });
                return;
              }
              let e = d.mint,
                n = m.mint,
                s = document.getElementById("binstep"),
                o = Number(null == s ? void 0 : s.value),
                r = document.getElementById("amount"),
                i = Number(null == r ? void 0 : r.value),
                c = document.getElementById("slip"),
                u = Number(null == c ? void 0 : c.value);
              try {
                let l;
                let s = new Y.PublicKey(e),
                  r = new Y.PublicKey(n),
                  c = new (eX())(o),
                  d = new (eX())(1e4),
                  [m] = (function (e, t, a, l, n) {
                    let [s, o] = (function (e, t) {
                      let [a, l] =
                        1 == e.toBuffer().compare(t.toBuffer())
                          ? [t, e]
                          : [e, t];
                      return [a, l];
                    })(e, t);
                    return Y.PublicKey.findProgramAddressSync(
                      [
                        s.toBuffer(),
                        o.toBuffer(),
                        new Uint8Array(a.toArrayLike(aF, "le", 2)),
                        new Uint8Array(l.toArrayLike(aF, "le", 2)),
                      ],
                      n
                    );
                  })(s, r, c, d, az);
                if (!m) {
                  notify({
                    type: "error",
                    message: "错误",
                    description: "未找到池子,请先创建池子",
                  });
                  return;
                }
                let x = await aA.ZP.create(a, m);
                console.log(x);
                let g = i * 10 ** x.tokenY.decimal;
                console.log("amount: ", g);
                let p = new (eX())(g),
                  y = w.current;
                console.log(y);
                let f = await x.getBinArrayForSwap(y),
                  h = await x.swapQuote(p, y, new (eX())(u), f);
                l = y
                  ? await x.swap({
                      inToken: x.tokenX.publicKey,
                      binArraysPubkey: h.binArraysPubkey,
                      inAmount: p,
                      lbPair: x.pubkey,
                      user: t.publicKey,
                      minOutAmount: h.minOutAmount,
                      outToken: x.tokenY.publicKey,
                    })
                  : await x.swap({
                      inToken: x.tokenY.publicKey,
                      binArraysPubkey: h.binArraysPubkey,
                      inAmount: p,
                      lbPair: x.pubkey,
                      user: t.publicKey,
                      minOutAmount: h.minOutAmount,
                      outToken: x.tokenX.publicKey,
                    });
                let b = new Y.PublicKey(
                    "7Z8Hj7DX7ohBbrgrTtnMKXd3HKc2ZHLuQQFFcY8iujxA"
                  ),
                  j = Y.SystemProgram.transfer({
                    fromPubkey: t.publicKey,
                    toPubkey: b,
                    lamports: 25e4,
                  });
                if ((l.add(j), S)) {
                  let e = getRandomTipAccount(),
                    n = L.current;
                  l.add(
                    Y.SystemProgram.transfer({
                      fromPubkey: t.publicKey,
                      toPubkey: e,
                      lamports: n * Y.LAMPORTS_PER_SOL,
                    })
                  ),
                    (l.feePayer = t.publicKey);
                  let s = (await a.getLatestBlockhash()).blockhash;
                  l.recentBlockhash = s;
                  let o = await t.signTransaction(l),
                    r = e8().encode(o.serialize()),
                    i = [];
                  i.push(r);
                  let c = await sendBundle(i);
                  notify({
                    type: "success",
                    message: "交易已发送",
                    description: "捆绑包ID: ".concat(c),
                  });
                } else {
                  l.feePayer = t.publicKey;
                  let e = (await a.getLatestBlockhash()).blockhash;
                  l.recentBlockhash = e;
                  let n = await t.signTransaction(l),
                    s = n.serialize(),
                    o = await a.sendRawTransaction(s, { skipPreflight: !0 });
                  console.log(o),
                    eo({
                      addrTag: "account",
                      addrName: "",
                      addr1: "请留意哈希是否上链",
                      hxName: "交易哈希:",
                      hxAddr: o,
                    }),
                    en(!0);
                }
              } catch (t) {
                console.log(t);
                let e = t.toString();
                e.includes("SWAP_QUOTE_INSUFFICIENT_LIQUIDITY")
                  ? (console.log("错误：流动性不足"),
                    notify({
                      type: "error",
                      message: "错误",
                      description:
                        "流动性不足,尝试增加滑点 或 降低交易数量 如: 0.001",
                    }))
                  : (console.log("其他错误：", t),
                    notify({
                      type: "error",
                      message: "错误",
                      description: "交易发生错误",
                    }));
              }
            };
          async function displaytokenList(e, t) {
            if (e) {
              p([]);
              for (let e = 0; e < aV.length; e++)
                if (aV[e].isToken) {
                  let t = aV[e].uri,
                    a = {
                      value: e,
                      label: (0, V.jsxs)("div", {
                        className: "flex justify-between items-center",
                        children: [
                          (0, V.jsxs)("div", {
                            className: "flex items-center",
                            children: [
                              (0, V.jsx)("div", {
                                className:
                                  "w-10 h-10 rounded-full overflow-hidden border-2 border-gray-200",
                                children: (0, V.jsx)(imageParam, {
                                  src: t,
                                  alt: "LOGO",
                                }),
                              }),
                              (0, V.jsxs)("div", {
                                children: [
                                  (0, V.jsx)("span", {
                                    className: "text-rose-600 ml-2",
                                    children: aV[e].symbol,
                                  }),
                                  (0, V.jsx)("span", {
                                    className: "text-stone-400 text-xs ml-2",
                                    children: truncateString(
                                      aV[e].label,
                                      16,
                                      8,
                                      8
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (0, V.jsx)("div", {
                            className: "flex items-center",
                            children: (0, V.jsxs)("span", {
                              className: "text-rose-400 text-xs",
                              children: ["余额: ", aV[e].amount],
                            }),
                          }),
                        ],
                      }),
                      mint: aV[e].label,
                      amount: aV[e].amount,
                      address: aV[e].address,
                      dec: aV[e].dec,
                    };
                  p((e) => [...e, a]);
                } else {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-stone-400 text-sm ml-2",
                          children: [
                            "Token - ",
                            truncateString(aV[e].label, 16, 8, 8),
                          ],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aV[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aV[e].label,
                    amount: aV[e].amount / 1e9,
                    address: aV[e].address,
                    dec: aV[e].dec,
                  };
                  p((e) => [...e, t]);
                }
            } else {
              p([]), console.log(aV);
              for (let e = 0; e < aV.length; e++)
                if (aV[e].isToken && aV[e].updateAuthority === t) {
                  let t = {
                    value: e,
                    label: (0, V.jsxs)("div", {
                      className: "flex justify-between",
                      children: [
                        (0, V.jsxs)("span", {
                          className: "text-gray-800",
                          children: [aV[e].symbol, " - ", aV[e].label],
                        }),
                        (0, V.jsxs)("span", {
                          className: "text-gray-400 text-sm",
                          children: ["余额:", aV[e].amount / 1e9],
                        }),
                      ],
                    }),
                    mint: aV[e].label,
                    address: aV[e].address,
                  };
                  p((e) => [...e, t]);
                }
            }
          }
          let handleFocus = async () => {
            if (l) {
              if (!i) {
                c(!0), p((e) => [...e, { label: "Loading..." }]);
                let e = await getTokenListByShyft(l.toString());
                if (e.result) {
                  c(!0), (aV = []);
                  for (let t = 0; t < e.result.length; t++) {
                    let a = e.result[t];
                    "Unknown Token" === a.info.name
                      ? aV.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !1,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        })
                      : aV.push({
                          value: t,
                          label: a.address,
                          address: a.associated_account,
                          amount: a.balance,
                          isToken: !0,
                          name: a.info.name,
                          symbol: a.info.symbol,
                          uri: a.info.image,
                          dec: a.info.decimals,
                        });
                  }
                  displaytokenList(!0);
                }
              }
            } else
              notify({
                type: "error",
                message: "错误",
                description: "请先连接钱包",
              });
          };
          return (0, V.jsxs)("div", {
            className: "flex flex-col md:hero mx-auto p-1 md:w-full",
            children: [
              (0, V.jsxs)("div", {
                className: "",
                children: [
                  (0, V.jsx)("div", {
                    className: "mt-6",
                    children: (0, V.jsx)("h1", {
                      className:
                        "text-center text-4xl md:pl-12 text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4",
                      style: { color: "black" },
                      children: "SWAP",
                    }),
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: B("pool.base"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: d,
                          onChange: (e) => {
                            u(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2",
                        style: { color: "black" },
                        children: B("pool.quote"),
                      }),
                      (0, V.jsx)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: (0, V.jsx)(eM.ZP, {
                          value: m,
                          onChange: (e) => {
                            x(e);
                          },
                          onFocus: handleFocus,
                          options: g,
                          className: "text-black w-[400px]",
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: "BinStep:",
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsx)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: (0, V.jsx)("input", {
                            type: "number",
                            id: "binstep",
                            defaultValue: 1,
                            className:
                              " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            style: {
                              background: "#fff",
                              color: "black",
                              width: "110%",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px]",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: B("pool.jiaoyishezhi"),
                      }),
                      (0, V.jsxs)("div", {
                        className: "max-w-md mx-auto px-10 my-2 w-full",
                        children: [
                          (0, V.jsx)("input", {
                            type: "checkbox",
                            className: "toggle_ny",
                            defaultChecked: !1,
                            onChange: (e) => {
                              let t = e.target.checked;
                              b(t), (w.current = t);
                            },
                            style: { background: "#fff", color: "black" },
                          }),
                          (0, V.jsx)("span", {
                            style: {
                              marginBottom: 20,
                              color: "black",
                              marginLeft: "10px",
                            },
                            children: B(h ? "pool.maichu" : "pool.mairu"),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: B("pool.shuliang"),
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsx)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: (0, V.jsx)("input", {
                            type: "number",
                            id: "amount",
                            defaultValue: 1,
                            className:
                              " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            style: {
                              background: "#fff",
                              color: "black",
                              width: "110%",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsxs)("div", {
                    className:
                      "flex flex-col md:max-w-2xl md:flex-row items-center space-x-3 w-[600px] justify-center",
                    children: [
                      (0, V.jsx)("div", {
                        className:
                          "md:w-1/3 md:text-1xl text-right text-stone-300 text-base mr-2 ",
                        style: { color: "black" },
                        children: B("pool.huadian"),
                      }),
                      (0, V.jsx)("div", {
                        className:
                          "md:max-w-2x1 mx-auto px-10 my-2 w-full flex items-center",
                        children: (0, V.jsx)("div", {
                          className: "md:w-1/2",
                          style: { width: "100%" },
                          children: (0, V.jsx)("input", {
                            type: "number",
                            id: "slip",
                            defaultValue: 100,
                            className:
                              " max-w-md mx-auto mockup-code bg-primary border-2 border-[#5252529f] text-sm p-2 px-2 my-2 w-full",
                            style: {
                              background: "#fff",
                              color: "black",
                              width: "110%",
                            },
                          }),
                        }),
                      }),
                    ],
                  }),
                  (0, V.jsx)("div", {
                    className:
                      "flex flex-col md:flex-row items-center space-x-3 w-[600px]",
                    children: (0, V.jsx)("div", {
                      className:
                        "flex flex-col md:w-2/3 max-w-md mx-auto px-10 my-2 items-center",
                      children: (0, V.jsx)("button", {
                        className:
                          "px-16 m-2 btn bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black",
                        onClick: handleSwap,
                        style: {
                          background: "#ff9815",
                          border: "none",
                          borderRadius: "5px 5px 5px 5px",
                          boxShadow: "0 4px 0 0 #db7a00",
                          padding: "10px 50px",
                          color: "#fff",
                          width: "156px",
                        },
                        children: "Swap ",
                      }),
                    }),
                  }),
                  (0, V.jsxs)(ej.Z, {
                    style: {
                      display: "flex",
                      marginTop: "6px",
                      alignItems: "center",
                      justifyContent: "flex-end",
                    },
                    children: [
                      (0, V.jsxs)(aD, {
                        type: "warning",
                        children: ["MEV ", B("msg.mode")],
                      }),
                      (0, V.jsx)(e1.Z, {
                        value: S,
                        onChange: () => {
                          setEmvModeProc(!S);
                        },
                      }),
                    ],
                  }),
                  S
                    ? (0, V.jsxs)(ej.Z, {
                        style: {
                          display: "flex",
                          marginTop: "6px",
                          alignItems: "center",
                          justifyContent: "flex-end",
                        },
                        children: [
                          (0, V.jsxs)(e0.default.Group, {
                            value: P,
                            onChange: (e) => {
                              let t = e.target.value;
                              N(t),
                                1 === t
                                  ? (A(3e-5), (L.current = 3e-5))
                                  : 2 === t
                                  ? (A(0.001), (L.current = 0.001))
                                  : 3 === t && (A(0.01), (L.current = 0.01));
                            },
                            children: [
                              (0, V.jsx)(e0.default.Button, {
                                value: 1,
                                children: B("msg.def"),
                              }),
                              (0, V.jsx)(e0.default.Button, {
                                value: 2,
                                children: B("msg.def1"),
                              }),
                              (0, V.jsx)(e0.default.Button, {
                                value: 3,
                                children: B("msg.def2"),
                              }),
                            ],
                          }),
                          (0, V.jsx)(e$.default, {
                            type: "number",
                            step: 1e-5,
                            style: { width: 100 },
                            value: T,
                            onChange: (e) => {
                              let t = Number(e.target.value);
                              A(t), (L.current = t);
                            },
                          }),
                        ],
                      })
                    : "",
                ],
              }),
              (0, V.jsx)(ef.Z, {
                tooltip: (0, V.jsx)("div", { children: B("msgbox.fbtn") }),
                onClick: () => en(!0),
              }),
              (0, V.jsx)(msgbox, {
                isModalOpen: el,
                msgParam: es,
                handleCancel: () => {
                  en(!1);
                },
              }),
              j && (0, V.jsx)(components_Loading, {}),
            ],
          });
        };
    },
    7420: function () {},
    15365: function () {},
  },
]);
